// deno-fmt-ignore-file
/// This file is generated by scripts/generator.ts

export type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;

// Typedefs

export const GLbyte = "i8";
export const GLclampf = "f32";
export const GLfixed = "i32";
export const GLshort = "i16";
export const GLushort = "u16";
export const GLvoid = "void";
export const GLsync = "pointer";
export const GLint64 = "i64";
export const GLuint64 = "u64";
export const GLenum = "u32";
export const GLuint = "u32";
export const GLchar = "i8";
export const GLfloat = "f32";
export const GLsizeiptr = "isize";
export const GLintptr = "pointer";
export const GLbitfield = "u32";
export const GLint = "i32";
export const GLboolean = "u8";
export const GLsizei = "i32";
export const GLubyte = "u8";
export const GLhalf = "u16";
export const userParam = "pointer";

// Constants

export const __gles2_gl32_h_ = 1;
export const GLES_PROTOTYPES = 1;
export const ES_VERSION_2_0 = 1;
export const DEPTH_BUFFER_BIT = 0x00000100;
export const STENCIL_BUFFER_BIT = 0x00000400;
export const COLOR_BUFFER_BIT = 0x00004000;
export const FALSE = 0;
export const TRUE = 1;
export const POINTS = 0x0000;
export const LINES = 0x0001;
export const LINE_LOOP = 0x0002;
export const LINE_STRIP = 0x0003;
export const TRIANGLES = 0x0004;
export const TRIANGLE_STRIP = 0x0005;
export const TRIANGLE_FAN = 0x0006;
export const ZERO = 0;
export const ONE = 1;
export const SRC_COLOR = 0x0300;
export const ONE_MINUS_SRC_COLOR = 0x0301;
export const SRC_ALPHA = 0x0302;
export const ONE_MINUS_SRC_ALPHA = 0x0303;
export const DST_ALPHA = 0x0304;
export const ONE_MINUS_DST_ALPHA = 0x0305;
export const DST_COLOR = 0x0306;
export const ONE_MINUS_DST_COLOR = 0x0307;
export const SRC_ALPHA_SATURATE = 0x0308;
export const FUNC_ADD = 0x8006;
export const BLEND_EQUATION = 0x8009;
export const BLEND_EQUATION_RGB = 0x8009;
export const BLEND_EQUATION_ALPHA = 0x883D;
export const FUNC_SUBTRACT = 0x800A;
export const FUNC_REVERSE_SUBTRACT = 0x800B;
export const BLEND_DST_RGB = 0x80C8;
export const BLEND_SRC_RGB = 0x80C9;
export const BLEND_DST_ALPHA = 0x80CA;
export const BLEND_SRC_ALPHA = 0x80CB;
export const CONSTANT_COLOR = 0x8001;
export const ONE_MINUS_CONSTANT_COLOR = 0x8002;
export const CONSTANT_ALPHA = 0x8003;
export const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
export const BLEND_COLOR = 0x8005;
export const ARRAY_BUFFER = 0x8892;
export const ELEMENT_ARRAY_BUFFER = 0x8893;
export const ARRAY_BUFFER_BINDING = 0x8894;
export const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
export const STREAM_DRAW = 0x88E0;
export const STATIC_DRAW = 0x88E4;
export const DYNAMIC_DRAW = 0x88E8;
export const BUFFER_SIZE = 0x8764;
export const BUFFER_USAGE = 0x8765;
export const CURRENT_VERTEX_ATTRIB = 0x8626;
export const FRONT = 0x0404;
export const BACK = 0x0405;
export const FRONT_AND_BACK = 0x0408;
export const TEXTURE_2D = 0x0DE1;
export const CULL_FACE = 0x0B44;
export const BLEND = 0x0BE2;
export const DITHER = 0x0BD0;
export const STENCIL_TEST = 0x0B90;
export const DEPTH_TEST = 0x0B71;
export const SCISSOR_TEST = 0x0C11;
export const POLYGON_OFFSET_FILL = 0x8037;
export const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
export const SAMPLE_COVERAGE = 0x80A0;
export const NO_ERROR = 0;
export const INVALID_ENUM = 0x0500;
export const INVALID_VALUE = 0x0501;
export const INVALID_OPERATION = 0x0502;
export const OUT_OF_MEMORY = 0x0505;
export const CW = 0x0900;
export const CCW = 0x0901;
export const LINE_WIDTH = 0x0B21;
export const ALIASED_POINT_SIZE_RANGE = 0x846D;
export const ALIASED_LINE_WIDTH_RANGE = 0x846E;
export const CULL_FACE_MODE = 0x0B45;
export const FRONT_FACE = 0x0B46;
export const DEPTH_RANGE = 0x0B70;
export const DEPTH_WRITEMASK = 0x0B72;
export const DEPTH_CLEAR_VALUE = 0x0B73;
export const DEPTH_FUNC = 0x0B74;
export const STENCIL_CLEAR_VALUE = 0x0B91;
export const STENCIL_FUNC = 0x0B92;
export const STENCIL_FAIL = 0x0B94;
export const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
export const STENCIL_PASS_DEPTH_PASS = 0x0B96;
export const STENCIL_REF = 0x0B97;
export const STENCIL_VALUE_MASK = 0x0B93;
export const STENCIL_WRITEMASK = 0x0B98;
export const STENCIL_BACK_FUNC = 0x8800;
export const STENCIL_BACK_FAIL = 0x8801;
export const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
export const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
export const STENCIL_BACK_REF = 0x8CA3;
export const STENCIL_BACK_VALUE_MASK = 0x8CA4;
export const STENCIL_BACK_WRITEMASK = 0x8CA5;
export const VIEWPORT = 0x0BA2;
export const SCISSOR_BOX = 0x0C10;
export const COLOR_CLEAR_VALUE = 0x0C22;
export const COLOR_WRITEMASK = 0x0C23;
export const UNPACK_ALIGNMENT = 0x0CF5;
export const PACK_ALIGNMENT = 0x0D05;
export const MAX_TEXTURE_SIZE = 0x0D33;
export const MAX_VIEWPORT_DIMS = 0x0D3A;
export const SUBPIXEL_BITS = 0x0D50;
export const RED_BITS = 0x0D52;
export const GREEN_BITS = 0x0D53;
export const BLUE_BITS = 0x0D54;
export const ALPHA_BITS = 0x0D55;
export const DEPTH_BITS = 0x0D56;
export const STENCIL_BITS = 0x0D57;
export const POLYGON_OFFSET_UNITS = 0x2A00;
export const POLYGON_OFFSET_FACTOR = 0x8038;
export const TEXTURE_BINDING_2D = 0x8069;
export const SAMPLE_BUFFERS = 0x80A8;
export const SAMPLES = 0x80A9;
export const SAMPLE_COVERAGE_VALUE = 0x80AA;
export const SAMPLE_COVERAGE_INVERT = 0x80AB;
export const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
export const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
export const DONT_CARE = 0x1100;
export const FASTEST = 0x1101;
export const NICEST = 0x1102;
export const GENERATE_MIPMAP_HINT = 0x8192;
export const BYTE = 0x1400;
export const UNSIGNED_BYTE = 0x1401;
export const SHORT = 0x1402;
export const UNSIGNED_SHORT = 0x1403;
export const INT = 0x1404;
export const UNSIGNED_INT = 0x1405;
export const FLOAT = 0x1406;
export const FIXED = 0x140C;
export const DEPTH_COMPONENT = 0x1902;
export const ALPHA = 0x1906;
export const RGB = 0x1907;
export const RGBA = 0x1908;
export const LUMINANCE = 0x1909;
export const LUMINANCE_ALPHA = 0x190A;
export const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
export const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
export const UNSIGNED_SHORT_5_6_5 = 0x8363;
export const FRAGMENT_SHADER = 0x8B30;
export const VERTEX_SHADER = 0x8B31;
export const MAX_VERTEX_ATTRIBS = 0x8869;
export const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
export const MAX_VARYING_VECTORS = 0x8DFC;
export const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
export const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
export const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
export const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
export const SHADER_TYPE = 0x8B4F;
export const DELETE_STATUS = 0x8B80;
export const LINK_STATUS = 0x8B82;
export const VALIDATE_STATUS = 0x8B83;
export const ATTACHED_SHADERS = 0x8B85;
export const ACTIVE_UNIFORMS = 0x8B86;
export const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
export const ACTIVE_ATTRIBUTES = 0x8B89;
export const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
export const SHADING_LANGUAGE_VERSION = 0x8B8C;
export const CURRENT_PROGRAM = 0x8B8D;
export const NEVER = 0x0200;
export const LESS = 0x0201;
export const EQUAL = 0x0202;
export const LEQUAL = 0x0203;
export const GREATER = 0x0204;
export const NOTEQUAL = 0x0205;
export const GEQUAL = 0x0206;
export const ALWAYS = 0x0207;
export const KEEP = 0x1E00;
export const REPLACE = 0x1E01;
export const INCR = 0x1E02;
export const DECR = 0x1E03;
export const INVERT = 0x150A;
export const INCR_WRAP = 0x8507;
export const DECR_WRAP = 0x8508;
export const VENDOR = 0x1F00;
export const RENDERER = 0x1F01;
export const VERSION = 0x1F02;
export const EXTENSIONS = 0x1F03;
export const NEAREST = 0x2600;
export const LINEAR = 0x2601;
export const NEAREST_MIPMAP_NEAREST = 0x2700;
export const LINEAR_MIPMAP_NEAREST = 0x2701;
export const NEAREST_MIPMAP_LINEAR = 0x2702;
export const LINEAR_MIPMAP_LINEAR = 0x2703;
export const TEXTURE_MAG_FILTER = 0x2800;
export const TEXTURE_MIN_FILTER = 0x2801;
export const TEXTURE_WRAP_S = 0x2802;
export const TEXTURE_WRAP_T = 0x2803;
export const TEXTURE = 0x1702;
export const TEXTURE_CUBE_MAP = 0x8513;
export const TEXTURE_BINDING_CUBE_MAP = 0x8514;
export const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
export const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
export const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
export const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
export const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
export const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
export const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
export const TEXTURE0 = 0x84C0;
export const TEXTURE1 = 0x84C1;
export const TEXTURE2 = 0x84C2;
export const TEXTURE3 = 0x84C3;
export const TEXTURE4 = 0x84C4;
export const TEXTURE5 = 0x84C5;
export const TEXTURE6 = 0x84C6;
export const TEXTURE7 = 0x84C7;
export const TEXTURE8 = 0x84C8;
export const TEXTURE9 = 0x84C9;
export const TEXTURE10 = 0x84CA;
export const TEXTURE11 = 0x84CB;
export const TEXTURE12 = 0x84CC;
export const TEXTURE13 = 0x84CD;
export const TEXTURE14 = 0x84CE;
export const TEXTURE15 = 0x84CF;
export const TEXTURE16 = 0x84D0;
export const TEXTURE17 = 0x84D1;
export const TEXTURE18 = 0x84D2;
export const TEXTURE19 = 0x84D3;
export const TEXTURE20 = 0x84D4;
export const TEXTURE21 = 0x84D5;
export const TEXTURE22 = 0x84D6;
export const TEXTURE23 = 0x84D7;
export const TEXTURE24 = 0x84D8;
export const TEXTURE25 = 0x84D9;
export const TEXTURE26 = 0x84DA;
export const TEXTURE27 = 0x84DB;
export const TEXTURE28 = 0x84DC;
export const TEXTURE29 = 0x84DD;
export const TEXTURE30 = 0x84DE;
export const TEXTURE31 = 0x84DF;
export const ACTIVE_TEXTURE = 0x84E0;
export const REPEAT = 0x2901;
export const CLAMP_TO_EDGE = 0x812F;
export const MIRRORED_REPEAT = 0x8370;
export const FLOAT_VEC2 = 0x8B50;
export const FLOAT_VEC3 = 0x8B51;
export const FLOAT_VEC4 = 0x8B52;
export const INT_VEC2 = 0x8B53;
export const INT_VEC3 = 0x8B54;
export const INT_VEC4 = 0x8B55;
export const BOOL = 0x8B56;
export const BOOL_VEC2 = 0x8B57;
export const BOOL_VEC3 = 0x8B58;
export const BOOL_VEC4 = 0x8B59;
export const FLOAT_MAT2 = 0x8B5A;
export const FLOAT_MAT3 = 0x8B5B;
export const FLOAT_MAT4 = 0x8B5C;
export const SAMPLER_2D = 0x8B5E;
export const SAMPLER_CUBE = 0x8B60;
export const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
export const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
export const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
export const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
export const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
export const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
export const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
export const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
export const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
export const COMPILE_STATUS = 0x8B81;
export const INFO_LOG_LENGTH = 0x8B84;
export const SHADER_SOURCE_LENGTH = 0x8B88;
export const SHADER_COMPILER = 0x8DFA;
export const SHADER_BINARY_FORMATS = 0x8DF8;
export const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
export const LOW_FLOAT = 0x8DF0;
export const MEDIUM_FLOAT = 0x8DF1;
export const HIGH_FLOAT = 0x8DF2;
export const LOW_INT = 0x8DF3;
export const MEDIUM_INT = 0x8DF4;
export const HIGH_INT = 0x8DF5;
export const FRAMEBUFFER = 0x8D40;
export const RENDERBUFFER = 0x8D41;
export const RGBA4 = 0x8056;
export const RGB5_A1 = 0x8057;
export const RGB565 = 0x8D62;
export const DEPTH_COMPONENT16 = 0x81A5;
export const STENCIL_INDEX8 = 0x8D48;
export const RENDERBUFFER_WIDTH = 0x8D42;
export const RENDERBUFFER_HEIGHT = 0x8D43;
export const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
export const RENDERBUFFER_RED_SIZE = 0x8D50;
export const RENDERBUFFER_GREEN_SIZE = 0x8D51;
export const RENDERBUFFER_BLUE_SIZE = 0x8D52;
export const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
export const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
export const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
export const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
export const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
export const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
export const COLOR_ATTACHMENT0 = 0x8CE0;
export const DEPTH_ATTACHMENT = 0x8D00;
export const STENCIL_ATTACHMENT = 0x8D20;
export const NONE = 0;
export const FRAMEBUFFER_COMPLETE = 0x8CD5;
export const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
export const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
export const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
export const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
export const FRAMEBUFFER_BINDING = 0x8CA6;
export const RENDERBUFFER_BINDING = 0x8CA7;
export const MAX_RENDERBUFFER_SIZE = 0x84E8;
export const INVALID_FRAMEBUFFER_OPERATION = 0x0506;
export const ES_VERSION_3_0 = 1;
export const READ_BUFFER = 0x0C02;
export const UNPACK_ROW_LENGTH = 0x0CF2;
export const UNPACK_SKIP_ROWS = 0x0CF3;
export const UNPACK_SKIP_PIXELS = 0x0CF4;
export const PACK_ROW_LENGTH = 0x0D02;
export const PACK_SKIP_ROWS = 0x0D03;
export const PACK_SKIP_PIXELS = 0x0D04;
export const COLOR = 0x1800;
export const DEPTH = 0x1801;
export const STENCIL = 0x1802;
export const RED = 0x1903;
export const RGB8 = 0x8051;
export const RGBA8 = 0x8058;
export const RGB10_A2 = 0x8059;
export const TEXTURE_BINDING_3D = 0x806A;
export const UNPACK_SKIP_IMAGES = 0x806D;
export const UNPACK_IMAGE_HEIGHT = 0x806E;
export const TEXTURE_3D = 0x806F;
export const TEXTURE_WRAP_R = 0x8072;
export const MAX_3D_TEXTURE_SIZE = 0x8073;
export const UNSIGNED_INT_2_10_10_10_REV = 0x8368;
export const MAX_ELEMENTS_VERTICES = 0x80E8;
export const MAX_ELEMENTS_INDICES = 0x80E9;
export const TEXTURE_MIN_LOD = 0x813A;
export const TEXTURE_MAX_LOD = 0x813B;
export const TEXTURE_BASE_LEVEL = 0x813C;
export const TEXTURE_MAX_LEVEL = 0x813D;
export const MIN = 0x8007;
export const MAX = 0x8008;
export const DEPTH_COMPONENT24 = 0x81A6;
export const MAX_TEXTURE_LOD_BIAS = 0x84FD;
export const TEXTURE_COMPARE_MODE = 0x884C;
export const TEXTURE_COMPARE_FUNC = 0x884D;
export const CURRENT_QUERY = 0x8865;
export const QUERY_RESULT = 0x8866;
export const QUERY_RESULT_AVAILABLE = 0x8867;
export const BUFFER_MAPPED = 0x88BC;
export const BUFFER_MAP_POINTER = 0x88BD;
export const STREAM_READ = 0x88E1;
export const STREAM_COPY = 0x88E2;
export const STATIC_READ = 0x88E5;
export const STATIC_COPY = 0x88E6;
export const DYNAMIC_READ = 0x88E9;
export const DYNAMIC_COPY = 0x88EA;
export const MAX_DRAW_BUFFERS = 0x8824;
export const DRAW_BUFFER0 = 0x8825;
export const DRAW_BUFFER1 = 0x8826;
export const DRAW_BUFFER2 = 0x8827;
export const DRAW_BUFFER3 = 0x8828;
export const DRAW_BUFFER4 = 0x8829;
export const DRAW_BUFFER5 = 0x882A;
export const DRAW_BUFFER6 = 0x882B;
export const DRAW_BUFFER7 = 0x882C;
export const DRAW_BUFFER8 = 0x882D;
export const DRAW_BUFFER9 = 0x882E;
export const DRAW_BUFFER10 = 0x882F;
export const DRAW_BUFFER11 = 0x8830;
export const DRAW_BUFFER12 = 0x8831;
export const DRAW_BUFFER13 = 0x8832;
export const DRAW_BUFFER14 = 0x8833;
export const DRAW_BUFFER15 = 0x8834;
export const MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
export const MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
export const SAMPLER_3D = 0x8B5F;
export const SAMPLER_2D_SHADOW = 0x8B62;
export const FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
export const PIXEL_PACK_BUFFER = 0x88EB;
export const PIXEL_UNPACK_BUFFER = 0x88EC;
export const PIXEL_PACK_BUFFER_BINDING = 0x88ED;
export const PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
export const FLOAT_MAT2x3 = 0x8B65;
export const FLOAT_MAT2x4 = 0x8B66;
export const FLOAT_MAT3x2 = 0x8B67;
export const FLOAT_MAT3x4 = 0x8B68;
export const FLOAT_MAT4x2 = 0x8B69;
export const FLOAT_MAT4x3 = 0x8B6A;
export const SRGB = 0x8C40;
export const SRGB8 = 0x8C41;
export const SRGB8_ALPHA8 = 0x8C43;
export const COMPARE_REF_TO_TEXTURE = 0x884E;
export const MAJOR_VERSION = 0x821B;
export const MINOR_VERSION = 0x821C;
export const NUM_EXTENSIONS = 0x821D;
export const RGBA32F = 0x8814;
export const RGB32F = 0x8815;
export const RGBA16F = 0x881A;
export const RGB16F = 0x881B;
export const VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
export const MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
export const MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
export const MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
export const MAX_VARYING_COMPONENTS = 0x8B4B;
export const TEXTURE_2D_ARRAY = 0x8C1A;
export const TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
export const R11F_G11F_B10F = 0x8C3A;
export const UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
export const RGB9_E5 = 0x8C3D;
export const UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
export const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
export const TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
export const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
export const TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
export const TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
export const TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
export const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
export const RASTERIZER_DISCARD = 0x8C89;
export const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
export const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
export const INTERLEAVED_ATTRIBS = 0x8C8C;
export const SEPARATE_ATTRIBS = 0x8C8D;
export const TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
export const TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
export const RGBA32UI = 0x8D70;
export const RGB32UI = 0x8D71;
export const RGBA16UI = 0x8D76;
export const RGB16UI = 0x8D77;
export const RGBA8UI = 0x8D7C;
export const RGB8UI = 0x8D7D;
export const RGBA32I = 0x8D82;
export const RGB32I = 0x8D83;
export const RGBA16I = 0x8D88;
export const RGB16I = 0x8D89;
export const RGBA8I = 0x8D8E;
export const RGB8I = 0x8D8F;
export const RED_INTEGER = 0x8D94;
export const RGB_INTEGER = 0x8D98;
export const RGBA_INTEGER = 0x8D99;
export const SAMPLER_2D_ARRAY = 0x8DC1;
export const SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
export const SAMPLER_CUBE_SHADOW = 0x8DC5;
export const UNSIGNED_INT_VEC2 = 0x8DC6;
export const UNSIGNED_INT_VEC3 = 0x8DC7;
export const UNSIGNED_INT_VEC4 = 0x8DC8;
export const INT_SAMPLER_2D = 0x8DCA;
export const INT_SAMPLER_3D = 0x8DCB;
export const INT_SAMPLER_CUBE = 0x8DCC;
export const INT_SAMPLER_2D_ARRAY = 0x8DCF;
export const UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
export const UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
export const UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
export const UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
export const BUFFER_ACCESS_FLAGS = 0x911F;
export const BUFFER_MAP_LENGTH = 0x9120;
export const BUFFER_MAP_OFFSET = 0x9121;
export const DEPTH_COMPONENT32F = 0x8CAC;
export const DEPTH32F_STENCIL8 = 0x8CAD;
export const FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
export const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
export const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
export const FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
export const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
export const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
export const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
export const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
export const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
export const FRAMEBUFFER_DEFAULT = 0x8218;
export const FRAMEBUFFER_UNDEFINED = 0x8219;
export const DEPTH_STENCIL_ATTACHMENT = 0x821A;
export const DEPTH_STENCIL = 0x84F9;
export const UNSIGNED_INT_24_8 = 0x84FA;
export const DEPTH24_STENCIL8 = 0x88F0;
export const UNSIGNED_NORMALIZED = 0x8C17;
export const DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
export const READ_FRAMEBUFFER = 0x8CA8;
export const DRAW_FRAMEBUFFER = 0x8CA9;
export const READ_FRAMEBUFFER_BINDING = 0x8CAA;
export const RENDERBUFFER_SAMPLES = 0x8CAB;
export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
export const MAX_COLOR_ATTACHMENTS = 0x8CDF;
export const COLOR_ATTACHMENT1 = 0x8CE1;
export const COLOR_ATTACHMENT2 = 0x8CE2;
export const COLOR_ATTACHMENT3 = 0x8CE3;
export const COLOR_ATTACHMENT4 = 0x8CE4;
export const COLOR_ATTACHMENT5 = 0x8CE5;
export const COLOR_ATTACHMENT6 = 0x8CE6;
export const COLOR_ATTACHMENT7 = 0x8CE7;
export const COLOR_ATTACHMENT8 = 0x8CE8;
export const COLOR_ATTACHMENT9 = 0x8CE9;
export const COLOR_ATTACHMENT10 = 0x8CEA;
export const COLOR_ATTACHMENT11 = 0x8CEB;
export const COLOR_ATTACHMENT12 = 0x8CEC;
export const COLOR_ATTACHMENT13 = 0x8CED;
export const COLOR_ATTACHMENT14 = 0x8CEE;
export const COLOR_ATTACHMENT15 = 0x8CEF;
export const COLOR_ATTACHMENT16 = 0x8CF0;
export const COLOR_ATTACHMENT17 = 0x8CF1;
export const COLOR_ATTACHMENT18 = 0x8CF2;
export const COLOR_ATTACHMENT19 = 0x8CF3;
export const COLOR_ATTACHMENT20 = 0x8CF4;
export const COLOR_ATTACHMENT21 = 0x8CF5;
export const COLOR_ATTACHMENT22 = 0x8CF6;
export const COLOR_ATTACHMENT23 = 0x8CF7;
export const COLOR_ATTACHMENT24 = 0x8CF8;
export const COLOR_ATTACHMENT25 = 0x8CF9;
export const COLOR_ATTACHMENT26 = 0x8CFA;
export const COLOR_ATTACHMENT27 = 0x8CFB;
export const COLOR_ATTACHMENT28 = 0x8CFC;
export const COLOR_ATTACHMENT29 = 0x8CFD;
export const COLOR_ATTACHMENT30 = 0x8CFE;
export const COLOR_ATTACHMENT31 = 0x8CFF;
export const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
export const MAX_SAMPLES = 0x8D57;
export const HALF_FLOAT = 0x140B;
export const MAP_READ_BIT = 0x0001;
export const MAP_WRITE_BIT = 0x0002;
export const MAP_INVALIDATE_RANGE_BIT = 0x0004;
export const MAP_INVALIDATE_BUFFER_BIT = 0x0008;
export const MAP_FLUSH_EXPLICIT_BIT = 0x0010;
export const MAP_UNSYNCHRONIZED_BIT = 0x0020;
export const RG = 0x8227;
export const RG_INTEGER = 0x8228;
export const R8 = 0x8229;
export const RG8 = 0x822B;
export const R16F = 0x822D;
export const R32F = 0x822E;
export const RG16F = 0x822F;
export const RG32F = 0x8230;
export const R8I = 0x8231;
export const R8UI = 0x8232;
export const R16I = 0x8233;
export const R16UI = 0x8234;
export const R32I = 0x8235;
export const R32UI = 0x8236;
export const RG8I = 0x8237;
export const RG8UI = 0x8238;
export const RG16I = 0x8239;
export const RG16UI = 0x823A;
export const RG32I = 0x823B;
export const RG32UI = 0x823C;
export const VERTEX_ARRAY_BINDING = 0x85B5;
export const R8_SNORM = 0x8F94;
export const RG8_SNORM = 0x8F95;
export const RGB8_SNORM = 0x8F96;
export const RGBA8_SNORM = 0x8F97;
export const SIGNED_NORMALIZED = 0x8F9C;
export const PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
export const COPY_READ_BUFFER = 0x8F36;
export const COPY_WRITE_BUFFER = 0x8F37;
export const COPY_READ_BUFFER_BINDING = 0x8F36;
export const COPY_WRITE_BUFFER_BINDING = 0x8F37;
export const UNIFORM_BUFFER = 0x8A11;
export const UNIFORM_BUFFER_BINDING = 0x8A28;
export const UNIFORM_BUFFER_START = 0x8A29;
export const UNIFORM_BUFFER_SIZE = 0x8A2A;
export const MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
export const MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
export const MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
export const MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
export const MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
export const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
export const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
export const UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
export const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
export const ACTIVE_UNIFORM_BLOCKS = 0x8A36;
export const UNIFORM_TYPE = 0x8A37;
export const UNIFORM_SIZE = 0x8A38;
export const UNIFORM_NAME_LENGTH = 0x8A39;
export const UNIFORM_BLOCK_INDEX = 0x8A3A;
export const UNIFORM_OFFSET = 0x8A3B;
export const UNIFORM_ARRAY_STRIDE = 0x8A3C;
export const UNIFORM_MATRIX_STRIDE = 0x8A3D;
export const UNIFORM_IS_ROW_MAJOR = 0x8A3E;
export const UNIFORM_BLOCK_BINDING = 0x8A3F;
export const UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
export const UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
export const UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
export const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
export const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
export const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
export const INVALID_INDEX = 0xFFFFFFFF;
export const MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
export const MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
export const MAX_SERVER_WAIT_TIMEOUT = 0x9111;
export const OBJECT_TYPE = 0x9112;
export const SYNC_CONDITION = 0x9113;
export const SYNC_STATUS = 0x9114;
export const SYNC_FLAGS = 0x9115;
export const SYNC_FENCE = 0x9116;
export const SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
export const UNSIGNALED = 0x9118;
export const SIGNALED = 0x9119;
export const ALREADY_SIGNALED = 0x911A;
export const TIMEOUT_EXPIRED = 0x911B;
export const CONDITION_SATISFIED = 0x911C;
export const WAIT_FAILED = 0x911D;
export const SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
export const TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
export const VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
export const ANY_SAMPLES_PASSED = 0x8C2F;
export const ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
export const SAMPLER_BINDING = 0x8919;
export const RGB10_A2UI = 0x906F;
export const TEXTURE_SWIZZLE_R = 0x8E42;
export const TEXTURE_SWIZZLE_G = 0x8E43;
export const TEXTURE_SWIZZLE_B = 0x8E44;
export const TEXTURE_SWIZZLE_A = 0x8E45;
export const GREEN = 0x1904;
export const BLUE = 0x1905;
export const INT_2_10_10_10_REV = 0x8D9F;
export const TRANSFORM_FEEDBACK = 0x8E22;
export const TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
export const TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
export const TRANSFORM_FEEDBACK_BINDING = 0x8E25;
export const PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
export const PROGRAM_BINARY_LENGTH = 0x8741;
export const NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
export const PROGRAM_BINARY_FORMATS = 0x87FF;
export const COMPRESSED_R11_EAC = 0x9270;
export const COMPRESSED_SIGNED_R11_EAC = 0x9271;
export const COMPRESSED_RG11_EAC = 0x9272;
export const COMPRESSED_SIGNED_RG11_EAC = 0x9273;
export const COMPRESSED_RGB8_ETC2 = 0x9274;
export const COMPRESSED_SRGB8_ETC2 = 0x9275;
export const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
export const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
export const COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
export const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
export const TEXTURE_IMMUTABLE_FORMAT = 0x912F;
export const MAX_ELEMENT_INDEX = 0x8D6B;
export const NUM_SAMPLE_COUNTS = 0x9380;
export const TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
export const ES_VERSION_3_1 = 1;
export const COMPUTE_SHADER = 0x91B9;
export const MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
export const MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
export const MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
export const MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
export const MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
export const MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
export const MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
export const MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
export const MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
export const MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
export const MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
export const COMPUTE_WORK_GROUP_SIZE = 0x8267;
export const DISPATCH_INDIRECT_BUFFER = 0x90EE;
export const DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
export const COMPUTE_SHADER_BIT = 0x00000020;
export const DRAW_INDIRECT_BUFFER = 0x8F3F;
export const DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
export const MAX_UNIFORM_LOCATIONS = 0x826E;
export const FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
export const FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
export const FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
export const FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
export const MAX_FRAMEBUFFER_WIDTH = 0x9315;
export const MAX_FRAMEBUFFER_HEIGHT = 0x9316;
export const MAX_FRAMEBUFFER_SAMPLES = 0x9318;
export const UNIFORM = 0x92E1;
export const UNIFORM_BLOCK = 0x92E2;
export const PROGRAM_INPUT = 0x92E3;
export const PROGRAM_OUTPUT = 0x92E4;
export const BUFFER_VARIABLE = 0x92E5;
export const SHADER_STORAGE_BLOCK = 0x92E6;
export const ATOMIC_COUNTER_BUFFER = 0x92C0;
export const TRANSFORM_FEEDBACK_VARYING = 0x92F4;
export const ACTIVE_RESOURCES = 0x92F5;
export const MAX_NAME_LENGTH = 0x92F6;
export const MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
export const NAME_LENGTH = 0x92F9;
export const TYPE = 0x92FA;
export const ARRAY_SIZE = 0x92FB;
export const OFFSET = 0x92FC;
export const BLOCK_INDEX = 0x92FD;
export const ARRAY_STRIDE = 0x92FE;
export const MATRIX_STRIDE = 0x92FF;
export const IS_ROW_MAJOR = 0x9300;
export const ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
export const BUFFER_BINDING = 0x9302;
export const BUFFER_DATA_SIZE = 0x9303;
export const NUM_ACTIVE_VARIABLES = 0x9304;
export const ACTIVE_VARIABLES = 0x9305;
export const REFERENCED_BY_VERTEX_SHADER = 0x9306;
export const REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
export const REFERENCED_BY_COMPUTE_SHADER = 0x930B;
export const TOP_LEVEL_ARRAY_SIZE = 0x930C;
export const TOP_LEVEL_ARRAY_STRIDE = 0x930D;
export const LOCATION = 0x930E;
export const VERTEX_SHADER_BIT = 0x00000001;
export const FRAGMENT_SHADER_BIT = 0x00000002;
export const ALL_SHADER_BITS = 0xFFFFFFFF;
export const PROGRAM_SEPARABLE = 0x8258;
export const ACTIVE_PROGRAM = 0x8259;
export const PROGRAM_PIPELINE_BINDING = 0x825A;
export const ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
export const ATOMIC_COUNTER_BUFFER_START = 0x92C2;
export const ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
export const MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
export const MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
export const MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
export const MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
export const MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
export const MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
export const MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
export const MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
export const ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
export const UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
export const MAX_IMAGE_UNITS = 0x8F38;
export const MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
export const MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
export const MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
export const IMAGE_BINDING_NAME = 0x8F3A;
export const IMAGE_BINDING_LEVEL = 0x8F3B;
export const IMAGE_BINDING_LAYERED = 0x8F3C;
export const IMAGE_BINDING_LAYER = 0x8F3D;
export const IMAGE_BINDING_ACCESS = 0x8F3E;
export const IMAGE_BINDING_FORMAT = 0x906E;
export const VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
export const ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
export const UNIFORM_BARRIER_BIT = 0x00000004;
export const TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
export const SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
export const COMMAND_BARRIER_BIT = 0x00000040;
export const PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
export const TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
export const BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
export const FRAMEBUFFER_BARRIER_BIT = 0x00000400;
export const TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
export const ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
export const ALL_BARRIER_BITS = 0xFFFFFFFF;
export const IMAGE_2D = 0x904D;
export const IMAGE_3D = 0x904E;
export const IMAGE_CUBE = 0x9050;
export const IMAGE_2D_ARRAY = 0x9053;
export const INT_IMAGE_2D = 0x9058;
export const INT_IMAGE_3D = 0x9059;
export const INT_IMAGE_CUBE = 0x905B;
export const INT_IMAGE_2D_ARRAY = 0x905E;
export const UNSIGNED_INT_IMAGE_2D = 0x9063;
export const UNSIGNED_INT_IMAGE_3D = 0x9064;
export const UNSIGNED_INT_IMAGE_CUBE = 0x9066;
export const UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
export const IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
export const IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
export const IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
export const READ_ONLY = 0x88B8;
export const WRITE_ONLY = 0x88B9;
export const READ_WRITE = 0x88BA;
export const SHADER_STORAGE_BUFFER = 0x90D2;
export const SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
export const SHADER_STORAGE_BUFFER_START = 0x90D4;
export const SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
export const MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
export const MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
export const MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
export const MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
export const MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
export const MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
export const SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
export const SHADER_STORAGE_BARRIER_BIT = 0x00002000;
export const MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
export const DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
export const STENCIL_INDEX = 0x1901;
export const MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
export const MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
export const SAMPLE_POSITION = 0x8E50;
export const SAMPLE_MASK = 0x8E51;
export const SAMPLE_MASK_VALUE = 0x8E52;
export const TEXTURE_2D_MULTISAMPLE = 0x9100;
export const MAX_SAMPLE_MASK_WORDS = 0x8E59;
export const MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
export const MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
export const MAX_INTEGER_SAMPLES = 0x9110;
export const TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
export const TEXTURE_SAMPLES = 0x9106;
export const TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
export const TEXTURE_WIDTH = 0x1000;
export const TEXTURE_HEIGHT = 0x1001;
export const TEXTURE_DEPTH = 0x8071;
export const TEXTURE_INTERNAL_FORMAT = 0x1003;
export const TEXTURE_RED_SIZE = 0x805C;
export const TEXTURE_GREEN_SIZE = 0x805D;
export const TEXTURE_BLUE_SIZE = 0x805E;
export const TEXTURE_ALPHA_SIZE = 0x805F;
export const TEXTURE_DEPTH_SIZE = 0x884A;
export const TEXTURE_STENCIL_SIZE = 0x88F1;
export const TEXTURE_SHARED_SIZE = 0x8C3F;
export const TEXTURE_RED_TYPE = 0x8C10;
export const TEXTURE_GREEN_TYPE = 0x8C11;
export const TEXTURE_BLUE_TYPE = 0x8C12;
export const TEXTURE_ALPHA_TYPE = 0x8C13;
export const TEXTURE_DEPTH_TYPE = 0x8C16;
export const TEXTURE_COMPRESSED = 0x86A1;
export const SAMPLER_2D_MULTISAMPLE = 0x9108;
export const INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
export const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
export const VERTEX_ATTRIB_BINDING = 0x82D4;
export const VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
export const VERTEX_BINDING_DIVISOR = 0x82D6;
export const VERTEX_BINDING_OFFSET = 0x82D7;
export const VERTEX_BINDING_STRIDE = 0x82D8;
export const VERTEX_BINDING_BUFFER = 0x8F4F;
export const MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
export const MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
export const MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
export const ES_VERSION_3_2 = 1;
export const MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;
export const MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;
export const MULTIPLY = 0x9294;
export const SCREEN = 0x9295;
export const OVERLAY = 0x9296;
export const DARKEN = 0x9297;
export const LIGHTEN = 0x9298;
export const COLORDODGE = 0x9299;
export const COLORBURN = 0x929A;
export const HARDLIGHT = 0x929B;
export const SOFTLIGHT = 0x929C;
export const DIFFERENCE = 0x929E;
export const EXCLUSION = 0x92A0;
export const HSL_HUE = 0x92AD;
export const HSL_SATURATION = 0x92AE;
export const HSL_COLOR = 0x92AF;
export const HSL_LUMINOSITY = 0x92B0;
export const DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
export const DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
export const DEBUG_CALLBACK_FUNCTION = 0x8244;
export const DEBUG_CALLBACK_USER_PARAM = 0x8245;
export const DEBUG_SOURCE_API = 0x8246;
export const DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
export const DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
export const DEBUG_SOURCE_THIRD_PARTY = 0x8249;
export const DEBUG_SOURCE_APPLICATION = 0x824A;
export const DEBUG_SOURCE_OTHER = 0x824B;
export const DEBUG_TYPE_ERROR = 0x824C;
export const DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
export const DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
export const DEBUG_TYPE_PORTABILITY = 0x824F;
export const DEBUG_TYPE_PERFORMANCE = 0x8250;
export const DEBUG_TYPE_OTHER = 0x8251;
export const DEBUG_TYPE_MARKER = 0x8268;
export const DEBUG_TYPE_PUSH_GROUP = 0x8269;
export const DEBUG_TYPE_POP_GROUP = 0x826A;
export const DEBUG_SEVERITY_NOTIFICATION = 0x826B;
export const MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
export const DEBUG_GROUP_STACK_DEPTH = 0x826D;
export const BUFFER = 0x82E0;
export const SHADER = 0x82E1;
export const PROGRAM = 0x82E2;
export const VERTEX_ARRAY = 0x8074;
export const QUERY = 0x82E3;
export const PROGRAM_PIPELINE = 0x82E4;
export const SAMPLER = 0x82E6;
export const MAX_LABEL_LENGTH = 0x82E8;
export const MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
export const MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
export const DEBUG_LOGGED_MESSAGES = 0x9145;
export const DEBUG_SEVERITY_HIGH = 0x9146;
export const DEBUG_SEVERITY_MEDIUM = 0x9147;
export const DEBUG_SEVERITY_LOW = 0x9148;
export const DEBUG_OUTPUT = 0x92E0;
export const CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
export const STACK_OVERFLOW = 0x0503;
export const STACK_UNDERFLOW = 0x0504;
export const GEOMETRY_SHADER = 0x8DD9;
export const GEOMETRY_SHADER_BIT = 0x00000004;
export const GEOMETRY_VERTICES_OUT = 0x8916;
export const GEOMETRY_INPUT_TYPE = 0x8917;
export const GEOMETRY_OUTPUT_TYPE = 0x8918;
export const GEOMETRY_SHADER_INVOCATIONS = 0x887F;
export const LAYER_PROVOKING_VERTEX = 0x825E;
export const LINES_ADJACENCY = 0x000A;
export const LINE_STRIP_ADJACENCY = 0x000B;
export const TRIANGLES_ADJACENCY = 0x000C;
export const TRIANGLE_STRIP_ADJACENCY = 0x000D;
export const MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
export const MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
export const MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
export const MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
export const MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
export const MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
export const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
export const MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
export const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
export const MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
export const MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
export const MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
export const MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
export const FIRST_VERTEX_CONVENTION = 0x8E4D;
export const LAST_VERTEX_CONVENTION = 0x8E4E;
export const UNDEFINED_VERTEX = 0x8260;
export const PRIMITIVES_GENERATED = 0x8C87;
export const FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
export const MAX_FRAMEBUFFER_LAYERS = 0x9317;
export const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
export const FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
export const REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
export const PRIMITIVE_BOUNDING_BOX = 0x92BE;
export const CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
export const CONTEXT_FLAGS = 0x821E;
export const LOSE_CONTEXT_ON_RESET = 0x8252;
export const GUILTY_CONTEXT_RESET = 0x8253;
export const INNOCENT_CONTEXT_RESET = 0x8254;
export const UNKNOWN_CONTEXT_RESET = 0x8255;
export const RESET_NOTIFICATION_STRATEGY = 0x8256;
export const NO_RESET_NOTIFICATION = 0x8261;
export const CONTEXT_LOST = 0x0507;
export const SAMPLE_SHADING = 0x8C36;
export const MIN_SAMPLE_SHADING_VALUE = 0x8C37;
export const MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
export const MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
export const FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
export const PATCHES = 0x000E;
export const PATCH_VERTICES = 0x8E72;
export const TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
export const TESS_GEN_MODE = 0x8E76;
export const TESS_GEN_SPACING = 0x8E77;
export const TESS_GEN_VERTEX_ORDER = 0x8E78;
export const TESS_GEN_POINT_MODE = 0x8E79;
export const ISOLINES = 0x8E7A;
export const QUADS = 0x0007;
export const FRACTIONAL_ODD = 0x8E7B;
export const FRACTIONAL_EVEN = 0x8E7C;
export const MAX_PATCH_VERTICES = 0x8E7D;
export const MAX_TESS_GEN_LEVEL = 0x8E7E;
export const MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
export const MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
export const MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
export const MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
export const MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
export const MAX_TESS_PATCH_COMPONENTS = 0x8E84;
export const MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
export const MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
export const MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
export const MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
export const MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
export const MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
export const MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
export const MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
export const MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
export const MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
export const MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
export const MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
export const MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
export const MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
export const MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
export const MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
export const PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
export const IS_PER_PATCH = 0x92E7;
export const REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
export const REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
export const TESS_CONTROL_SHADER = 0x8E88;
export const TESS_EVALUATION_SHADER = 0x8E87;
export const TESS_CONTROL_SHADER_BIT = 0x00000008;
export const TESS_EVALUATION_SHADER_BIT = 0x00000010;
export const TEXTURE_BORDER_COLOR = 0x1004;
export const CLAMP_TO_BORDER = 0x812D;
export const TEXTURE_BUFFER = 0x8C2A;
export const TEXTURE_BUFFER_BINDING = 0x8C2A;
export const MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
export const TEXTURE_BINDING_BUFFER = 0x8C2C;
export const TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
export const TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
export const SAMPLER_BUFFER = 0x8DC2;
export const INT_SAMPLER_BUFFER = 0x8DD0;
export const UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
export const IMAGE_BUFFER = 0x9051;
export const INT_IMAGE_BUFFER = 0x905C;
export const UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
export const TEXTURE_BUFFER_OFFSET = 0x919D;
export const TEXTURE_BUFFER_SIZE = 0x919E;
export const COMPRESSED_RGBA_ASTC_4x4 = 0x93B0;
export const COMPRESSED_RGBA_ASTC_5x4 = 0x93B1;
export const COMPRESSED_RGBA_ASTC_5x5 = 0x93B2;
export const COMPRESSED_RGBA_ASTC_6x5 = 0x93B3;
export const COMPRESSED_RGBA_ASTC_6x6 = 0x93B4;
export const COMPRESSED_RGBA_ASTC_8x5 = 0x93B5;
export const COMPRESSED_RGBA_ASTC_8x6 = 0x93B6;
export const COMPRESSED_RGBA_ASTC_8x8 = 0x93B7;
export const COMPRESSED_RGBA_ASTC_10x5 = 0x93B8;
export const COMPRESSED_RGBA_ASTC_10x6 = 0x93B9;
export const COMPRESSED_RGBA_ASTC_10x8 = 0x93BA;
export const COMPRESSED_RGBA_ASTC_10x10 = 0x93BB;
export const COMPRESSED_RGBA_ASTC_12x10 = 0x93BC;
export const COMPRESSED_RGBA_ASTC_12x12 = 0x93BD;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC;
export const COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD;
export const TEXTURE_CUBE_MAP_ARRAY = 0x9009;
export const TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
export const SAMPLER_CUBE_MAP_ARRAY = 0x900C;
export const SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
export const INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
export const UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
export const IMAGE_CUBE_MAP_ARRAY = 0x9054;
export const INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
export const UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
export const TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
export const TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
export const SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
export const INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
export const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;

// Callbacks

export const PFNGLACTIVETEXTUREPROC = {
  parameters: [
    /* texture: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLATTACHSHADERPROC = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDATTRIBLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBINDBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDFRAMEBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* framebuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDRENDERBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDTEXTUREPROC = {
  parameters: [
    /* target: */ GLenum,
    /* texture: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBLENDCOLORPROC = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONSEPARATEPROC = {
  parameters: [
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCPROC = {
  parameters: [
    /* sfactor: */ GLenum,
    /* dfactor: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCSEPARATEPROC = {
  parameters: [
    /* sfactorRGB: */ GLenum,
    /* dfactorRGB: */ GLenum,
    /* sfactorAlpha: */ GLenum,
    /* dfactorAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBUFFERDATAPROC = {
  parameters: [
    /* target: */ GLenum,
    /* size: */ GLsizeiptr,
    /* data: */ "pointer",
    /* usage: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBUFFERSUBDATAPROC = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCHECKFRAMEBUFFERSTATUSPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLenum,
} as const;

export const PFNGLCLEARPROC = {
  parameters: [
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

export const PFNGLCLEARCOLORPROC = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLCLEARDEPTHFPROC = {
  parameters: [
    /* d: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLCLEARSTENCILPROC = {
  parameters: [
    /* s: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLCOLORMASKPROC = {
  parameters: [
    /* red: */ GLboolean,
    /* green: */ GLboolean,
    /* blue: */ GLboolean,
    /* alpha: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLCOMPILESHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOPYTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLCOPYTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLCREATEPROGRAMPROC = {
  parameters: [
  ],
  result: GLuint,
} as const;

export const PFNGLCREATESHADERPROC = {
  parameters: [
    /* type: */ GLenum,
  ],
  result: GLuint,
} as const;

export const PFNGLCULLFACEPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDELETEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETEFRAMEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETERENDERBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETESHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETETEXTURESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDEPTHFUNCPROC = {
  parameters: [
    /* func: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDEPTHMASKPROC = {
  parameters: [
    /* flag: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLDEPTHRANGEFPROC = {
  parameters: [
    /* n: */ GLfloat,
    /* f: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLDETACHSHADERPROC = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDISABLEPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDISABLEVERTEXATTRIBARRAYPROC = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDRAWARRAYSPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLDRAWELEMENTSPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLENABLEPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLENABLEVERTEXATTRIBARRAYPROC = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLFINISHPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLFLUSHPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERRENDERBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* renderbuffertarget: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERTEXTURE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* textarget: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLFRONTFACEPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGENBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENERATEMIPMAPPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGENFRAMEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENRENDERBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENTEXTURESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEATTRIBPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* size: */ "pointer",
    /* type: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEUNIFORMPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* size: */ "pointer",
    /* type: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETATTACHEDSHADERSPROC = {
  parameters: [
    /* program: */ GLuint,
    /* maxCount: */ GLsizei,
    /* count: */ "pointer",
    /* shaders: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETATTRIBLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLGETBOOLEANVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETBUFFERPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETERRORPROC = {
  parameters: [
  ],
  result: GLenum,
} as const;

export const PFNGLGETFLOATVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETINTEGERVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMINFOLOGPROC = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* infoLog: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETRENDERBUFFERPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERIVPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERINFOLOGPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* infoLog: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERPRECISIONFORMATPROC = {
  parameters: [
    /* shadertype: */ GLenum,
    /* precisiontype: */ GLenum,
    /* range: */ "pointer",
    /* precision: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERSOURCEPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* source: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSTRINGPROC = {
  parameters: [
    /* name: */ GLenum,
  ],
  result: "pointer",
} as const;

export const PFNGLGETTEXPARAMETERFVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETTEXPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMFVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLGETVERTEXATTRIBFVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBIVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBPOINTERVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLHINTPROC = {
  parameters: [
    /* target: */ GLenum,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLISBUFFERPROC = {
  parameters: [
    /* buffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISENABLEDPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: GLboolean,
} as const;

export const PFNGLISFRAMEBUFFERPROC = {
  parameters: [
    /* framebuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISRENDERBUFFERPROC = {
  parameters: [
    /* renderbuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISSHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISTEXTUREPROC = {
  parameters: [
    /* texture: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLLINEWIDTHPROC = {
  parameters: [
    /* width: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLLINKPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPIXELSTOREIPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPOLYGONOFFSETPROC = {
  parameters: [
    /* factor: */ GLfloat,
    /* units: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLREADPIXELSPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLRELEASESHADERCOMPILERPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLRENDERBUFFERSTORAGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSAMPLECOVERAGEPROC = {
  parameters: [
    /* value: */ GLfloat,
    /* invert: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLSCISSORPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSHADERBINARYPROC = {
  parameters: [
    /* count: */ GLsizei,
    /* shaders: */ "pointer",
    /* binaryformat: */ GLenum,
    /* binary: */ "pointer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSHADERSOURCEPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* count: */ GLsizei,
    /* const_string: */ "pointer",
    /* length: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSTENCILFUNCPROC = {
  parameters: [
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILFUNCSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILMASKPROC = {
  parameters: [
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILMASKSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILOPPROC = {
  parameters: [
    /* fail: */ GLenum,
    /* zfail: */ GLenum,
    /* zpass: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILOPSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* sfail: */ GLenum,
    /* dpfail: */ GLenum,
    /* dppass: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERFPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERFVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUSEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVALIDATEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB1FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB1FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB2FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB2FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB3FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB3FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB4FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
    /* w: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB4FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBPOINTERPROC = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* stride: */ GLsizei,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVIEWPORTPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLREADBUFFERPROC = {
  parameters: [
    /* src: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDRAWRANGEELEMENTSPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* start: */ GLuint,
    /* end: */ GLuint,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXIMAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXSUBIMAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOPYTEXSUBIMAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXIMAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENQUERIESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETEQUERIESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLISQUERYPROC = {
  parameters: [
    /* id: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLBEGINQUERYPROC = {
  parameters: [
    /* target: */ GLenum,
    /* id: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLENDQUERYPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGETQUERYIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETQUERYOBJECTUIVPROC = {
  parameters: [
    /* id: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNMAPBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLboolean,
} as const;

export const PFNGLGETBUFFERPOINTERVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDRAWBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* bufs: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX2X3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX3X2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX2X4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX4X2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX3X4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX4X3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBLITFRAMEBUFFERPROC = {
  parameters: [
    /* srcX0: */ GLint,
    /* srcY0: */ GLint,
    /* srcX1: */ GLint,
    /* srcY1: */ GLint,
    /* dstX0: */ GLint,
    /* dstY0: */ GLint,
    /* dstX1: */ GLint,
    /* dstY1: */ GLint,
    /* mask: */ GLbitfield,
    /* filter: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERTEXTURELAYERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
    /* layer: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLMAPBUFFERRANGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* length: */ GLsizeiptr,
    /* access: */ GLbitfield,
  ],
  result: "pointer",
} as const;

export const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* length: */ GLsizeiptr,
  ],
  result: "void",
} as const;

export const PFNGLBINDVERTEXARRAYPROC = {
  parameters: [
    /* array: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETEVERTEXARRAYSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* arrays: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENVERTEXARRAYSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* arrays: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLISVERTEXARRAYPROC = {
  parameters: [
    /* array: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLGETINTEGERI_VPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBEGINTRANSFORMFEEDBACKPROC = {
  parameters: [
    /* primitiveMode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLENDTRANSFORMFEEDBACKPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLBINDBUFFERRANGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

export const PFNGLBINDBUFFERBASEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = {
  parameters: [
    /* program: */ GLuint,
    /* count: */ GLsizei,
    /* const_varyings: */ "pointer",
    /* bufferMode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* size: */ "pointer",
    /* type: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBIPOINTERPROC = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* stride: */ GLsizei,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBIIVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBIUIVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBI4IPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* z: */ GLint,
    /* w: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBI4UIPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLuint,
    /* y: */ GLuint,
    /* z: */ GLuint,
    /* w: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBI4IVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBI4UIVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMUIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETFRAGDATALOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLUNIFORM1UIPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2UIPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3UIPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4UIPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
    /* v3: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1UIVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2UIVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3UIVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4UIVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCLEARBUFFERIVPROC = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCLEARBUFFERUIVPROC = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCLEARBUFFERFVPROC = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCLEARBUFFERFIPROC = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* depth: */ GLfloat,
    /* stencil: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLGETSTRINGIPROC = {
  parameters: [
    /* name: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "pointer",
} as const;

export const PFNGLCOPYBUFFERSUBDATAPROC = {
  parameters: [
    /* readTarget: */ GLenum,
    /* writeTarget: */ GLenum,
    /* readOffset: */ GLintptr,
    /* writeOffset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMINDICESPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformCount: */ GLsizei,
    /* const_uniformNames: */ "pointer",
    /* uniformIndices: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEUNIFORMSIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformCount: */ GLsizei,
    /* uniformIndices: */ "pointer",
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMBLOCKINDEXPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockName: */ "pointer",
  ],
  result: GLuint,
} as const;

export const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* uniformBlockName: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMBLOCKBINDINGPROC = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* uniformBlockBinding: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDRAWARRAYSINSTANCEDPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
    /* instancecount: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLDRAWELEMENTSINSTANCEDPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
    /* instancecount: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLFENCESYNCPROC = {
  parameters: [
    /* condition: */ GLenum,
    /* flags: */ GLbitfield,
  ],
  result: "pointer",
} as const;

export const PFNGLISSYNCPROC = {
  parameters: [
    /* sync: */ "pointer",
  ],
  result: GLboolean,
} as const;

export const PFNGLDELETESYNCPROC = {
  parameters: [
    /* sync: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCLIENTWAITSYNCPROC = {
  parameters: [
    /* sync: */ "pointer",
    /* flags: */ GLbitfield,
    /* timeout: */ GLuint64,
  ],
  result: GLenum,
} as const;

export const PFNGLWAITSYNCPROC = {
  parameters: [
    /* sync: */ "pointer",
    /* flags: */ GLbitfield,
    /* timeout: */ GLuint64,
  ],
  result: "void",
} as const;

export const PFNGLGETINTEGER64VPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSYNCIVPROC = {
  parameters: [
    /* sync: */ "pointer",
    /* pname: */ GLenum,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* values: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETINTEGER64I_VPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETBUFFERPARAMETERI64VPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENSAMPLERSPROC = {
  parameters: [
    /* count: */ GLsizei,
    /* samplers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETESAMPLERSPROC = {
  parameters: [
    /* count: */ GLsizei,
    /* samplers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLISSAMPLERPROC = {
  parameters: [
    /* sampler: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLBINDSAMPLERPROC = {
  parameters: [
    /* unit: */ GLuint,
    /* sampler: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERIPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERFPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERFVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSAMPLERPARAMETERIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSAMPLERPARAMETERFVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBDIVISORPROC = {
  parameters: [
    /* index: */ GLuint,
    /* divisor: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDTRANSFORMFEEDBACKPROC = {
  parameters: [
    /* target: */ GLenum,
    /* id: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETETRANSFORMFEEDBACKSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENTRANSFORMFEEDBACKSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLISTRANSFORMFEEDBACKPROC = {
  parameters: [
    /* id: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLPAUSETRANSFORMFEEDBACKPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLRESUMETRANSFORMFEEDBACKPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMBINARYPROC = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* binaryFormat: */ "pointer",
    /* binary: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMBINARYPROC = {
  parameters: [
    /* program: */ GLuint,
    /* binaryFormat: */ GLenum,
    /* binary: */ "pointer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMPARAMETERIPROC = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* value: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLINVALIDATEFRAMEBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* numAttachments: */ GLsizei,
    /* attachments: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLINVALIDATESUBFRAMEBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* numAttachments: */ GLsizei,
    /* attachments: */ "pointer",
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLTEXSTORAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* levels: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLTEXSTORAGE3DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* levels: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLGETINTERNALFORMATIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* pname: */ GLenum,
    /* bufSize: */ GLsizei,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDISPATCHCOMPUTEPROC = {
  parameters: [
    /* num_groups_x: */ GLuint,
    /* num_groups_y: */ GLuint,
    /* num_groups_z: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDISPATCHCOMPUTEINDIRECTPROC = {
  parameters: [
    /* indirect: */ GLintptr,
  ],
  result: "void",
} as const;

export const PFNGLDRAWARRAYSINDIRECTPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* indirect: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDRAWELEMENTSINDIRECTPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* type: */ GLenum,
    /* indirect: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERPARAMETERIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMINTERFACEIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMRESOURCEINDEXPROC = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* name: */ "pointer",
  ],
  result: GLuint,
} as const;

export const PFNGLGETPROGRAMRESOURCENAMEPROC = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMRESOURCEIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* index: */ GLuint,
    /* propCount: */ GLsizei,
    /* props: */ "pointer",
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMRESOURCELOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLUSEPROGRAMSTAGESPROC = {
  parameters: [
    /* pipeline: */ GLuint,
    /* stages: */ GLbitfield,
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLACTIVESHADERPROGRAMPROC = {
  parameters: [
    /* pipeline: */ GLuint,
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLCREATESHADERPROGRAMVPROC = {
  parameters: [
    /* type: */ GLenum,
    /* count: */ GLsizei,
    /* const_strings: */ "pointer",
  ],
  result: GLuint,
} as const;

export const PFNGLBINDPROGRAMPIPELINEPROC = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETEPROGRAMPIPELINESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* pipelines: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENPROGRAMPIPELINESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* pipelines: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLISPROGRAMPIPELINEPROC = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLGETPROGRAMPIPELINEIVPROC = {
  parameters: [
    /* pipeline: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1IPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2IPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3IPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4IPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1UIPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2UIPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3UIPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4UIPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
    /* v3: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1FPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2FPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3FPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4FPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1IVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2IVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3IVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4IVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1UIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2UIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3UIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4UIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM1FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM2FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM3FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORM4FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVALIDATEPROGRAMPIPELINEPROC = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = {
  parameters: [
    /* pipeline: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* infoLog: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBINDIMAGETEXTUREPROC = {
  parameters: [
    /* unit: */ GLuint,
    /* texture: */ GLuint,
    /* level: */ GLint,
    /* layered: */ GLboolean,
    /* layer: */ GLint,
    /* access: */ GLenum,
    /* format: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGETBOOLEANI_VPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLMEMORYBARRIERPROC = {
  parameters: [
    /* barriers: */ GLbitfield,
  ],
  result: "void",
} as const;

export const PFNGLMEMORYBARRIERBYREGIONPROC = {
  parameters: [
    /* barriers: */ GLbitfield,
  ],
  result: "void",
} as const;

export const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* fixedsamplelocations: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLGETMULTISAMPLEFVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* index: */ GLuint,
    /* val: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSAMPLEMASKIPROC = {
  parameters: [
    /* maskNumber: */ GLuint,
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

export const PFNGLGETTEXLEVELPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETTEXLEVELPARAMETERFVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBINDVERTEXBUFFERPROC = {
  parameters: [
    /* bindingindex: */ GLuint,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* stride: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBFORMATPROC = {
  parameters: [
    /* attribindex: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* relativeoffset: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBIFORMATPROC = {
  parameters: [
    /* attribindex: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* relativeoffset: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBBINDINGPROC = {
  parameters: [
    /* attribindex: */ GLuint,
    /* bindingindex: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXBINDINGDIVISORPROC = {
  parameters: [
    /* bindingindex: */ GLuint,
    /* divisor: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBLENDBARRIERPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLCOPYIMAGESUBDATAPROC = {
  parameters: [
    /* srcName: */ GLuint,
    /* srcTarget: */ GLenum,
    /* srcLevel: */ GLint,
    /* srcX: */ GLint,
    /* srcY: */ GLint,
    /* srcZ: */ GLint,
    /* dstName: */ GLuint,
    /* dstTarget: */ GLenum,
    /* dstLevel: */ GLint,
    /* dstX: */ GLint,
    /* dstY: */ GLint,
    /* dstZ: */ GLint,
    /* srcWidth: */ GLsizei,
    /* srcHeight: */ GLsizei,
    /* srcDepth: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLDEBUGMESSAGECONTROLPROC = {
  parameters: [
    /* source: */ GLenum,
    /* type: */ GLenum,
    /* severity: */ GLenum,
    /* count: */ GLsizei,
    /* ids: */ "pointer",
    /* enabled: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLDEBUGMESSAGEINSERTPROC = {
  parameters: [
    /* source: */ GLenum,
    /* type: */ GLenum,
    /* id: */ GLuint,
    /* severity: */ GLenum,
    /* length: */ GLsizei,
    /* buf: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDEBUGMESSAGECALLBACKPROC = {
  parameters: [
    /* callback: */ "pointer",
    /* userParam: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETDEBUGMESSAGELOGPROC = {
  parameters: [
    /* count: */ GLuint,
    /* bufSize: */ GLsizei,
    /* sources: */ "pointer",
    /* types: */ "pointer",
    /* ids: */ "pointer",
    /* severities: */ "pointer",
    /* lengths: */ "pointer",
    /* messageLog: */ "pointer",
  ],
  result: GLuint,
} as const;

export const PFNGLPUSHDEBUGGROUPPROC = {
  parameters: [
    /* source: */ GLenum,
    /* id: */ GLuint,
    /* length: */ GLsizei,
    /* message: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLPOPDEBUGGROUPPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLOBJECTLABELPROC = {
  parameters: [
    /* identifier: */ GLenum,
    /* name: */ GLuint,
    /* length: */ GLsizei,
    /* label: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETOBJECTLABELPROC = {
  parameters: [
    /* identifier: */ GLenum,
    /* name: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* label: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLOBJECTPTRLABELPROC = {
  parameters: [
    /* ptr: */ "pointer",
    /* length: */ GLsizei,
    /* label: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETOBJECTPTRLABELPROC = {
  parameters: [
    /* ptr: */ "pointer",
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* label: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPOINTERVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLENABLEIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDISABLEIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONIPROC = {
  parameters: [
    /* buf: */ GLuint,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONSEPARATEIPROC = {
  parameters: [
    /* buf: */ GLuint,
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCIPROC = {
  parameters: [
    /* buf: */ GLuint,
    /* src: */ GLenum,
    /* dst: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCSEPARATEIPROC = {
  parameters: [
    /* buf: */ GLuint,
    /* srcRGB: */ GLenum,
    /* dstRGB: */ GLenum,
    /* srcAlpha: */ GLenum,
    /* dstAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLCOLORMASKIPROC = {
  parameters: [
    /* index: */ GLuint,
    /* r: */ GLboolean,
    /* g: */ GLboolean,
    /* b: */ GLboolean,
    /* a: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLISENABLEDIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLDRAWELEMENTSBASEVERTEXPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* start: */ GLuint,
    /* end: */ GLuint,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
    /* instancecount: */ GLsizei,
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERTEXTUREPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPRIMITIVEBOUNDINGBOXPROC = {
  parameters: [
    /* minX: */ GLfloat,
    /* minY: */ GLfloat,
    /* minZ: */ GLfloat,
    /* minW: */ GLfloat,
    /* maxX: */ GLfloat,
    /* maxY: */ GLfloat,
    /* maxZ: */ GLfloat,
    /* maxW: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLGETGRAPHICSRESETSTATUSPROC = {
  parameters: [
  ],
  result: GLenum,
} as const;

export const PFNGLREADNPIXELSPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* bufSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETNUNIFORMFVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETNUNIFORMIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETNUNIFORMUIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLMINSAMPLESHADINGPROC = {
  parameters: [
    /* value: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLPATCHPARAMETERIPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* value: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIUIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETTEXPARAMETERIIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETTEXPARAMETERIUIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERIIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSAMPLERPARAMETERIUIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSAMPLERPARAMETERIIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSAMPLERPARAMETERIUIVPROC = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLTEXBUFFERRANGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

export const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* fixedsamplelocations: */ GLboolean,
  ],
  result: "void",
} as const;


// Functions

const def_glActiveTexture = {
  parameters: [
    /* texture: */ GLenum,
  ],
  result: "void",
} as const;

let glActiveTexture!: Deno.UnsafeFnPointer<typeof def_glActiveTexture>;

export function ActiveTexture(
  texture: number,
): void {
  return glActiveTexture.call(
    texture,
  );
}

const def_glAttachShader = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glAttachShader!: Deno.UnsafeFnPointer<typeof def_glAttachShader>;

export function AttachShader(
  program: number,
  shader: number,
): void {
  return glAttachShader.call(
    program,
    shader,
  );
}

const def_glBindAttribLocation = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glBindAttribLocation!: Deno.UnsafeFnPointer<typeof def_glBindAttribLocation>;

export function BindAttribLocation(
  program: number,
  index: number,
  name: TypedArray,
): void {
  return glBindAttribLocation.call(
    program,
    index,
    name,
  );
}

const def_glBindBuffer = {
  parameters: [
    /* target: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindBuffer!: Deno.UnsafeFnPointer<typeof def_glBindBuffer>;

export function BindBuffer(
  target: number,
  buffer: number,
): void {
  return glBindBuffer.call(
    target,
    buffer,
  );
}

const def_glBindFramebuffer = {
  parameters: [
    /* target: */ GLenum,
    /* framebuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindFramebuffer!: Deno.UnsafeFnPointer<typeof def_glBindFramebuffer>;

export function BindFramebuffer(
  target: number,
  framebuffer: number,
): void {
  return glBindFramebuffer.call(
    target,
    framebuffer,
  );
}

const def_glBindRenderbuffer = {
  parameters: [
    /* target: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glBindRenderbuffer>;

export function BindRenderbuffer(
  target: number,
  renderbuffer: number,
): void {
  return glBindRenderbuffer.call(
    target,
    renderbuffer,
  );
}

const def_glBindTexture = {
  parameters: [
    /* target: */ GLenum,
    /* texture: */ GLuint,
  ],
  result: "void",
} as const;

let glBindTexture!: Deno.UnsafeFnPointer<typeof def_glBindTexture>;

export function BindTexture(
  target: number,
  texture: number,
): void {
  return glBindTexture.call(
    target,
    texture,
  );
}

const def_glBlendColor = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

let glBlendColor!: Deno.UnsafeFnPointer<typeof def_glBlendColor>;

export function BlendColor(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glBlendColor.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glBlendEquation = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquation!: Deno.UnsafeFnPointer<typeof def_glBlendEquation>;

export function BlendEquation(
  mode: number,
): void {
  return glBlendEquation.call(
    mode,
  );
}

const def_glBlendEquationSeparate = {
  parameters: [
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquationSeparate!: Deno.UnsafeFnPointer<typeof def_glBlendEquationSeparate>;

export function BlendEquationSeparate(
  modeRGB: number,
  modeAlpha: number,
): void {
  return glBlendEquationSeparate.call(
    modeRGB,
    modeAlpha,
  );
}

const def_glBlendFunc = {
  parameters: [
    /* sfactor: */ GLenum,
    /* dfactor: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFunc!: Deno.UnsafeFnPointer<typeof def_glBlendFunc>;

export function BlendFunc(
  sfactor: number,
  dfactor: number,
): void {
  return glBlendFunc.call(
    sfactor,
    dfactor,
  );
}

const def_glBlendFuncSeparate = {
  parameters: [
    /* sfactorRGB: */ GLenum,
    /* dfactorRGB: */ GLenum,
    /* sfactorAlpha: */ GLenum,
    /* dfactorAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFuncSeparate!: Deno.UnsafeFnPointer<typeof def_glBlendFuncSeparate>;

export function BlendFuncSeparate(
  sfactorRGB: number,
  dfactorRGB: number,
  sfactorAlpha: number,
  dfactorAlpha: number,
): void {
  return glBlendFuncSeparate.call(
    sfactorRGB,
    dfactorRGB,
    sfactorAlpha,
    dfactorAlpha,
  );
}

const def_glBufferData = {
  parameters: [
    /* target: */ GLenum,
    /* size: */ GLsizeiptr,
    /* data: */ "buffer",
    /* usage: */ GLenum,
  ],
  result: "void",
} as const;

let glBufferData!: Deno.UnsafeFnPointer<typeof def_glBufferData>;

export function BufferData(
  target: number,
  size: number | bigint,
  data: TypedArray,
  usage: number,
): void {
  return glBufferData.call(
    target,
    size,
    data,
    usage,
  );
}

const def_glBufferSubData = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glBufferSubData!: Deno.UnsafeFnPointer<typeof def_glBufferSubData>;

export function BufferSubData(
  target: number,
  offset: Deno.PointerValue,
  size: number | bigint,
  data: TypedArray,
): void {
  return glBufferSubData.call(
    target,
    offset,
    size,
    data,
  );
}

const def_glCheckFramebufferStatus = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLenum,
} as const;

let glCheckFramebufferStatus!: Deno.UnsafeFnPointer<typeof def_glCheckFramebufferStatus>;

export function CheckFramebufferStatus(
  target: number,
): number {
  return glCheckFramebufferStatus.call(
    target,
  );
}

const def_glClear = {
  parameters: [
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

let glClear!: Deno.UnsafeFnPointer<typeof def_glClear>;

export function Clear(
  mask: number,
): void {
  return glClear.call(
    mask,
  );
}

const def_glClearColor = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

let glClearColor!: Deno.UnsafeFnPointer<typeof def_glClearColor>;

export function ClearColor(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glClearColor.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glClearDepthf = {
  parameters: [
    /* d: */ GLfloat,
  ],
  result: "void",
} as const;

let glClearDepthf!: Deno.UnsafeFnPointer<typeof def_glClearDepthf>;

export function ClearDepthf(
  d: number,
): void {
  return glClearDepthf.call(
    d,
  );
}

const def_glClearStencil = {
  parameters: [
    /* s: */ GLint,
  ],
  result: "void",
} as const;

let glClearStencil!: Deno.UnsafeFnPointer<typeof def_glClearStencil>;

export function ClearStencil(
  s: number,
): void {
  return glClearStencil.call(
    s,
  );
}

const def_glColorMask = {
  parameters: [
    /* red: */ GLboolean,
    /* green: */ GLboolean,
    /* blue: */ GLboolean,
    /* alpha: */ GLboolean,
  ],
  result: "void",
} as const;

let glColorMask!: Deno.UnsafeFnPointer<typeof def_glColorMask>;

export function ColorMask(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glColorMask.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glCompileShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glCompileShader!: Deno.UnsafeFnPointer<typeof def_glCompileShader>;

export function CompileShader(
  shader: number,
): void {
  return glCompileShader.call(
    shader,
  );
}

const def_glCompressedTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glCompressedTexImage2D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexImage2D>;

export function CompressedTexImage2D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  border: number,
  imageSize: number,
  data: TypedArray,
): void {
  return glCompressedTexImage2D.call(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    data,
  );
}

const def_glCompressedTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glCompressedTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexSubImage2D>;

export function CompressedTexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  width: number,
  height: number,
  format: number,
  imageSize: number,
  data: TypedArray,
): void {
  return glCompressedTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    data,
  );
}

const def_glCopyTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
  ],
  result: "void",
} as const;

let glCopyTexImage2D!: Deno.UnsafeFnPointer<typeof def_glCopyTexImage2D>;

export function CopyTexImage2D(
  target: number,
  level: number,
  internalformat: number,
  x: number,
  y: number,
  width: number,
  height: number,
  border: number,
): void {
  return glCopyTexImage2D.call(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

const def_glCopyTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glCopyTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glCopyTexSubImage2D>;

export function CopyTexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glCopyTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

const def_glCreateProgram = {
  parameters: [
  ],
  result: GLuint,
} as const;

let glCreateProgram!: Deno.UnsafeFnPointer<typeof def_glCreateProgram>;

export function CreateProgram(
): number {
  return glCreateProgram.call(
  );
}

const def_glCreateShader = {
  parameters: [
    /* type: */ GLenum,
  ],
  result: GLuint,
} as const;

let glCreateShader!: Deno.UnsafeFnPointer<typeof def_glCreateShader>;

export function CreateShader(
  type: number,
): number {
  return glCreateShader.call(
    type,
  );
}

const def_glCullFace = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glCullFace!: Deno.UnsafeFnPointer<typeof def_glCullFace>;

export function CullFace(
  mode: number,
): void {
  return glCullFace.call(
    mode,
  );
}

const def_glDeleteBuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteBuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteBuffers>;

export function DeleteBuffers(
  n: number,
  buffers: TypedArray,
): void {
  return glDeleteBuffers.call(
    n,
    buffers,
  );
}

const def_glDeleteFramebuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteFramebuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteFramebuffers>;

export function DeleteFramebuffers(
  n: number,
  framebuffers: TypedArray,
): void {
  return glDeleteFramebuffers.call(
    n,
    framebuffers,
  );
}

const def_glDeleteProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glDeleteProgram!: Deno.UnsafeFnPointer<typeof def_glDeleteProgram>;

export function DeleteProgram(
  program: number,
): void {
  return glDeleteProgram.call(
    program,
  );
}

const def_glDeleteRenderbuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteRenderbuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteRenderbuffers>;

export function DeleteRenderbuffers(
  n: number,
  renderbuffers: TypedArray,
): void {
  return glDeleteRenderbuffers.call(
    n,
    renderbuffers,
  );
}

const def_glDeleteShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glDeleteShader!: Deno.UnsafeFnPointer<typeof def_glDeleteShader>;

export function DeleteShader(
  shader: number,
): void {
  return glDeleteShader.call(
    shader,
  );
}

const def_glDeleteTextures = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteTextures!: Deno.UnsafeFnPointer<typeof def_glDeleteTextures>;

export function DeleteTextures(
  n: number,
  textures: TypedArray,
): void {
  return glDeleteTextures.call(
    n,
    textures,
  );
}

const def_glDepthFunc = {
  parameters: [
    /* func: */ GLenum,
  ],
  result: "void",
} as const;

let glDepthFunc!: Deno.UnsafeFnPointer<typeof def_glDepthFunc>;

export function DepthFunc(
  func: number,
): void {
  return glDepthFunc.call(
    func,
  );
}

const def_glDepthMask = {
  parameters: [
    /* flag: */ GLboolean,
  ],
  result: "void",
} as const;

let glDepthMask!: Deno.UnsafeFnPointer<typeof def_glDepthMask>;

export function DepthMask(
  flag: number,
): void {
  return glDepthMask.call(
    flag,
  );
}

const def_glDepthRangef = {
  parameters: [
    /* n: */ GLfloat,
    /* f: */ GLfloat,
  ],
  result: "void",
} as const;

let glDepthRangef!: Deno.UnsafeFnPointer<typeof def_glDepthRangef>;

export function DepthRangef(
  n: number,
  f: number,
): void {
  return glDepthRangef.call(
    n,
    f,
  );
}

const def_glDetachShader = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glDetachShader!: Deno.UnsafeFnPointer<typeof def_glDetachShader>;

export function DetachShader(
  program: number,
  shader: number,
): void {
  return glDetachShader.call(
    program,
    shader,
  );
}

const def_glDisable = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

let glDisable!: Deno.UnsafeFnPointer<typeof def_glDisable>;

export function Disable(
  cap: number,
): void {
  return glDisable.call(
    cap,
  );
}

const def_glDisableVertexAttribArray = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glDisableVertexAttribArray!: Deno.UnsafeFnPointer<typeof def_glDisableVertexAttribArray>;

export function DisableVertexAttribArray(
  index: number,
): void {
  return glDisableVertexAttribArray.call(
    index,
  );
}

const def_glDrawArrays = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
  ],
  result: "void",
} as const;

let glDrawArrays!: Deno.UnsafeFnPointer<typeof def_glDrawArrays>;

export function DrawArrays(
  mode: number,
  first: number,
  count: number,
): void {
  return glDrawArrays.call(
    mode,
    first,
    count,
  );
}

const def_glDrawElements = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
  ],
  result: "void",
} as const;

let glDrawElements!: Deno.UnsafeFnPointer<typeof def_glDrawElements>;

export function DrawElements(
  mode: number,
  count: number,
  type: number,
  indices: TypedArray,
): void {
  return glDrawElements.call(
    mode,
    count,
    type,
    indices,
  );
}

const def_glEnable = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

let glEnable!: Deno.UnsafeFnPointer<typeof def_glEnable>;

export function Enable(
  cap: number,
): void {
  return glEnable.call(
    cap,
  );
}

const def_glEnableVertexAttribArray = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glEnableVertexAttribArray!: Deno.UnsafeFnPointer<typeof def_glEnableVertexAttribArray>;

export function EnableVertexAttribArray(
  index: number,
): void {
  return glEnableVertexAttribArray.call(
    index,
  );
}

const def_glFinish = {
  parameters: [
  ],
  result: "void",
} as const;

let glFinish!: Deno.UnsafeFnPointer<typeof def_glFinish>;

export function Finish(
): void {
  return glFinish.call(
  );
}

const def_glFlush = {
  parameters: [
  ],
  result: "void",
} as const;

let glFlush!: Deno.UnsafeFnPointer<typeof def_glFlush>;

export function Flush(
): void {
  return glFlush.call(
  );
}

const def_glFramebufferRenderbuffer = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* renderbuffertarget: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glFramebufferRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glFramebufferRenderbuffer>;

export function FramebufferRenderbuffer(
  target: number,
  attachment: number,
  renderbuffertarget: number,
  renderbuffer: number,
): void {
  return glFramebufferRenderbuffer.call(
    target,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

const def_glFramebufferTexture2D = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* textarget: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

let glFramebufferTexture2D!: Deno.UnsafeFnPointer<typeof def_glFramebufferTexture2D>;

export function FramebufferTexture2D(
  target: number,
  attachment: number,
  textarget: number,
  texture: number,
  level: number,
): void {
  return glFramebufferTexture2D.call(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

const def_glFrontFace = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glFrontFace!: Deno.UnsafeFnPointer<typeof def_glFrontFace>;

export function FrontFace(
  mode: number,
): void {
  return glFrontFace.call(
    mode,
  );
}

const def_glGenBuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenBuffers!: Deno.UnsafeFnPointer<typeof def_glGenBuffers>;

export function GenBuffers(
  n: number,
  buffers: TypedArray,
): void {
  return glGenBuffers.call(
    n,
    buffers,
  );
}

const def_glGenerateMipmap = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

let glGenerateMipmap!: Deno.UnsafeFnPointer<typeof def_glGenerateMipmap>;

export function GenerateMipmap(
  target: number,
): void {
  return glGenerateMipmap.call(
    target,
  );
}

const def_glGenFramebuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenFramebuffers!: Deno.UnsafeFnPointer<typeof def_glGenFramebuffers>;

export function GenFramebuffers(
  n: number,
  framebuffers: TypedArray,
): void {
  return glGenFramebuffers.call(
    n,
    framebuffers,
  );
}

const def_glGenRenderbuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenRenderbuffers!: Deno.UnsafeFnPointer<typeof def_glGenRenderbuffers>;

export function GenRenderbuffers(
  n: number,
  renderbuffers: TypedArray,
): void {
  return glGenRenderbuffers.call(
    n,
    renderbuffers,
  );
}

const def_glGenTextures = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "buffer",
  ],
  result: "void",
} as const;

let glGenTextures!: Deno.UnsafeFnPointer<typeof def_glGenTextures>;

export function GenTextures(
  n: number,
  textures: TypedArray,
): void {
  return glGenTextures.call(
    n,
    textures,
  );
}

const def_glGetActiveAttrib = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* size: */ "buffer",
    /* type: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveAttrib!: Deno.UnsafeFnPointer<typeof def_glGetActiveAttrib>;

export function GetActiveAttrib(
  program: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  size: TypedArray,
  type: TypedArray,
  name: TypedArray,
): void {
  return glGetActiveAttrib.call(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

const def_glGetActiveUniform = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* size: */ "buffer",
    /* type: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveUniform!: Deno.UnsafeFnPointer<typeof def_glGetActiveUniform>;

export function GetActiveUniform(
  program: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  size: TypedArray,
  type: TypedArray,
  name: TypedArray,
): void {
  return glGetActiveUniform.call(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

const def_glGetAttachedShaders = {
  parameters: [
    /* program: */ GLuint,
    /* maxCount: */ GLsizei,
    /* count: */ "buffer",
    /* shaders: */ "buffer",
  ],
  result: "void",
} as const;

let glGetAttachedShaders!: Deno.UnsafeFnPointer<typeof def_glGetAttachedShaders>;

export function GetAttachedShaders(
  program: number,
  maxCount: number,
  count: TypedArray,
  shaders: TypedArray,
): void {
  return glGetAttachedShaders.call(
    program,
    maxCount,
    count,
    shaders,
  );
}

const def_glGetAttribLocation = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetAttribLocation!: Deno.UnsafeFnPointer<typeof def_glGetAttribLocation>;

export function GetAttribLocation(
  program: number,
  name: TypedArray,
): number {
  return glGetAttribLocation.call(
    program,
    name,
  );
}

const def_glGetBooleanv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBooleanv!: Deno.UnsafeFnPointer<typeof def_glGetBooleanv>;

export function GetBooleanv(
  pname: number,
  data: TypedArray,
): void {
  return glGetBooleanv.call(
    pname,
    data,
  );
}

const def_glGetBufferParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBufferParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetBufferParameteriv>;

export function GetBufferParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetBufferParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetError = {
  parameters: [
  ],
  result: GLenum,
} as const;

let glGetError!: Deno.UnsafeFnPointer<typeof def_glGetError>;

export function GetError(
): number {
  return glGetError.call(
  );
}

const def_glGetFloatv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetFloatv!: Deno.UnsafeFnPointer<typeof def_glGetFloatv>;

export function GetFloatv(
  pname: number,
  data: TypedArray,
): void {
  return glGetFloatv.call(
    pname,
    data,
  );
}

const def_glGetFramebufferAttachmentParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetFramebufferAttachmentParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetFramebufferAttachmentParameteriv>;

export function GetFramebufferAttachmentParameteriv(
  target: number,
  attachment: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetFramebufferAttachmentParameteriv.call(
    target,
    attachment,
    pname,
    params,
  );
}

const def_glGetIntegerv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetIntegerv!: Deno.UnsafeFnPointer<typeof def_glGetIntegerv>;

export function GetIntegerv(
  pname: number,
  data: TypedArray,
): void {
  return glGetIntegerv.call(
    pname,
    data,
  );
}

const def_glGetProgramiv = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramiv!: Deno.UnsafeFnPointer<typeof def_glGetProgramiv>;

export function GetProgramiv(
  program: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetProgramiv.call(
    program,
    pname,
    params,
  );
}

const def_glGetProgramInfoLog = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* infoLog: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramInfoLog!: Deno.UnsafeFnPointer<typeof def_glGetProgramInfoLog>;

export function GetProgramInfoLog(
  program: number,
  bufSize: number,
  length: TypedArray,
  infoLog: TypedArray,
): void {
  return glGetProgramInfoLog.call(
    program,
    bufSize,
    length,
    infoLog,
  );
}

const def_glGetRenderbufferParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetRenderbufferParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetRenderbufferParameteriv>;

export function GetRenderbufferParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetRenderbufferParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetShaderiv = {
  parameters: [
    /* shader: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderiv!: Deno.UnsafeFnPointer<typeof def_glGetShaderiv>;

export function GetShaderiv(
  shader: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetShaderiv.call(
    shader,
    pname,
    params,
  );
}

const def_glGetShaderInfoLog = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* infoLog: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderInfoLog!: Deno.UnsafeFnPointer<typeof def_glGetShaderInfoLog>;

export function GetShaderInfoLog(
  shader: number,
  bufSize: number,
  length: TypedArray,
  infoLog: TypedArray,
): void {
  return glGetShaderInfoLog.call(
    shader,
    bufSize,
    length,
    infoLog,
  );
}

const def_glGetShaderPrecisionFormat = {
  parameters: [
    /* shadertype: */ GLenum,
    /* precisiontype: */ GLenum,
    /* range: */ "buffer",
    /* precision: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderPrecisionFormat!: Deno.UnsafeFnPointer<typeof def_glGetShaderPrecisionFormat>;

export function GetShaderPrecisionFormat(
  shadertype: number,
  precisiontype: number,
  range: TypedArray,
  precision: TypedArray,
): void {
  return glGetShaderPrecisionFormat.call(
    shadertype,
    precisiontype,
    range,
    precision,
  );
}

const def_glGetShaderSource = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* source: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderSource!: Deno.UnsafeFnPointer<typeof def_glGetShaderSource>;

export function GetShaderSource(
  shader: number,
  bufSize: number,
  length: TypedArray,
  source: TypedArray,
): void {
  return glGetShaderSource.call(
    shader,
    bufSize,
    length,
    source,
  );
}

const def_glGetString = {
  parameters: [
    /* name: */ GLenum,
  ],
  result: "pointer",
} as const;

let glGetString!: Deno.UnsafeFnPointer<typeof def_glGetString>;

export function GetString(
  name: number,
): Deno.PointerValue {
  return glGetString.call(
    name,
  );
}

const def_glGetTexParameterfv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameterfv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameterfv>;

export function GetTexParameterfv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameterfv.call(
    target,
    pname,
    params,
  );
}

const def_glGetTexParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameteriv>;

export function GetTexParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetUniformfv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformfv!: Deno.UnsafeFnPointer<typeof def_glGetUniformfv>;

export function GetUniformfv(
  program: number,
  location: number,
  params: TypedArray,
): void {
  return glGetUniformfv.call(
    program,
    location,
    params,
  );
}

const def_glGetUniformiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformiv!: Deno.UnsafeFnPointer<typeof def_glGetUniformiv>;

export function GetUniformiv(
  program: number,
  location: number,
  params: TypedArray,
): void {
  return glGetUniformiv.call(
    program,
    location,
    params,
  );
}

const def_glGetUniformLocation = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetUniformLocation!: Deno.UnsafeFnPointer<typeof def_glGetUniformLocation>;

export function GetUniformLocation(
  program: number,
  name: TypedArray,
): number {
  return glGetUniformLocation.call(
    program,
    name,
  );
}

const def_glGetVertexAttribfv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribfv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribfv>;

export function GetVertexAttribfv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribfv.call(
    index,
    pname,
    params,
  );
}

const def_glGetVertexAttribiv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribiv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribiv>;

export function GetVertexAttribiv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribiv.call(
    index,
    pname,
    params,
  );
}

const def_glGetVertexAttribPointerv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* pointer: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribPointerv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribPointerv>;

export function GetVertexAttribPointerv(
  index: number,
  pname: number,
  pointer: TypedArray,
): void {
  return glGetVertexAttribPointerv.call(
    index,
    pname,
    pointer,
  );
}

const def_glHint = {
  parameters: [
    /* target: */ GLenum,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glHint!: Deno.UnsafeFnPointer<typeof def_glHint>;

export function Hint(
  target: number,
  mode: number,
): void {
  return glHint.call(
    target,
    mode,
  );
}

const def_glIsBuffer = {
  parameters: [
    /* buffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsBuffer!: Deno.UnsafeFnPointer<typeof def_glIsBuffer>;

export function IsBuffer(
  buffer: number,
): number {
  return glIsBuffer.call(
    buffer,
  );
}

const def_glIsEnabled = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: GLboolean,
} as const;

let glIsEnabled!: Deno.UnsafeFnPointer<typeof def_glIsEnabled>;

export function IsEnabled(
  cap: number,
): number {
  return glIsEnabled.call(
    cap,
  );
}

const def_glIsFramebuffer = {
  parameters: [
    /* framebuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsFramebuffer!: Deno.UnsafeFnPointer<typeof def_glIsFramebuffer>;

export function IsFramebuffer(
  framebuffer: number,
): number {
  return glIsFramebuffer.call(
    framebuffer,
  );
}

const def_glIsProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsProgram!: Deno.UnsafeFnPointer<typeof def_glIsProgram>;

export function IsProgram(
  program: number,
): number {
  return glIsProgram.call(
    program,
  );
}

const def_glIsRenderbuffer = {
  parameters: [
    /* renderbuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glIsRenderbuffer>;

export function IsRenderbuffer(
  renderbuffer: number,
): number {
  return glIsRenderbuffer.call(
    renderbuffer,
  );
}

const def_glIsShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsShader!: Deno.UnsafeFnPointer<typeof def_glIsShader>;

export function IsShader(
  shader: number,
): number {
  return glIsShader.call(
    shader,
  );
}

const def_glIsTexture = {
  parameters: [
    /* texture: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsTexture!: Deno.UnsafeFnPointer<typeof def_glIsTexture>;

export function IsTexture(
  texture: number,
): number {
  return glIsTexture.call(
    texture,
  );
}

const def_glLineWidth = {
  parameters: [
    /* width: */ GLfloat,
  ],
  result: "void",
} as const;

let glLineWidth!: Deno.UnsafeFnPointer<typeof def_glLineWidth>;

export function LineWidth(
  width: number,
): void {
  return glLineWidth.call(
    width,
  );
}

const def_glLinkProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glLinkProgram!: Deno.UnsafeFnPointer<typeof def_glLinkProgram>;

export function LinkProgram(
  program: number,
): void {
  return glLinkProgram.call(
    program,
  );
}

const def_glPixelStorei = {
  parameters: [
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glPixelStorei!: Deno.UnsafeFnPointer<typeof def_glPixelStorei>;

export function PixelStorei(
  pname: number,
  param: number,
): void {
  return glPixelStorei.call(
    pname,
    param,
  );
}

const def_glPolygonOffset = {
  parameters: [
    /* factor: */ GLfloat,
    /* units: */ GLfloat,
  ],
  result: "void",
} as const;

let glPolygonOffset!: Deno.UnsafeFnPointer<typeof def_glPolygonOffset>;

export function PolygonOffset(
  factor: number,
  units: number,
): void {
  return glPolygonOffset.call(
    factor,
    units,
  );
}

const def_glReadPixels = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "buffer",
  ],
  result: "void",
} as const;

let glReadPixels!: Deno.UnsafeFnPointer<typeof def_glReadPixels>;

export function ReadPixels(
  x: number,
  y: number,
  width: number,
  height: number,
  format: number,
  type: number,
  pixels: TypedArray,
): void {
  return glReadPixels.call(
    x,
    y,
    width,
    height,
    format,
    type,
    pixels,
  );
}

const def_glReleaseShaderCompiler = {
  parameters: [
  ],
  result: "void",
} as const;

let glReleaseShaderCompiler!: Deno.UnsafeFnPointer<typeof def_glReleaseShaderCompiler>;

export function ReleaseShaderCompiler(
): void {
  return glReleaseShaderCompiler.call(
  );
}

const def_glRenderbufferStorage = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glRenderbufferStorage!: Deno.UnsafeFnPointer<typeof def_glRenderbufferStorage>;

export function RenderbufferStorage(
  target: number,
  internalformat: number,
  width: number,
  height: number,
): void {
  return glRenderbufferStorage.call(
    target,
    internalformat,
    width,
    height,
  );
}

const def_glSampleCoverage = {
  parameters: [
    /* value: */ GLfloat,
    /* invert: */ GLboolean,
  ],
  result: "void",
} as const;

let glSampleCoverage!: Deno.UnsafeFnPointer<typeof def_glSampleCoverage>;

export function SampleCoverage(
  value: number,
  invert: number,
): void {
  return glSampleCoverage.call(
    value,
    invert,
  );
}

const def_glScissor = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glScissor!: Deno.UnsafeFnPointer<typeof def_glScissor>;

export function Scissor(
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glScissor.call(
    x,
    y,
    width,
    height,
  );
}

const def_glShaderBinary = {
  parameters: [
    /* count: */ GLsizei,
    /* shaders: */ "buffer",
    /* binaryformat: */ GLenum,
    /* binary: */ "buffer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

let glShaderBinary!: Deno.UnsafeFnPointer<typeof def_glShaderBinary>;

export function ShaderBinary(
  count: number,
  shaders: TypedArray,
  binaryformat: number,
  binary: TypedArray,
  length: number,
): void {
  return glShaderBinary.call(
    count,
    shaders,
    binaryformat,
    binary,
    length,
  );
}

const def_glShaderSource = {
  parameters: [
    /* shader: */ GLuint,
    /* count: */ GLsizei,
    /* const_string: */ "buffer",
    /* length: */ "buffer",
  ],
  result: "void",
} as const;

let glShaderSource!: Deno.UnsafeFnPointer<typeof def_glShaderSource>;

export function ShaderSource(
  shader: number,
  count: number,
  const_string: TypedArray,
  length: TypedArray,
): void {
  return glShaderSource.call(
    shader,
    count,
    const_string,
    length,
  );
}

const def_glStencilFunc = {
  parameters: [
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilFunc!: Deno.UnsafeFnPointer<typeof def_glStencilFunc>;

export function StencilFunc(
  func: number,
  ref: number,
  mask: number,
): void {
  return glStencilFunc.call(
    func,
    ref,
    mask,
  );
}

const def_glStencilFuncSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilFuncSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilFuncSeparate>;

export function StencilFuncSeparate(
  face: number,
  func: number,
  ref: number,
  mask: number,
): void {
  return glStencilFuncSeparate.call(
    face,
    func,
    ref,
    mask,
  );
}

const def_glStencilMask = {
  parameters: [
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilMask!: Deno.UnsafeFnPointer<typeof def_glStencilMask>;

export function StencilMask(
  mask: number,
): void {
  return glStencilMask.call(
    mask,
  );
}

const def_glStencilMaskSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilMaskSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilMaskSeparate>;

export function StencilMaskSeparate(
  face: number,
  mask: number,
): void {
  return glStencilMaskSeparate.call(
    face,
    mask,
  );
}

const def_glStencilOp = {
  parameters: [
    /* fail: */ GLenum,
    /* zfail: */ GLenum,
    /* zpass: */ GLenum,
  ],
  result: "void",
} as const;

let glStencilOp!: Deno.UnsafeFnPointer<typeof def_glStencilOp>;

export function StencilOp(
  fail: number,
  zfail: number,
  zpass: number,
): void {
  return glStencilOp.call(
    fail,
    zfail,
    zpass,
  );
}

const def_glStencilOpSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* sfail: */ GLenum,
    /* dpfail: */ GLenum,
    /* dppass: */ GLenum,
  ],
  result: "void",
} as const;

let glStencilOpSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilOpSeparate>;

export function StencilOpSeparate(
  face: number,
  sfail: number,
  dpfail: number,
  dppass: number,
): void {
  return glStencilOpSeparate.call(
    face,
    sfail,
    dpfail,
    dppass,
  );
}

const def_glTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "buffer",
  ],
  result: "void",
} as const;

let glTexImage2D!: Deno.UnsafeFnPointer<typeof def_glTexImage2D>;

export function TexImage2D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  border: number,
  format: number,
  type: number,
  pixels: TypedArray,
): void {
  return glTexImage2D.call(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    pixels,
  );
}

const def_glTexParameterf = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

let glTexParameterf!: Deno.UnsafeFnPointer<typeof def_glTexParameterf>;

export function TexParameterf(
  target: number,
  pname: number,
  param: number,
): void {
  return glTexParameterf.call(
    target,
    pname,
    param,
  );
}

const def_glTexParameterfv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameterfv!: Deno.UnsafeFnPointer<typeof def_glTexParameterfv>;

export function TexParameterfv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameterfv.call(
    target,
    pname,
    params,
  );
}

const def_glTexParameteri = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glTexParameteri!: Deno.UnsafeFnPointer<typeof def_glTexParameteri>;

export function TexParameteri(
  target: number,
  pname: number,
  param: number,
): void {
  return glTexParameteri.call(
    target,
    pname,
    param,
  );
}

const def_glTexParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameteriv!: Deno.UnsafeFnPointer<typeof def_glTexParameteriv>;

export function TexParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "buffer",
  ],
  result: "void",
} as const;

let glTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glTexSubImage2D>;

export function TexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  width: number,
  height: number,
  format: number,
  type: number,
  pixels: TypedArray,
): void {
  return glTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

const def_glUniform1f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform1f!: Deno.UnsafeFnPointer<typeof def_glUniform1f>;

export function Uniform1f(
  location: number,
  v0: number,
): void {
  return glUniform1f.call(
    location,
    v0,
  );
}

const def_glUniform1fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform1fv!: Deno.UnsafeFnPointer<typeof def_glUniform1fv>;

export function Uniform1fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform1fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform1i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

let glUniform1i!: Deno.UnsafeFnPointer<typeof def_glUniform1i>;

export function Uniform1i(
  location: number,
  v0: number,
): void {
  return glUniform1i.call(
    location,
    v0,
  );
}

const def_glUniform1iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform1iv!: Deno.UnsafeFnPointer<typeof def_glUniform1iv>;

export function Uniform1iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform1iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform2f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform2f!: Deno.UnsafeFnPointer<typeof def_glUniform2f>;

export function Uniform2f(
  location: number,
  v0: number,
  v1: number,
): void {
  return glUniform2f.call(
    location,
    v0,
    v1,
  );
}

const def_glUniform2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform2fv!: Deno.UnsafeFnPointer<typeof def_glUniform2fv>;

export function Uniform2fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform2fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform2i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

let glUniform2i!: Deno.UnsafeFnPointer<typeof def_glUniform2i>;

export function Uniform2i(
  location: number,
  v0: number,
  v1: number,
): void {
  return glUniform2i.call(
    location,
    v0,
    v1,
  );
}

const def_glUniform2iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform2iv!: Deno.UnsafeFnPointer<typeof def_glUniform2iv>;

export function Uniform2iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform2iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform3f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform3f!: Deno.UnsafeFnPointer<typeof def_glUniform3f>;

export function Uniform3f(
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glUniform3f.call(
    location,
    v0,
    v1,
    v2,
  );
}

const def_glUniform3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform3fv!: Deno.UnsafeFnPointer<typeof def_glUniform3fv>;

export function Uniform3fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform3fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform3i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

let glUniform3i!: Deno.UnsafeFnPointer<typeof def_glUniform3i>;

export function Uniform3i(
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glUniform3i.call(
    location,
    v0,
    v1,
    v2,
  );
}

const def_glUniform3iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform3iv!: Deno.UnsafeFnPointer<typeof def_glUniform3iv>;

export function Uniform3iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform3iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform4f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform4f!: Deno.UnsafeFnPointer<typeof def_glUniform4f>;

export function Uniform4f(
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glUniform4f.call(
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glUniform4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform4fv!: Deno.UnsafeFnPointer<typeof def_glUniform4fv>;

export function Uniform4fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform4fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform4i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

let glUniform4i!: Deno.UnsafeFnPointer<typeof def_glUniform4i>;

export function Uniform4i(
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glUniform4i.call(
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glUniform4iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform4iv!: Deno.UnsafeFnPointer<typeof def_glUniform4iv>;

export function Uniform4iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform4iv.call(
    location,
    count,
    value,
  );
}

const def_glUniformMatrix2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix2fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix2fv>;

export function UniformMatrix2fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix2fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix3fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix3fv>;

export function UniformMatrix3fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix3fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix4fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix4fv>;

export function UniformMatrix4fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix4fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUseProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glUseProgram!: Deno.UnsafeFnPointer<typeof def_glUseProgram>;

export function UseProgram(
  program: number,
): void {
  return glUseProgram.call(
    program,
  );
}

const def_glValidateProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glValidateProgram!: Deno.UnsafeFnPointer<typeof def_glValidateProgram>;

export function ValidateProgram(
  program: number,
): void {
  return glValidateProgram.call(
    program,
  );
}

const def_glVertexAttrib1f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib1f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib1f>;

export function VertexAttrib1f(
  index: number,
  x: number,
): void {
  return glVertexAttrib1f.call(
    index,
    x,
  );
}

const def_glVertexAttrib1fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib1fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib1fv>;

export function VertexAttrib1fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib1fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib2f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib2f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib2f>;

export function VertexAttrib2f(
  index: number,
  x: number,
  y: number,
): void {
  return glVertexAttrib2f.call(
    index,
    x,
    y,
  );
}

const def_glVertexAttrib2fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib2fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib2fv>;

export function VertexAttrib2fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib2fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib3f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib3f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib3f>;

export function VertexAttrib3f(
  index: number,
  x: number,
  y: number,
  z: number,
): void {
  return glVertexAttrib3f.call(
    index,
    x,
    y,
    z,
  );
}

const def_glVertexAttrib3fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib3fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib3fv>;

export function VertexAttrib3fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib3fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib4f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
    /* w: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib4f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib4f>;

export function VertexAttrib4f(
  index: number,
  x: number,
  y: number,
  z: number,
  w: number,
): void {
  return glVertexAttrib4f.call(
    index,
    x,
    y,
    z,
    w,
  );
}

const def_glVertexAttrib4fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib4fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib4fv>;

export function VertexAttrib4fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib4fv.call(
    index,
    v,
  );
}

const def_glVertexAttribPointer = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* stride: */ GLsizei,
    /* pointer: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttribPointer!: Deno.UnsafeFnPointer<typeof def_glVertexAttribPointer>;

export function VertexAttribPointer(
  index: number,
  size: number,
  type: number,
  normalized: number,
  stride: number,
  pointer: TypedArray,
): void {
  return glVertexAttribPointer.call(
    index,
    size,
    type,
    normalized,
    stride,
    pointer,
  );
}

const def_glViewport = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glViewport!: Deno.UnsafeFnPointer<typeof def_glViewport>;

export function Viewport(
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glViewport.call(
    x,
    y,
    width,
    height,
  );
}

const def_glReadBuffer = {
  parameters: [
    /* src: */ GLenum,
  ],
  result: "void",
} as const;

let glReadBuffer!: Deno.UnsafeFnPointer<typeof def_glReadBuffer>;

export function ReadBuffer(
  src: number,
): void {
  return glReadBuffer.call(
    src,
  );
}

const def_glDrawRangeElements = {
  parameters: [
    /* mode: */ GLenum,
    /* start: */ GLuint,
    /* end: */ GLuint,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
  ],
  result: "void",
} as const;

let glDrawRangeElements!: Deno.UnsafeFnPointer<typeof def_glDrawRangeElements>;

export function DrawRangeElements(
  mode: number,
  start: number,
  end: number,
  count: number,
  type: number,
  indices: TypedArray,
): void {
  return glDrawRangeElements.call(
    mode,
    start,
    end,
    count,
    type,
    indices,
  );
}

const def_glTexImage3D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "buffer",
  ],
  result: "void",
} as const;

let glTexImage3D!: Deno.UnsafeFnPointer<typeof def_glTexImage3D>;

export function TexImage3D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  depth: number,
  border: number,
  format: number,
  type: number,
  pixels: TypedArray,
): void {
  return glTexImage3D.call(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    format,
    type,
    pixels,
  );
}

const def_glTexSubImage3D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "buffer",
  ],
  result: "void",
} as const;

let glTexSubImage3D!: Deno.UnsafeFnPointer<typeof def_glTexSubImage3D>;

export function TexSubImage3D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  zoffset: number,
  width: number,
  height: number,
  depth: number,
  format: number,
  type: number,
  pixels: TypedArray,
): void {
  return glTexSubImage3D.call(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    type,
    pixels,
  );
}

const def_glCopyTexSubImage3D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glCopyTexSubImage3D!: Deno.UnsafeFnPointer<typeof def_glCopyTexSubImage3D>;

export function CopyTexSubImage3D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  zoffset: number,
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glCopyTexSubImage3D.call(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    x,
    y,
    width,
    height,
  );
}

const def_glCompressedTexImage3D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glCompressedTexImage3D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexImage3D>;

export function CompressedTexImage3D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  depth: number,
  border: number,
  imageSize: number,
  data: TypedArray,
): void {
  return glCompressedTexImage3D.call(
    target,
    level,
    internalformat,
    width,
    height,
    depth,
    border,
    imageSize,
    data,
  );
}

const def_glCompressedTexSubImage3D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* zoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glCompressedTexSubImage3D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexSubImage3D>;

export function CompressedTexSubImage3D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  zoffset: number,
  width: number,
  height: number,
  depth: number,
  format: number,
  imageSize: number,
  data: TypedArray,
): void {
  return glCompressedTexSubImage3D.call(
    target,
    level,
    xoffset,
    yoffset,
    zoffset,
    width,
    height,
    depth,
    format,
    imageSize,
    data,
  );
}

const def_glGenQueries = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "buffer",
  ],
  result: "void",
} as const;

let glGenQueries!: Deno.UnsafeFnPointer<typeof def_glGenQueries>;

export function GenQueries(
  n: number,
  ids: TypedArray,
): void {
  return glGenQueries.call(
    n,
    ids,
  );
}

const def_glDeleteQueries = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteQueries!: Deno.UnsafeFnPointer<typeof def_glDeleteQueries>;

export function DeleteQueries(
  n: number,
  ids: TypedArray,
): void {
  return glDeleteQueries.call(
    n,
    ids,
  );
}

const def_glIsQuery = {
  parameters: [
    /* id: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsQuery!: Deno.UnsafeFnPointer<typeof def_glIsQuery>;

export function IsQuery(
  id: number,
): number {
  return glIsQuery.call(
    id,
  );
}

const def_glBeginQuery = {
  parameters: [
    /* target: */ GLenum,
    /* id: */ GLuint,
  ],
  result: "void",
} as const;

let glBeginQuery!: Deno.UnsafeFnPointer<typeof def_glBeginQuery>;

export function BeginQuery(
  target: number,
  id: number,
): void {
  return glBeginQuery.call(
    target,
    id,
  );
}

const def_glEndQuery = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

let glEndQuery!: Deno.UnsafeFnPointer<typeof def_glEndQuery>;

export function EndQuery(
  target: number,
): void {
  return glEndQuery.call(
    target,
  );
}

const def_glGetQueryiv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetQueryiv!: Deno.UnsafeFnPointer<typeof def_glGetQueryiv>;

export function GetQueryiv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetQueryiv.call(
    target,
    pname,
    params,
  );
}

const def_glGetQueryObjectuiv = {
  parameters: [
    /* id: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetQueryObjectuiv!: Deno.UnsafeFnPointer<typeof def_glGetQueryObjectuiv>;

export function GetQueryObjectuiv(
  id: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetQueryObjectuiv.call(
    id,
    pname,
    params,
  );
}

const def_glUnmapBuffer = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLboolean,
} as const;

let glUnmapBuffer!: Deno.UnsafeFnPointer<typeof def_glUnmapBuffer>;

export function UnmapBuffer(
  target: number,
): number {
  return glUnmapBuffer.call(
    target,
  );
}

const def_glGetBufferPointerv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBufferPointerv!: Deno.UnsafeFnPointer<typeof def_glGetBufferPointerv>;

export function GetBufferPointerv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetBufferPointerv.call(
    target,
    pname,
    params,
  );
}

const def_glDrawBuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* bufs: */ "buffer",
  ],
  result: "void",
} as const;

let glDrawBuffers!: Deno.UnsafeFnPointer<typeof def_glDrawBuffers>;

export function DrawBuffers(
  n: number,
  bufs: TypedArray,
): void {
  return glDrawBuffers.call(
    n,
    bufs,
  );
}

const def_glUniformMatrix2x3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix2x3fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix2x3fv>;

export function UniformMatrix2x3fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix2x3fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix3x2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix3x2fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix3x2fv>;

export function UniformMatrix3x2fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix3x2fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix2x4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix2x4fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix2x4fv>;

export function UniformMatrix2x4fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix2x4fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix4x2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix4x2fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix4x2fv>;

export function UniformMatrix4x2fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix4x2fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix3x4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix3x4fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix3x4fv>;

export function UniformMatrix3x4fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix3x4fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix4x3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix4x3fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix4x3fv>;

export function UniformMatrix4x3fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix4x3fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glBlitFramebuffer = {
  parameters: [
    /* srcX0: */ GLint,
    /* srcY0: */ GLint,
    /* srcX1: */ GLint,
    /* srcY1: */ GLint,
    /* dstX0: */ GLint,
    /* dstY0: */ GLint,
    /* dstX1: */ GLint,
    /* dstY1: */ GLint,
    /* mask: */ GLbitfield,
    /* filter: */ GLenum,
  ],
  result: "void",
} as const;

let glBlitFramebuffer!: Deno.UnsafeFnPointer<typeof def_glBlitFramebuffer>;

export function BlitFramebuffer(
  srcX0: number,
  srcY0: number,
  srcX1: number,
  srcY1: number,
  dstX0: number,
  dstY0: number,
  dstX1: number,
  dstY1: number,
  mask: number,
  filter: number,
): void {
  return glBlitFramebuffer.call(
    srcX0,
    srcY0,
    srcX1,
    srcY1,
    dstX0,
    dstY0,
    dstX1,
    dstY1,
    mask,
    filter,
  );
}

const def_glRenderbufferStorageMultisample = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glRenderbufferStorageMultisample!: Deno.UnsafeFnPointer<typeof def_glRenderbufferStorageMultisample>;

export function RenderbufferStorageMultisample(
  target: number,
  samples: number,
  internalformat: number,
  width: number,
  height: number,
): void {
  return glRenderbufferStorageMultisample.call(
    target,
    samples,
    internalformat,
    width,
    height,
  );
}

const def_glFramebufferTextureLayer = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
    /* layer: */ GLint,
  ],
  result: "void",
} as const;

let glFramebufferTextureLayer!: Deno.UnsafeFnPointer<typeof def_glFramebufferTextureLayer>;

export function FramebufferTextureLayer(
  target: number,
  attachment: number,
  texture: number,
  level: number,
  layer: number,
): void {
  return glFramebufferTextureLayer.call(
    target,
    attachment,
    texture,
    level,
    layer,
  );
}

const def_glMapBufferRange = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* length: */ GLsizeiptr,
    /* access: */ GLbitfield,
  ],
  result: "pointer",
} as const;

let glMapBufferRange!: Deno.UnsafeFnPointer<typeof def_glMapBufferRange>;

export function MapBufferRange(
  target: number,
  offset: Deno.PointerValue,
  length: number | bigint,
  access: number,
): Deno.PointerValue {
  return glMapBufferRange.call(
    target,
    offset,
    length,
    access,
  );
}

const def_glFlushMappedBufferRange = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* length: */ GLsizeiptr,
  ],
  result: "void",
} as const;

let glFlushMappedBufferRange!: Deno.UnsafeFnPointer<typeof def_glFlushMappedBufferRange>;

export function FlushMappedBufferRange(
  target: number,
  offset: Deno.PointerValue,
  length: number | bigint,
): void {
  return glFlushMappedBufferRange.call(
    target,
    offset,
    length,
  );
}

const def_glBindVertexArray = {
  parameters: [
    /* array: */ GLuint,
  ],
  result: "void",
} as const;

let glBindVertexArray!: Deno.UnsafeFnPointer<typeof def_glBindVertexArray>;

export function BindVertexArray(
  array: number,
): void {
  return glBindVertexArray.call(
    array,
  );
}

const def_glDeleteVertexArrays = {
  parameters: [
    /* n: */ GLsizei,
    /* arrays: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteVertexArrays!: Deno.UnsafeFnPointer<typeof def_glDeleteVertexArrays>;

export function DeleteVertexArrays(
  n: number,
  arrays: TypedArray,
): void {
  return glDeleteVertexArrays.call(
    n,
    arrays,
  );
}

const def_glGenVertexArrays = {
  parameters: [
    /* n: */ GLsizei,
    /* arrays: */ "buffer",
  ],
  result: "void",
} as const;

let glGenVertexArrays!: Deno.UnsafeFnPointer<typeof def_glGenVertexArrays>;

export function GenVertexArrays(
  n: number,
  arrays: TypedArray,
): void {
  return glGenVertexArrays.call(
    n,
    arrays,
  );
}

const def_glIsVertexArray = {
  parameters: [
    /* array: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsVertexArray!: Deno.UnsafeFnPointer<typeof def_glIsVertexArray>;

export function IsVertexArray(
  array: number,
): number {
  return glIsVertexArray.call(
    array,
  );
}

const def_glGetIntegeri_v = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetIntegeri_v!: Deno.UnsafeFnPointer<typeof def_glGetIntegeri_v>;

export function GetIntegeri_v(
  target: number,
  index: number,
  data: TypedArray,
): void {
  return glGetIntegeri_v.call(
    target,
    index,
    data,
  );
}

const def_glBeginTransformFeedback = {
  parameters: [
    /* primitiveMode: */ GLenum,
  ],
  result: "void",
} as const;

let glBeginTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glBeginTransformFeedback>;

export function BeginTransformFeedback(
  primitiveMode: number,
): void {
  return glBeginTransformFeedback.call(
    primitiveMode,
  );
}

const def_glEndTransformFeedback = {
  parameters: [
  ],
  result: "void",
} as const;

let glEndTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glEndTransformFeedback>;

export function EndTransformFeedback(
): void {
  return glEndTransformFeedback.call(
  );
}

const def_glBindBufferRange = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

let glBindBufferRange!: Deno.UnsafeFnPointer<typeof def_glBindBufferRange>;

export function BindBufferRange(
  target: number,
  index: number,
  buffer: number,
  offset: Deno.PointerValue,
  size: number | bigint,
): void {
  return glBindBufferRange.call(
    target,
    index,
    buffer,
    offset,
    size,
  );
}

const def_glBindBufferBase = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindBufferBase!: Deno.UnsafeFnPointer<typeof def_glBindBufferBase>;

export function BindBufferBase(
  target: number,
  index: number,
  buffer: number,
): void {
  return glBindBufferBase.call(
    target,
    index,
    buffer,
  );
}

const def_glTransformFeedbackVaryings = {
  parameters: [
    /* program: */ GLuint,
    /* count: */ GLsizei,
    /* const_varyings: */ "buffer",
    /* bufferMode: */ GLenum,
  ],
  result: "void",
} as const;

let glTransformFeedbackVaryings!: Deno.UnsafeFnPointer<typeof def_glTransformFeedbackVaryings>;

export function TransformFeedbackVaryings(
  program: number,
  count: number,
  const_varyings: TypedArray,
  bufferMode: number,
): void {
  return glTransformFeedbackVaryings.call(
    program,
    count,
    const_varyings,
    bufferMode,
  );
}

const def_glGetTransformFeedbackVarying = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* size: */ "buffer",
    /* type: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTransformFeedbackVarying!: Deno.UnsafeFnPointer<typeof def_glGetTransformFeedbackVarying>;

export function GetTransformFeedbackVarying(
  program: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  size: TypedArray,
  type: TypedArray,
  name: TypedArray,
): void {
  return glGetTransformFeedbackVarying.call(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

const def_glVertexAttribIPointer = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* stride: */ GLsizei,
    /* pointer: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttribIPointer!: Deno.UnsafeFnPointer<typeof def_glVertexAttribIPointer>;

export function VertexAttribIPointer(
  index: number,
  size: number,
  type: number,
  stride: number,
  pointer: TypedArray,
): void {
  return glVertexAttribIPointer.call(
    index,
    size,
    type,
    stride,
    pointer,
  );
}

const def_glGetVertexAttribIiv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribIiv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribIiv>;

export function GetVertexAttribIiv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribIiv.call(
    index,
    pname,
    params,
  );
}

const def_glGetVertexAttribIuiv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribIuiv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribIuiv>;

export function GetVertexAttribIuiv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribIuiv.call(
    index,
    pname,
    params,
  );
}

const def_glVertexAttribI4i = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* z: */ GLint,
    /* w: */ GLint,
  ],
  result: "void",
} as const;

let glVertexAttribI4i!: Deno.UnsafeFnPointer<typeof def_glVertexAttribI4i>;

export function VertexAttribI4i(
  index: number,
  x: number,
  y: number,
  z: number,
  w: number,
): void {
  return glVertexAttribI4i.call(
    index,
    x,
    y,
    z,
    w,
  );
}

const def_glVertexAttribI4ui = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLuint,
    /* y: */ GLuint,
    /* z: */ GLuint,
    /* w: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexAttribI4ui!: Deno.UnsafeFnPointer<typeof def_glVertexAttribI4ui>;

export function VertexAttribI4ui(
  index: number,
  x: number,
  y: number,
  z: number,
  w: number,
): void {
  return glVertexAttribI4ui.call(
    index,
    x,
    y,
    z,
    w,
  );
}

const def_glVertexAttribI4iv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttribI4iv!: Deno.UnsafeFnPointer<typeof def_glVertexAttribI4iv>;

export function VertexAttribI4iv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttribI4iv.call(
    index,
    v,
  );
}

const def_glVertexAttribI4uiv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttribI4uiv!: Deno.UnsafeFnPointer<typeof def_glVertexAttribI4uiv>;

export function VertexAttribI4uiv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttribI4uiv.call(
    index,
    v,
  );
}

const def_glGetUniformuiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformuiv!: Deno.UnsafeFnPointer<typeof def_glGetUniformuiv>;

export function GetUniformuiv(
  program: number,
  location: number,
  params: TypedArray,
): void {
  return glGetUniformuiv.call(
    program,
    location,
    params,
  );
}

const def_glGetFragDataLocation = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetFragDataLocation!: Deno.UnsafeFnPointer<typeof def_glGetFragDataLocation>;

export function GetFragDataLocation(
  program: number,
  name: TypedArray,
): number {
  return glGetFragDataLocation.call(
    program,
    name,
  );
}

const def_glUniform1ui = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
  ],
  result: "void",
} as const;

let glUniform1ui!: Deno.UnsafeFnPointer<typeof def_glUniform1ui>;

export function Uniform1ui(
  location: number,
  v0: number,
): void {
  return glUniform1ui.call(
    location,
    v0,
  );
}

const def_glUniform2ui = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
  ],
  result: "void",
} as const;

let glUniform2ui!: Deno.UnsafeFnPointer<typeof def_glUniform2ui>;

export function Uniform2ui(
  location: number,
  v0: number,
  v1: number,
): void {
  return glUniform2ui.call(
    location,
    v0,
    v1,
  );
}

const def_glUniform3ui = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
  ],
  result: "void",
} as const;

let glUniform3ui!: Deno.UnsafeFnPointer<typeof def_glUniform3ui>;

export function Uniform3ui(
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glUniform3ui.call(
    location,
    v0,
    v1,
    v2,
  );
}

const def_glUniform4ui = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
    /* v3: */ GLuint,
  ],
  result: "void",
} as const;

let glUniform4ui!: Deno.UnsafeFnPointer<typeof def_glUniform4ui>;

export function Uniform4ui(
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glUniform4ui.call(
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glUniform1uiv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform1uiv!: Deno.UnsafeFnPointer<typeof def_glUniform1uiv>;

export function Uniform1uiv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform1uiv.call(
    location,
    count,
    value,
  );
}

const def_glUniform2uiv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform2uiv!: Deno.UnsafeFnPointer<typeof def_glUniform2uiv>;

export function Uniform2uiv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform2uiv.call(
    location,
    count,
    value,
  );
}

const def_glUniform3uiv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform3uiv!: Deno.UnsafeFnPointer<typeof def_glUniform3uiv>;

export function Uniform3uiv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform3uiv.call(
    location,
    count,
    value,
  );
}

const def_glUniform4uiv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform4uiv!: Deno.UnsafeFnPointer<typeof def_glUniform4uiv>;

export function Uniform4uiv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform4uiv.call(
    location,
    count,
    value,
  );
}

const def_glClearBufferiv = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glClearBufferiv!: Deno.UnsafeFnPointer<typeof def_glClearBufferiv>;

export function ClearBufferiv(
  buffer: number,
  drawbuffer: number,
  value: TypedArray,
): void {
  return glClearBufferiv.call(
    buffer,
    drawbuffer,
    value,
  );
}

const def_glClearBufferuiv = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glClearBufferuiv!: Deno.UnsafeFnPointer<typeof def_glClearBufferuiv>;

export function ClearBufferuiv(
  buffer: number,
  drawbuffer: number,
  value: TypedArray,
): void {
  return glClearBufferuiv.call(
    buffer,
    drawbuffer,
    value,
  );
}

const def_glClearBufferfv = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glClearBufferfv!: Deno.UnsafeFnPointer<typeof def_glClearBufferfv>;

export function ClearBufferfv(
  buffer: number,
  drawbuffer: number,
  value: TypedArray,
): void {
  return glClearBufferfv.call(
    buffer,
    drawbuffer,
    value,
  );
}

const def_glClearBufferfi = {
  parameters: [
    /* buffer: */ GLenum,
    /* drawbuffer: */ GLint,
    /* depth: */ GLfloat,
    /* stencil: */ GLint,
  ],
  result: "void",
} as const;

let glClearBufferfi!: Deno.UnsafeFnPointer<typeof def_glClearBufferfi>;

export function ClearBufferfi(
  buffer: number,
  drawbuffer: number,
  depth: number,
  stencil: number,
): void {
  return glClearBufferfi.call(
    buffer,
    drawbuffer,
    depth,
    stencil,
  );
}

const def_glGetStringi = {
  parameters: [
    /* name: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "pointer",
} as const;

let glGetStringi!: Deno.UnsafeFnPointer<typeof def_glGetStringi>;

export function GetStringi(
  name: number,
  index: number,
): Deno.PointerValue {
  return glGetStringi.call(
    name,
    index,
  );
}

const def_glCopyBufferSubData = {
  parameters: [
    /* readTarget: */ GLenum,
    /* writeTarget: */ GLenum,
    /* readOffset: */ GLintptr,
    /* writeOffset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

let glCopyBufferSubData!: Deno.UnsafeFnPointer<typeof def_glCopyBufferSubData>;

export function CopyBufferSubData(
  readTarget: number,
  writeTarget: number,
  readOffset: Deno.PointerValue,
  writeOffset: Deno.PointerValue,
  size: number | bigint,
): void {
  return glCopyBufferSubData.call(
    readTarget,
    writeTarget,
    readOffset,
    writeOffset,
    size,
  );
}

const def_glGetUniformIndices = {
  parameters: [
    /* program: */ GLuint,
    /* uniformCount: */ GLsizei,
    /* const_uniformNames: */ "buffer",
    /* uniformIndices: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformIndices!: Deno.UnsafeFnPointer<typeof def_glGetUniformIndices>;

export function GetUniformIndices(
  program: number,
  uniformCount: number,
  const_uniformNames: TypedArray,
  uniformIndices: TypedArray,
): void {
  return glGetUniformIndices.call(
    program,
    uniformCount,
    const_uniformNames,
    uniformIndices,
  );
}

const def_glGetActiveUniformsiv = {
  parameters: [
    /* program: */ GLuint,
    /* uniformCount: */ GLsizei,
    /* uniformIndices: */ "buffer",
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveUniformsiv!: Deno.UnsafeFnPointer<typeof def_glGetActiveUniformsiv>;

export function GetActiveUniformsiv(
  program: number,
  uniformCount: number,
  uniformIndices: TypedArray,
  pname: number,
  params: TypedArray,
): void {
  return glGetActiveUniformsiv.call(
    program,
    uniformCount,
    uniformIndices,
    pname,
    params,
  );
}

const def_glGetUniformBlockIndex = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockName: */ "buffer",
  ],
  result: GLuint,
} as const;

let glGetUniformBlockIndex!: Deno.UnsafeFnPointer<typeof def_glGetUniformBlockIndex>;

export function GetUniformBlockIndex(
  program: number,
  uniformBlockName: TypedArray,
): number {
  return glGetUniformBlockIndex.call(
    program,
    uniformBlockName,
  );
}

const def_glGetActiveUniformBlockiv = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveUniformBlockiv!: Deno.UnsafeFnPointer<typeof def_glGetActiveUniformBlockiv>;

export function GetActiveUniformBlockiv(
  program: number,
  uniformBlockIndex: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetActiveUniformBlockiv.call(
    program,
    uniformBlockIndex,
    pname,
    params,
  );
}

const def_glGetActiveUniformBlockName = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* uniformBlockName: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveUniformBlockName!: Deno.UnsafeFnPointer<typeof def_glGetActiveUniformBlockName>;

export function GetActiveUniformBlockName(
  program: number,
  uniformBlockIndex: number,
  bufSize: number,
  length: TypedArray,
  uniformBlockName: TypedArray,
): void {
  return glGetActiveUniformBlockName.call(
    program,
    uniformBlockIndex,
    bufSize,
    length,
    uniformBlockName,
  );
}

const def_glUniformBlockBinding = {
  parameters: [
    /* program: */ GLuint,
    /* uniformBlockIndex: */ GLuint,
    /* uniformBlockBinding: */ GLuint,
  ],
  result: "void",
} as const;

let glUniformBlockBinding!: Deno.UnsafeFnPointer<typeof def_glUniformBlockBinding>;

export function UniformBlockBinding(
  program: number,
  uniformBlockIndex: number,
  uniformBlockBinding: number,
): void {
  return glUniformBlockBinding.call(
    program,
    uniformBlockIndex,
    uniformBlockBinding,
  );
}

const def_glDrawArraysInstanced = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
    /* instancecount: */ GLsizei,
  ],
  result: "void",
} as const;

let glDrawArraysInstanced!: Deno.UnsafeFnPointer<typeof def_glDrawArraysInstanced>;

export function DrawArraysInstanced(
  mode: number,
  first: number,
  count: number,
  instancecount: number,
): void {
  return glDrawArraysInstanced.call(
    mode,
    first,
    count,
    instancecount,
  );
}

const def_glDrawElementsInstanced = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
    /* instancecount: */ GLsizei,
  ],
  result: "void",
} as const;

let glDrawElementsInstanced!: Deno.UnsafeFnPointer<typeof def_glDrawElementsInstanced>;

export function DrawElementsInstanced(
  mode: number,
  count: number,
  type: number,
  indices: TypedArray,
  instancecount: number,
): void {
  return glDrawElementsInstanced.call(
    mode,
    count,
    type,
    indices,
    instancecount,
  );
}

const def_glFenceSync = {
  parameters: [
    /* condition: */ GLenum,
    /* flags: */ GLbitfield,
  ],
  result: "pointer",
} as const;

let glFenceSync!: Deno.UnsafeFnPointer<typeof def_glFenceSync>;

export function FenceSync(
  condition: number,
  flags: number,
): Deno.PointerValue {
  return glFenceSync.call(
    condition,
    flags,
  );
}

const def_glIsSync = {
  parameters: [
    /* sync: */ "pointer",
  ],
  result: GLboolean,
} as const;

let glIsSync!: Deno.UnsafeFnPointer<typeof def_glIsSync>;

export function IsSync(
  sync: Deno.PointerValue,
): number {
  return glIsSync.call(
    sync,
  );
}

const def_glDeleteSync = {
  parameters: [
    /* sync: */ "pointer",
  ],
  result: "void",
} as const;

let glDeleteSync!: Deno.UnsafeFnPointer<typeof def_glDeleteSync>;

export function DeleteSync(
  sync: Deno.PointerValue,
): void {
  return glDeleteSync.call(
    sync,
  );
}

const def_glClientWaitSync = {
  parameters: [
    /* sync: */ "pointer",
    /* flags: */ GLbitfield,
    /* timeout: */ GLuint64,
  ],
  result: GLenum,
} as const;

let glClientWaitSync!: Deno.UnsafeFnPointer<typeof def_glClientWaitSync>;

export function ClientWaitSync(
  sync: Deno.PointerValue,
  flags: number,
  timeout: number | bigint,
): number {
  return glClientWaitSync.call(
    sync,
    flags,
    timeout,
  );
}

const def_glWaitSync = {
  parameters: [
    /* sync: */ "pointer",
    /* flags: */ GLbitfield,
    /* timeout: */ GLuint64,
  ],
  result: "void",
} as const;

let glWaitSync!: Deno.UnsafeFnPointer<typeof def_glWaitSync>;

export function WaitSync(
  sync: Deno.PointerValue,
  flags: number,
  timeout: number | bigint,
): void {
  return glWaitSync.call(
    sync,
    flags,
    timeout,
  );
}

const def_glGetInteger64v = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetInteger64v!: Deno.UnsafeFnPointer<typeof def_glGetInteger64v>;

export function GetInteger64v(
  pname: number,
  data: TypedArray,
): void {
  return glGetInteger64v.call(
    pname,
    data,
  );
}

const def_glGetSynciv = {
  parameters: [
    /* sync: */ "pointer",
    /* pname: */ GLenum,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* values: */ "buffer",
  ],
  result: "void",
} as const;

let glGetSynciv!: Deno.UnsafeFnPointer<typeof def_glGetSynciv>;

export function GetSynciv(
  sync: Deno.PointerValue,
  pname: number,
  bufSize: number,
  length: TypedArray,
  values: TypedArray,
): void {
  return glGetSynciv.call(
    sync,
    pname,
    bufSize,
    length,
    values,
  );
}

const def_glGetInteger64i_v = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetInteger64i_v!: Deno.UnsafeFnPointer<typeof def_glGetInteger64i_v>;

export function GetInteger64i_v(
  target: number,
  index: number,
  data: TypedArray,
): void {
  return glGetInteger64i_v.call(
    target,
    index,
    data,
  );
}

const def_glGetBufferParameteri64v = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBufferParameteri64v!: Deno.UnsafeFnPointer<typeof def_glGetBufferParameteri64v>;

export function GetBufferParameteri64v(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetBufferParameteri64v.call(
    target,
    pname,
    params,
  );
}

const def_glGenSamplers = {
  parameters: [
    /* count: */ GLsizei,
    /* samplers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenSamplers!: Deno.UnsafeFnPointer<typeof def_glGenSamplers>;

export function GenSamplers(
  count: number,
  samplers: TypedArray,
): void {
  return glGenSamplers.call(
    count,
    samplers,
  );
}

const def_glDeleteSamplers = {
  parameters: [
    /* count: */ GLsizei,
    /* samplers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteSamplers!: Deno.UnsafeFnPointer<typeof def_glDeleteSamplers>;

export function DeleteSamplers(
  count: number,
  samplers: TypedArray,
): void {
  return glDeleteSamplers.call(
    count,
    samplers,
  );
}

const def_glIsSampler = {
  parameters: [
    /* sampler: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsSampler!: Deno.UnsafeFnPointer<typeof def_glIsSampler>;

export function IsSampler(
  sampler: number,
): number {
  return glIsSampler.call(
    sampler,
  );
}

const def_glBindSampler = {
  parameters: [
    /* unit: */ GLuint,
    /* sampler: */ GLuint,
  ],
  result: "void",
} as const;

let glBindSampler!: Deno.UnsafeFnPointer<typeof def_glBindSampler>;

export function BindSampler(
  unit: number,
  sampler: number,
): void {
  return glBindSampler.call(
    unit,
    sampler,
  );
}

const def_glSamplerParameteri = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glSamplerParameteri!: Deno.UnsafeFnPointer<typeof def_glSamplerParameteri>;

export function SamplerParameteri(
  sampler: number,
  pname: number,
  param: number,
): void {
  return glSamplerParameteri.call(
    sampler,
    pname,
    param,
  );
}

const def_glSamplerParameteriv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "buffer",
  ],
  result: "void",
} as const;

let glSamplerParameteriv!: Deno.UnsafeFnPointer<typeof def_glSamplerParameteriv>;

export function SamplerParameteriv(
  sampler: number,
  pname: number,
  param: TypedArray,
): void {
  return glSamplerParameteriv.call(
    sampler,
    pname,
    param,
  );
}

const def_glSamplerParameterf = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

let glSamplerParameterf!: Deno.UnsafeFnPointer<typeof def_glSamplerParameterf>;

export function SamplerParameterf(
  sampler: number,
  pname: number,
  param: number,
): void {
  return glSamplerParameterf.call(
    sampler,
    pname,
    param,
  );
}

const def_glSamplerParameterfv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "buffer",
  ],
  result: "void",
} as const;

let glSamplerParameterfv!: Deno.UnsafeFnPointer<typeof def_glSamplerParameterfv>;

export function SamplerParameterfv(
  sampler: number,
  pname: number,
  param: TypedArray,
): void {
  return glSamplerParameterfv.call(
    sampler,
    pname,
    param,
  );
}

const def_glGetSamplerParameteriv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetSamplerParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetSamplerParameteriv>;

export function GetSamplerParameteriv(
  sampler: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetSamplerParameteriv.call(
    sampler,
    pname,
    params,
  );
}

const def_glGetSamplerParameterfv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetSamplerParameterfv!: Deno.UnsafeFnPointer<typeof def_glGetSamplerParameterfv>;

export function GetSamplerParameterfv(
  sampler: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetSamplerParameterfv.call(
    sampler,
    pname,
    params,
  );
}

const def_glVertexAttribDivisor = {
  parameters: [
    /* index: */ GLuint,
    /* divisor: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexAttribDivisor!: Deno.UnsafeFnPointer<typeof def_glVertexAttribDivisor>;

export function VertexAttribDivisor(
  index: number,
  divisor: number,
): void {
  return glVertexAttribDivisor.call(
    index,
    divisor,
  );
}

const def_glBindTransformFeedback = {
  parameters: [
    /* target: */ GLenum,
    /* id: */ GLuint,
  ],
  result: "void",
} as const;

let glBindTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glBindTransformFeedback>;

export function BindTransformFeedback(
  target: number,
  id: number,
): void {
  return glBindTransformFeedback.call(
    target,
    id,
  );
}

const def_glDeleteTransformFeedbacks = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteTransformFeedbacks!: Deno.UnsafeFnPointer<typeof def_glDeleteTransformFeedbacks>;

export function DeleteTransformFeedbacks(
  n: number,
  ids: TypedArray,
): void {
  return glDeleteTransformFeedbacks.call(
    n,
    ids,
  );
}

const def_glGenTransformFeedbacks = {
  parameters: [
    /* n: */ GLsizei,
    /* ids: */ "buffer",
  ],
  result: "void",
} as const;

let glGenTransformFeedbacks!: Deno.UnsafeFnPointer<typeof def_glGenTransformFeedbacks>;

export function GenTransformFeedbacks(
  n: number,
  ids: TypedArray,
): void {
  return glGenTransformFeedbacks.call(
    n,
    ids,
  );
}

const def_glIsTransformFeedback = {
  parameters: [
    /* id: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glIsTransformFeedback>;

export function IsTransformFeedback(
  id: number,
): number {
  return glIsTransformFeedback.call(
    id,
  );
}

const def_glPauseTransformFeedback = {
  parameters: [
  ],
  result: "void",
} as const;

let glPauseTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glPauseTransformFeedback>;

export function PauseTransformFeedback(
): void {
  return glPauseTransformFeedback.call(
  );
}

const def_glResumeTransformFeedback = {
  parameters: [
  ],
  result: "void",
} as const;

let glResumeTransformFeedback!: Deno.UnsafeFnPointer<typeof def_glResumeTransformFeedback>;

export function ResumeTransformFeedback(
): void {
  return glResumeTransformFeedback.call(
  );
}

const def_glGetProgramBinary = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* binaryFormat: */ "buffer",
    /* binary: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramBinary!: Deno.UnsafeFnPointer<typeof def_glGetProgramBinary>;

export function GetProgramBinary(
  program: number,
  bufSize: number,
  length: TypedArray,
  binaryFormat: TypedArray,
  binary: TypedArray,
): void {
  return glGetProgramBinary.call(
    program,
    bufSize,
    length,
    binaryFormat,
    binary,
  );
}

const def_glProgramBinary = {
  parameters: [
    /* program: */ GLuint,
    /* binaryFormat: */ GLenum,
    /* binary: */ "buffer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

let glProgramBinary!: Deno.UnsafeFnPointer<typeof def_glProgramBinary>;

export function ProgramBinary(
  program: number,
  binaryFormat: number,
  binary: TypedArray,
  length: number,
): void {
  return glProgramBinary.call(
    program,
    binaryFormat,
    binary,
    length,
  );
}

const def_glProgramParameteri = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* value: */ GLint,
  ],
  result: "void",
} as const;

let glProgramParameteri!: Deno.UnsafeFnPointer<typeof def_glProgramParameteri>;

export function ProgramParameteri(
  program: number,
  pname: number,
  value: number,
): void {
  return glProgramParameteri.call(
    program,
    pname,
    value,
  );
}

const def_glInvalidateFramebuffer = {
  parameters: [
    /* target: */ GLenum,
    /* numAttachments: */ GLsizei,
    /* attachments: */ "buffer",
  ],
  result: "void",
} as const;

let glInvalidateFramebuffer!: Deno.UnsafeFnPointer<typeof def_glInvalidateFramebuffer>;

export function InvalidateFramebuffer(
  target: number,
  numAttachments: number,
  attachments: TypedArray,
): void {
  return glInvalidateFramebuffer.call(
    target,
    numAttachments,
    attachments,
  );
}

const def_glInvalidateSubFramebuffer = {
  parameters: [
    /* target: */ GLenum,
    /* numAttachments: */ GLsizei,
    /* attachments: */ "buffer",
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glInvalidateSubFramebuffer!: Deno.UnsafeFnPointer<typeof def_glInvalidateSubFramebuffer>;

export function InvalidateSubFramebuffer(
  target: number,
  numAttachments: number,
  attachments: TypedArray,
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glInvalidateSubFramebuffer.call(
    target,
    numAttachments,
    attachments,
    x,
    y,
    width,
    height,
  );
}

const def_glTexStorage2D = {
  parameters: [
    /* target: */ GLenum,
    /* levels: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glTexStorage2D!: Deno.UnsafeFnPointer<typeof def_glTexStorage2D>;

export function TexStorage2D(
  target: number,
  levels: number,
  internalformat: number,
  width: number,
  height: number,
): void {
  return glTexStorage2D.call(
    target,
    levels,
    internalformat,
    width,
    height,
  );
}

const def_glTexStorage3D = {
  parameters: [
    /* target: */ GLenum,
    /* levels: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
  ],
  result: "void",
} as const;

let glTexStorage3D!: Deno.UnsafeFnPointer<typeof def_glTexStorage3D>;

export function TexStorage3D(
  target: number,
  levels: number,
  internalformat: number,
  width: number,
  height: number,
  depth: number,
): void {
  return glTexStorage3D.call(
    target,
    levels,
    internalformat,
    width,
    height,
    depth,
  );
}

const def_glGetInternalformativ = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* pname: */ GLenum,
    /* bufSize: */ GLsizei,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetInternalformativ!: Deno.UnsafeFnPointer<typeof def_glGetInternalformativ>;

export function GetInternalformativ(
  target: number,
  internalformat: number,
  pname: number,
  bufSize: number,
  params: TypedArray,
): void {
  return glGetInternalformativ.call(
    target,
    internalformat,
    pname,
    bufSize,
    params,
  );
}

const def_glDispatchCompute = {
  parameters: [
    /* num_groups_x: */ GLuint,
    /* num_groups_y: */ GLuint,
    /* num_groups_z: */ GLuint,
  ],
  result: "void",
} as const;

let glDispatchCompute!: Deno.UnsafeFnPointer<typeof def_glDispatchCompute>;

export function DispatchCompute(
  num_groups_x: number,
  num_groups_y: number,
  num_groups_z: number,
): void {
  return glDispatchCompute.call(
    num_groups_x,
    num_groups_y,
    num_groups_z,
  );
}

const def_glDispatchComputeIndirect = {
  parameters: [
    /* indirect: */ GLintptr,
  ],
  result: "void",
} as const;

let glDispatchComputeIndirect!: Deno.UnsafeFnPointer<typeof def_glDispatchComputeIndirect>;

export function DispatchComputeIndirect(
  indirect: Deno.PointerValue,
): void {
  return glDispatchComputeIndirect.call(
    indirect,
  );
}

const def_glDrawArraysIndirect = {
  parameters: [
    /* mode: */ GLenum,
    /* indirect: */ "buffer",
  ],
  result: "void",
} as const;

let glDrawArraysIndirect!: Deno.UnsafeFnPointer<typeof def_glDrawArraysIndirect>;

export function DrawArraysIndirect(
  mode: number,
  indirect: TypedArray,
): void {
  return glDrawArraysIndirect.call(
    mode,
    indirect,
  );
}

const def_glDrawElementsIndirect = {
  parameters: [
    /* mode: */ GLenum,
    /* type: */ GLenum,
    /* indirect: */ "buffer",
  ],
  result: "void",
} as const;

let glDrawElementsIndirect!: Deno.UnsafeFnPointer<typeof def_glDrawElementsIndirect>;

export function DrawElementsIndirect(
  mode: number,
  type: number,
  indirect: TypedArray,
): void {
  return glDrawElementsIndirect.call(
    mode,
    type,
    indirect,
  );
}

const def_glFramebufferParameteri = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glFramebufferParameteri!: Deno.UnsafeFnPointer<typeof def_glFramebufferParameteri>;

export function FramebufferParameteri(
  target: number,
  pname: number,
  param: number,
): void {
  return glFramebufferParameteri.call(
    target,
    pname,
    param,
  );
}

const def_glGetFramebufferParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetFramebufferParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetFramebufferParameteriv>;

export function GetFramebufferParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetFramebufferParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetProgramInterfaceiv = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramInterfaceiv!: Deno.UnsafeFnPointer<typeof def_glGetProgramInterfaceiv>;

export function GetProgramInterfaceiv(
  program: number,
  programInterface: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetProgramInterfaceiv.call(
    program,
    programInterface,
    pname,
    params,
  );
}

const def_glGetProgramResourceIndex = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* name: */ "buffer",
  ],
  result: GLuint,
} as const;

let glGetProgramResourceIndex!: Deno.UnsafeFnPointer<typeof def_glGetProgramResourceIndex>;

export function GetProgramResourceIndex(
  program: number,
  programInterface: number,
  name: TypedArray,
): number {
  return glGetProgramResourceIndex.call(
    program,
    programInterface,
    name,
  );
}

const def_glGetProgramResourceName = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramResourceName!: Deno.UnsafeFnPointer<typeof def_glGetProgramResourceName>;

export function GetProgramResourceName(
  program: number,
  programInterface: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  name: TypedArray,
): void {
  return glGetProgramResourceName.call(
    program,
    programInterface,
    index,
    bufSize,
    length,
    name,
  );
}

const def_glGetProgramResourceiv = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* index: */ GLuint,
    /* propCount: */ GLsizei,
    /* props: */ "buffer",
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramResourceiv!: Deno.UnsafeFnPointer<typeof def_glGetProgramResourceiv>;

export function GetProgramResourceiv(
  program: number,
  programInterface: number,
  index: number,
  propCount: number,
  props: TypedArray,
  bufSize: number,
  length: TypedArray,
  params: TypedArray,
): void {
  return glGetProgramResourceiv.call(
    program,
    programInterface,
    index,
    propCount,
    props,
    bufSize,
    length,
    params,
  );
}

const def_glGetProgramResourceLocation = {
  parameters: [
    /* program: */ GLuint,
    /* programInterface: */ GLenum,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetProgramResourceLocation!: Deno.UnsafeFnPointer<typeof def_glGetProgramResourceLocation>;

export function GetProgramResourceLocation(
  program: number,
  programInterface: number,
  name: TypedArray,
): number {
  return glGetProgramResourceLocation.call(
    program,
    programInterface,
    name,
  );
}

const def_glUseProgramStages = {
  parameters: [
    /* pipeline: */ GLuint,
    /* stages: */ GLbitfield,
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glUseProgramStages!: Deno.UnsafeFnPointer<typeof def_glUseProgramStages>;

export function UseProgramStages(
  pipeline: number,
  stages: number,
  program: number,
): void {
  return glUseProgramStages.call(
    pipeline,
    stages,
    program,
  );
}

const def_glActiveShaderProgram = {
  parameters: [
    /* pipeline: */ GLuint,
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glActiveShaderProgram!: Deno.UnsafeFnPointer<typeof def_glActiveShaderProgram>;

export function ActiveShaderProgram(
  pipeline: number,
  program: number,
): void {
  return glActiveShaderProgram.call(
    pipeline,
    program,
  );
}

const def_glCreateShaderProgramv = {
  parameters: [
    /* type: */ GLenum,
    /* count: */ GLsizei,
    /* const_strings: */ "buffer",
  ],
  result: GLuint,
} as const;

let glCreateShaderProgramv!: Deno.UnsafeFnPointer<typeof def_glCreateShaderProgramv>;

export function CreateShaderProgramv(
  type: number,
  count: number,
  const_strings: TypedArray,
): number {
  return glCreateShaderProgramv.call(
    type,
    count,
    const_strings,
  );
}

const def_glBindProgramPipeline = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: "void",
} as const;

let glBindProgramPipeline!: Deno.UnsafeFnPointer<typeof def_glBindProgramPipeline>;

export function BindProgramPipeline(
  pipeline: number,
): void {
  return glBindProgramPipeline.call(
    pipeline,
  );
}

const def_glDeleteProgramPipelines = {
  parameters: [
    /* n: */ GLsizei,
    /* pipelines: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteProgramPipelines!: Deno.UnsafeFnPointer<typeof def_glDeleteProgramPipelines>;

export function DeleteProgramPipelines(
  n: number,
  pipelines: TypedArray,
): void {
  return glDeleteProgramPipelines.call(
    n,
    pipelines,
  );
}

const def_glGenProgramPipelines = {
  parameters: [
    /* n: */ GLsizei,
    /* pipelines: */ "buffer",
  ],
  result: "void",
} as const;

let glGenProgramPipelines!: Deno.UnsafeFnPointer<typeof def_glGenProgramPipelines>;

export function GenProgramPipelines(
  n: number,
  pipelines: TypedArray,
): void {
  return glGenProgramPipelines.call(
    n,
    pipelines,
  );
}

const def_glIsProgramPipeline = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsProgramPipeline!: Deno.UnsafeFnPointer<typeof def_glIsProgramPipeline>;

export function IsProgramPipeline(
  pipeline: number,
): number {
  return glIsProgramPipeline.call(
    pipeline,
  );
}

const def_glGetProgramPipelineiv = {
  parameters: [
    /* pipeline: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramPipelineiv!: Deno.UnsafeFnPointer<typeof def_glGetProgramPipelineiv>;

export function GetProgramPipelineiv(
  pipeline: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetProgramPipelineiv.call(
    pipeline,
    pname,
    params,
  );
}

const def_glProgramUniform1i = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

let glProgramUniform1i!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1i>;

export function ProgramUniform1i(
  program: number,
  location: number,
  v0: number,
): void {
  return glProgramUniform1i.call(
    program,
    location,
    v0,
  );
}

const def_glProgramUniform2i = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

let glProgramUniform2i!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2i>;

export function ProgramUniform2i(
  program: number,
  location: number,
  v0: number,
  v1: number,
): void {
  return glProgramUniform2i.call(
    program,
    location,
    v0,
    v1,
  );
}

const def_glProgramUniform3i = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

let glProgramUniform3i!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3i>;

export function ProgramUniform3i(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glProgramUniform3i.call(
    program,
    location,
    v0,
    v1,
    v2,
  );
}

const def_glProgramUniform4i = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

let glProgramUniform4i!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4i>;

export function ProgramUniform4i(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glProgramUniform4i.call(
    program,
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glProgramUniform1ui = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
  ],
  result: "void",
} as const;

let glProgramUniform1ui!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1ui>;

export function ProgramUniform1ui(
  program: number,
  location: number,
  v0: number,
): void {
  return glProgramUniform1ui.call(
    program,
    location,
    v0,
  );
}

const def_glProgramUniform2ui = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
  ],
  result: "void",
} as const;

let glProgramUniform2ui!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2ui>;

export function ProgramUniform2ui(
  program: number,
  location: number,
  v0: number,
  v1: number,
): void {
  return glProgramUniform2ui.call(
    program,
    location,
    v0,
    v1,
  );
}

const def_glProgramUniform3ui = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
  ],
  result: "void",
} as const;

let glProgramUniform3ui!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3ui>;

export function ProgramUniform3ui(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glProgramUniform3ui.call(
    program,
    location,
    v0,
    v1,
    v2,
  );
}

const def_glProgramUniform4ui = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLuint,
    /* v1: */ GLuint,
    /* v2: */ GLuint,
    /* v3: */ GLuint,
  ],
  result: "void",
} as const;

let glProgramUniform4ui!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4ui>;

export function ProgramUniform4ui(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glProgramUniform4ui.call(
    program,
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glProgramUniform1f = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

let glProgramUniform1f!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1f>;

export function ProgramUniform1f(
  program: number,
  location: number,
  v0: number,
): void {
  return glProgramUniform1f.call(
    program,
    location,
    v0,
  );
}

const def_glProgramUniform2f = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

let glProgramUniform2f!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2f>;

export function ProgramUniform2f(
  program: number,
  location: number,
  v0: number,
  v1: number,
): void {
  return glProgramUniform2f.call(
    program,
    location,
    v0,
    v1,
  );
}

const def_glProgramUniform3f = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

let glProgramUniform3f!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3f>;

export function ProgramUniform3f(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glProgramUniform3f.call(
    program,
    location,
    v0,
    v1,
    v2,
  );
}

const def_glProgramUniform4f = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

let glProgramUniform4f!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4f>;

export function ProgramUniform4f(
  program: number,
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glProgramUniform4f.call(
    program,
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glProgramUniform1iv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform1iv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1iv>;

export function ProgramUniform1iv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform1iv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform2iv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform2iv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2iv>;

export function ProgramUniform2iv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform2iv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform3iv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform3iv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3iv>;

export function ProgramUniform3iv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform3iv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform4iv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform4iv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4iv>;

export function ProgramUniform4iv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform4iv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform1uiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform1uiv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1uiv>;

export function ProgramUniform1uiv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform1uiv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform2uiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform2uiv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2uiv>;

export function ProgramUniform2uiv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform2uiv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform3uiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform3uiv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3uiv>;

export function ProgramUniform3uiv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform3uiv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform4uiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform4uiv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4uiv>;

export function ProgramUniform4uiv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform4uiv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform1fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform1fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform1fv>;

export function ProgramUniform1fv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform1fv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform2fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform2fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform2fv>;

export function ProgramUniform2fv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform2fv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform3fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform3fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform3fv>;

export function ProgramUniform3fv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform3fv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniform4fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniform4fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniform4fv>;

export function ProgramUniform4fv(
  program: number,
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glProgramUniform4fv.call(
    program,
    location,
    count,
    value,
  );
}

const def_glProgramUniformMatrix2fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix2fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix2fv>;

export function ProgramUniformMatrix2fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix2fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix3fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix3fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix3fv>;

export function ProgramUniformMatrix3fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix3fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix4fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix4fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix4fv>;

export function ProgramUniformMatrix4fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix4fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix2x3fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix2x3fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix2x3fv>;

export function ProgramUniformMatrix2x3fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix2x3fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix3x2fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix3x2fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix3x2fv>;

export function ProgramUniformMatrix3x2fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix3x2fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix2x4fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix2x4fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix2x4fv>;

export function ProgramUniformMatrix2x4fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix2x4fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix4x2fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix4x2fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix4x2fv>;

export function ProgramUniformMatrix4x2fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix4x2fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix3x4fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix3x4fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix3x4fv>;

export function ProgramUniformMatrix3x4fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix3x4fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glProgramUniformMatrix4x3fv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glProgramUniformMatrix4x3fv!: Deno.UnsafeFnPointer<typeof def_glProgramUniformMatrix4x3fv>;

export function ProgramUniformMatrix4x3fv(
  program: number,
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glProgramUniformMatrix4x3fv.call(
    program,
    location,
    count,
    transpose,
    value,
  );
}

const def_glValidateProgramPipeline = {
  parameters: [
    /* pipeline: */ GLuint,
  ],
  result: "void",
} as const;

let glValidateProgramPipeline!: Deno.UnsafeFnPointer<typeof def_glValidateProgramPipeline>;

export function ValidateProgramPipeline(
  pipeline: number,
): void {
  return glValidateProgramPipeline.call(
    pipeline,
  );
}

const def_glGetProgramPipelineInfoLog = {
  parameters: [
    /* pipeline: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* infoLog: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramPipelineInfoLog!: Deno.UnsafeFnPointer<typeof def_glGetProgramPipelineInfoLog>;

export function GetProgramPipelineInfoLog(
  pipeline: number,
  bufSize: number,
  length: TypedArray,
  infoLog: TypedArray,
): void {
  return glGetProgramPipelineInfoLog.call(
    pipeline,
    bufSize,
    length,
    infoLog,
  );
}

const def_glBindImageTexture = {
  parameters: [
    /* unit: */ GLuint,
    /* texture: */ GLuint,
    /* level: */ GLint,
    /* layered: */ GLboolean,
    /* layer: */ GLint,
    /* access: */ GLenum,
    /* format: */ GLenum,
  ],
  result: "void",
} as const;

let glBindImageTexture!: Deno.UnsafeFnPointer<typeof def_glBindImageTexture>;

export function BindImageTexture(
  unit: number,
  texture: number,
  level: number,
  layered: number,
  layer: number,
  access: number,
  format: number,
): void {
  return glBindImageTexture.call(
    unit,
    texture,
    level,
    layered,
    layer,
    access,
    format,
  );
}

const def_glGetBooleani_v = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBooleani_v!: Deno.UnsafeFnPointer<typeof def_glGetBooleani_v>;

export function GetBooleani_v(
  target: number,
  index: number,
  data: TypedArray,
): void {
  return glGetBooleani_v.call(
    target,
    index,
    data,
  );
}

const def_glMemoryBarrier = {
  parameters: [
    /* barriers: */ GLbitfield,
  ],
  result: "void",
} as const;

let glMemoryBarrier!: Deno.UnsafeFnPointer<typeof def_glMemoryBarrier>;

export function MemoryBarrier(
  barriers: number,
): void {
  return glMemoryBarrier.call(
    barriers,
  );
}

const def_glMemoryBarrierByRegion = {
  parameters: [
    /* barriers: */ GLbitfield,
  ],
  result: "void",
} as const;

let glMemoryBarrierByRegion!: Deno.UnsafeFnPointer<typeof def_glMemoryBarrierByRegion>;

export function MemoryBarrierByRegion(
  barriers: number,
): void {
  return glMemoryBarrierByRegion.call(
    barriers,
  );
}

const def_glTexStorage2DMultisample = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* fixedsamplelocations: */ GLboolean,
  ],
  result: "void",
} as const;

let glTexStorage2DMultisample!: Deno.UnsafeFnPointer<typeof def_glTexStorage2DMultisample>;

export function TexStorage2DMultisample(
  target: number,
  samples: number,
  internalformat: number,
  width: number,
  height: number,
  fixedsamplelocations: number,
): void {
  return glTexStorage2DMultisample.call(
    target,
    samples,
    internalformat,
    width,
    height,
    fixedsamplelocations,
  );
}

const def_glGetMultisamplefv = {
  parameters: [
    /* pname: */ GLenum,
    /* index: */ GLuint,
    /* val: */ "buffer",
  ],
  result: "void",
} as const;

let glGetMultisamplefv!: Deno.UnsafeFnPointer<typeof def_glGetMultisamplefv>;

export function GetMultisamplefv(
  pname: number,
  index: number,
  val: TypedArray,
): void {
  return glGetMultisamplefv.call(
    pname,
    index,
    val,
  );
}

const def_glSampleMaski = {
  parameters: [
    /* maskNumber: */ GLuint,
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

let glSampleMaski!: Deno.UnsafeFnPointer<typeof def_glSampleMaski>;

export function SampleMaski(
  maskNumber: number,
  mask: number,
): void {
  return glSampleMaski.call(
    maskNumber,
    mask,
  );
}

const def_glGetTexLevelParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexLevelParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetTexLevelParameteriv>;

export function GetTexLevelParameteriv(
  target: number,
  level: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexLevelParameteriv.call(
    target,
    level,
    pname,
    params,
  );
}

const def_glGetTexLevelParameterfv = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexLevelParameterfv!: Deno.UnsafeFnPointer<typeof def_glGetTexLevelParameterfv>;

export function GetTexLevelParameterfv(
  target: number,
  level: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexLevelParameterfv.call(
    target,
    level,
    pname,
    params,
  );
}

const def_glBindVertexBuffer = {
  parameters: [
    /* bindingindex: */ GLuint,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* stride: */ GLsizei,
  ],
  result: "void",
} as const;

let glBindVertexBuffer!: Deno.UnsafeFnPointer<typeof def_glBindVertexBuffer>;

export function BindVertexBuffer(
  bindingindex: number,
  buffer: number,
  offset: Deno.PointerValue,
  stride: number,
): void {
  return glBindVertexBuffer.call(
    bindingindex,
    buffer,
    offset,
    stride,
  );
}

const def_glVertexAttribFormat = {
  parameters: [
    /* attribindex: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* relativeoffset: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexAttribFormat!: Deno.UnsafeFnPointer<typeof def_glVertexAttribFormat>;

export function VertexAttribFormat(
  attribindex: number,
  size: number,
  type: number,
  normalized: number,
  relativeoffset: number,
): void {
  return glVertexAttribFormat.call(
    attribindex,
    size,
    type,
    normalized,
    relativeoffset,
  );
}

const def_glVertexAttribIFormat = {
  parameters: [
    /* attribindex: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* relativeoffset: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexAttribIFormat!: Deno.UnsafeFnPointer<typeof def_glVertexAttribIFormat>;

export function VertexAttribIFormat(
  attribindex: number,
  size: number,
  type: number,
  relativeoffset: number,
): void {
  return glVertexAttribIFormat.call(
    attribindex,
    size,
    type,
    relativeoffset,
  );
}

const def_glVertexAttribBinding = {
  parameters: [
    /* attribindex: */ GLuint,
    /* bindingindex: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexAttribBinding!: Deno.UnsafeFnPointer<typeof def_glVertexAttribBinding>;

export function VertexAttribBinding(
  attribindex: number,
  bindingindex: number,
): void {
  return glVertexAttribBinding.call(
    attribindex,
    bindingindex,
  );
}

const def_glVertexBindingDivisor = {
  parameters: [
    /* bindingindex: */ GLuint,
    /* divisor: */ GLuint,
  ],
  result: "void",
} as const;

let glVertexBindingDivisor!: Deno.UnsafeFnPointer<typeof def_glVertexBindingDivisor>;

export function VertexBindingDivisor(
  bindingindex: number,
  divisor: number,
): void {
  return glVertexBindingDivisor.call(
    bindingindex,
    divisor,
  );
}

const def_glBlendBarrier = {
  parameters: [
  ],
  result: "void",
} as const;

let glBlendBarrier!: Deno.UnsafeFnPointer<typeof def_glBlendBarrier>;

export function BlendBarrier(
): void {
  return glBlendBarrier.call(
  );
}

const def_glCopyImageSubData = {
  parameters: [
    /* srcName: */ GLuint,
    /* srcTarget: */ GLenum,
    /* srcLevel: */ GLint,
    /* srcX: */ GLint,
    /* srcY: */ GLint,
    /* srcZ: */ GLint,
    /* dstName: */ GLuint,
    /* dstTarget: */ GLenum,
    /* dstLevel: */ GLint,
    /* dstX: */ GLint,
    /* dstY: */ GLint,
    /* dstZ: */ GLint,
    /* srcWidth: */ GLsizei,
    /* srcHeight: */ GLsizei,
    /* srcDepth: */ GLsizei,
  ],
  result: "void",
} as const;

let glCopyImageSubData!: Deno.UnsafeFnPointer<typeof def_glCopyImageSubData>;

export function CopyImageSubData(
  srcName: number,
  srcTarget: number,
  srcLevel: number,
  srcX: number,
  srcY: number,
  srcZ: number,
  dstName: number,
  dstTarget: number,
  dstLevel: number,
  dstX: number,
  dstY: number,
  dstZ: number,
  srcWidth: number,
  srcHeight: number,
  srcDepth: number,
): void {
  return glCopyImageSubData.call(
    srcName,
    srcTarget,
    srcLevel,
    srcX,
    srcY,
    srcZ,
    dstName,
    dstTarget,
    dstLevel,
    dstX,
    dstY,
    dstZ,
    srcWidth,
    srcHeight,
    srcDepth,
  );
}

const def_glDebugMessageControl = {
  parameters: [
    /* source: */ GLenum,
    /* type: */ GLenum,
    /* severity: */ GLenum,
    /* count: */ GLsizei,
    /* ids: */ "buffer",
    /* enabled: */ GLboolean,
  ],
  result: "void",
} as const;

let glDebugMessageControl!: Deno.UnsafeFnPointer<typeof def_glDebugMessageControl>;

export function DebugMessageControl(
  source: number,
  type: number,
  severity: number,
  count: number,
  ids: TypedArray,
  enabled: number,
): void {
  return glDebugMessageControl.call(
    source,
    type,
    severity,
    count,
    ids,
    enabled,
  );
}

const def_glDebugMessageInsert = {
  parameters: [
    /* source: */ GLenum,
    /* type: */ GLenum,
    /* id: */ GLuint,
    /* severity: */ GLenum,
    /* length: */ GLsizei,
    /* buf: */ "buffer",
  ],
  result: "void",
} as const;

let glDebugMessageInsert!: Deno.UnsafeFnPointer<typeof def_glDebugMessageInsert>;

export function DebugMessageInsert(
  source: number,
  type: number,
  id: number,
  severity: number,
  length: number,
  buf: TypedArray,
): void {
  return glDebugMessageInsert.call(
    source,
    type,
    id,
    severity,
    length,
    buf,
  );
}

const def_glDebugMessageCallback = {
  parameters: [
    /* callback: */ "pointer",
    /* userParam: */ "buffer",
  ],
  result: "void",
} as const;

let glDebugMessageCallback!: Deno.UnsafeFnPointer<typeof def_glDebugMessageCallback>;

export function DebugMessageCallback(
  callback: Deno.PointerValue,
  userParam: TypedArray,
): void {
  return glDebugMessageCallback.call(
    callback,
    userParam,
  );
}

const def_glGetDebugMessageLog = {
  parameters: [
    /* count: */ GLuint,
    /* bufSize: */ GLsizei,
    /* sources: */ "buffer",
    /* types: */ "buffer",
    /* ids: */ "buffer",
    /* severities: */ "buffer",
    /* lengths: */ "buffer",
    /* messageLog: */ "buffer",
  ],
  result: GLuint,
} as const;

let glGetDebugMessageLog!: Deno.UnsafeFnPointer<typeof def_glGetDebugMessageLog>;

export function GetDebugMessageLog(
  count: number,
  bufSize: number,
  sources: TypedArray,
  types: TypedArray,
  ids: TypedArray,
  severities: TypedArray,
  lengths: TypedArray,
  messageLog: TypedArray,
): number {
  return glGetDebugMessageLog.call(
    count,
    bufSize,
    sources,
    types,
    ids,
    severities,
    lengths,
    messageLog,
  );
}

const def_glPushDebugGroup = {
  parameters: [
    /* source: */ GLenum,
    /* id: */ GLuint,
    /* length: */ GLsizei,
    /* message: */ "buffer",
  ],
  result: "void",
} as const;

let glPushDebugGroup!: Deno.UnsafeFnPointer<typeof def_glPushDebugGroup>;

export function PushDebugGroup(
  source: number,
  id: number,
  length: number,
  message: TypedArray,
): void {
  return glPushDebugGroup.call(
    source,
    id,
    length,
    message,
  );
}

const def_glPopDebugGroup = {
  parameters: [
  ],
  result: "void",
} as const;

let glPopDebugGroup!: Deno.UnsafeFnPointer<typeof def_glPopDebugGroup>;

export function PopDebugGroup(
): void {
  return glPopDebugGroup.call(
  );
}

const def_glObjectLabel = {
  parameters: [
    /* identifier: */ GLenum,
    /* name: */ GLuint,
    /* length: */ GLsizei,
    /* label: */ "buffer",
  ],
  result: "void",
} as const;

let glObjectLabel!: Deno.UnsafeFnPointer<typeof def_glObjectLabel>;

export function ObjectLabel(
  identifier: number,
  name: number,
  length: number,
  label: TypedArray,
): void {
  return glObjectLabel.call(
    identifier,
    name,
    length,
    label,
  );
}

const def_glGetObjectLabel = {
  parameters: [
    /* identifier: */ GLenum,
    /* name: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* label: */ "buffer",
  ],
  result: "void",
} as const;

let glGetObjectLabel!: Deno.UnsafeFnPointer<typeof def_glGetObjectLabel>;

export function GetObjectLabel(
  identifier: number,
  name: number,
  bufSize: number,
  length: TypedArray,
  label: TypedArray,
): void {
  return glGetObjectLabel.call(
    identifier,
    name,
    bufSize,
    length,
    label,
  );
}

const def_glObjectPtrLabel = {
  parameters: [
    /* ptr: */ "buffer",
    /* length: */ GLsizei,
    /* label: */ "buffer",
  ],
  result: "void",
} as const;

let glObjectPtrLabel!: Deno.UnsafeFnPointer<typeof def_glObjectPtrLabel>;

export function ObjectPtrLabel(
  ptr: TypedArray,
  length: number,
  label: TypedArray,
): void {
  return glObjectPtrLabel.call(
    ptr,
    length,
    label,
  );
}

const def_glGetObjectPtrLabel = {
  parameters: [
    /* ptr: */ "buffer",
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* label: */ "buffer",
  ],
  result: "void",
} as const;

let glGetObjectPtrLabel!: Deno.UnsafeFnPointer<typeof def_glGetObjectPtrLabel>;

export function GetObjectPtrLabel(
  ptr: TypedArray,
  bufSize: number,
  length: TypedArray,
  label: TypedArray,
): void {
  return glGetObjectPtrLabel.call(
    ptr,
    bufSize,
    length,
    label,
  );
}

const def_glGetPointerv = {
  parameters: [
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetPointerv!: Deno.UnsafeFnPointer<typeof def_glGetPointerv>;

export function GetPointerv(
  pname: number,
  params: TypedArray,
): void {
  return glGetPointerv.call(
    pname,
    params,
  );
}

const def_glEnablei = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glEnablei!: Deno.UnsafeFnPointer<typeof def_glEnablei>;

export function Enablei(
  target: number,
  index: number,
): void {
  return glEnablei.call(
    target,
    index,
  );
}

const def_glDisablei = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glDisablei!: Deno.UnsafeFnPointer<typeof def_glDisablei>;

export function Disablei(
  target: number,
  index: number,
): void {
  return glDisablei.call(
    target,
    index,
  );
}

const def_glBlendEquationi = {
  parameters: [
    /* buf: */ GLuint,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquationi!: Deno.UnsafeFnPointer<typeof def_glBlendEquationi>;

export function BlendEquationi(
  buf: number,
  mode: number,
): void {
  return glBlendEquationi.call(
    buf,
    mode,
  );
}

const def_glBlendEquationSeparatei = {
  parameters: [
    /* buf: */ GLuint,
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquationSeparatei!: Deno.UnsafeFnPointer<typeof def_glBlendEquationSeparatei>;

export function BlendEquationSeparatei(
  buf: number,
  modeRGB: number,
  modeAlpha: number,
): void {
  return glBlendEquationSeparatei.call(
    buf,
    modeRGB,
    modeAlpha,
  );
}

const def_glBlendFunci = {
  parameters: [
    /* buf: */ GLuint,
    /* src: */ GLenum,
    /* dst: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFunci!: Deno.UnsafeFnPointer<typeof def_glBlendFunci>;

export function BlendFunci(
  buf: number,
  src: number,
  dst: number,
): void {
  return glBlendFunci.call(
    buf,
    src,
    dst,
  );
}

const def_glBlendFuncSeparatei = {
  parameters: [
    /* buf: */ GLuint,
    /* srcRGB: */ GLenum,
    /* dstRGB: */ GLenum,
    /* srcAlpha: */ GLenum,
    /* dstAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFuncSeparatei!: Deno.UnsafeFnPointer<typeof def_glBlendFuncSeparatei>;

export function BlendFuncSeparatei(
  buf: number,
  srcRGB: number,
  dstRGB: number,
  srcAlpha: number,
  dstAlpha: number,
): void {
  return glBlendFuncSeparatei.call(
    buf,
    srcRGB,
    dstRGB,
    srcAlpha,
    dstAlpha,
  );
}

const def_glColorMaski = {
  parameters: [
    /* index: */ GLuint,
    /* r: */ GLboolean,
    /* g: */ GLboolean,
    /* b: */ GLboolean,
    /* a: */ GLboolean,
  ],
  result: "void",
} as const;

let glColorMaski!: Deno.UnsafeFnPointer<typeof def_glColorMaski>;

export function ColorMaski(
  index: number,
  r: number,
  g: number,
  b: number,
  a: number,
): void {
  return glColorMaski.call(
    index,
    r,
    g,
    b,
    a,
  );
}

const def_glIsEnabledi = {
  parameters: [
    /* target: */ GLenum,
    /* index: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsEnabledi!: Deno.UnsafeFnPointer<typeof def_glIsEnabledi>;

export function IsEnabledi(
  target: number,
  index: number,
): number {
  return glIsEnabledi.call(
    target,
    index,
  );
}

const def_glDrawElementsBaseVertex = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

let glDrawElementsBaseVertex!: Deno.UnsafeFnPointer<typeof def_glDrawElementsBaseVertex>;

export function DrawElementsBaseVertex(
  mode: number,
  count: number,
  type: number,
  indices: TypedArray,
  basevertex: number,
): void {
  return glDrawElementsBaseVertex.call(
    mode,
    count,
    type,
    indices,
    basevertex,
  );
}

const def_glDrawRangeElementsBaseVertex = {
  parameters: [
    /* mode: */ GLenum,
    /* start: */ GLuint,
    /* end: */ GLuint,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

let glDrawRangeElementsBaseVertex!: Deno.UnsafeFnPointer<typeof def_glDrawRangeElementsBaseVertex>;

export function DrawRangeElementsBaseVertex(
  mode: number,
  start: number,
  end: number,
  count: number,
  type: number,
  indices: TypedArray,
  basevertex: number,
): void {
  return glDrawRangeElementsBaseVertex.call(
    mode,
    start,
    end,
    count,
    type,
    indices,
    basevertex,
  );
}

const def_glDrawElementsInstancedBaseVertex = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "buffer",
    /* instancecount: */ GLsizei,
    /* basevertex: */ GLint,
  ],
  result: "void",
} as const;

let glDrawElementsInstancedBaseVertex!: Deno.UnsafeFnPointer<typeof def_glDrawElementsInstancedBaseVertex>;

export function DrawElementsInstancedBaseVertex(
  mode: number,
  count: number,
  type: number,
  indices: TypedArray,
  instancecount: number,
  basevertex: number,
): void {
  return glDrawElementsInstancedBaseVertex.call(
    mode,
    count,
    type,
    indices,
    instancecount,
    basevertex,
  );
}

const def_glFramebufferTexture = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

let glFramebufferTexture!: Deno.UnsafeFnPointer<typeof def_glFramebufferTexture>;

export function FramebufferTexture(
  target: number,
  attachment: number,
  texture: number,
  level: number,
): void {
  return glFramebufferTexture.call(
    target,
    attachment,
    texture,
    level,
  );
}

const def_glPrimitiveBoundingBox = {
  parameters: [
    /* minX: */ GLfloat,
    /* minY: */ GLfloat,
    /* minZ: */ GLfloat,
    /* minW: */ GLfloat,
    /* maxX: */ GLfloat,
    /* maxY: */ GLfloat,
    /* maxZ: */ GLfloat,
    /* maxW: */ GLfloat,
  ],
  result: "void",
} as const;

let glPrimitiveBoundingBox!: Deno.UnsafeFnPointer<typeof def_glPrimitiveBoundingBox>;

export function PrimitiveBoundingBox(
  minX: number,
  minY: number,
  minZ: number,
  minW: number,
  maxX: number,
  maxY: number,
  maxZ: number,
  maxW: number,
): void {
  return glPrimitiveBoundingBox.call(
    minX,
    minY,
    minZ,
    minW,
    maxX,
    maxY,
    maxZ,
    maxW,
  );
}

const def_glGetGraphicsResetStatus = {
  parameters: [
  ],
  result: GLenum,
} as const;

let glGetGraphicsResetStatus!: Deno.UnsafeFnPointer<typeof def_glGetGraphicsResetStatus>;

export function GetGraphicsResetStatus(
): number {
  return glGetGraphicsResetStatus.call(
  );
}

const def_glReadnPixels = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* bufSize: */ GLsizei,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glReadnPixels!: Deno.UnsafeFnPointer<typeof def_glReadnPixels>;

export function ReadnPixels(
  x: number,
  y: number,
  width: number,
  height: number,
  format: number,
  type: number,
  bufSize: number,
  data: TypedArray,
): void {
  return glReadnPixels.call(
    x,
    y,
    width,
    height,
    format,
    type,
    bufSize,
    data,
  );
}

const def_glGetnUniformfv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetnUniformfv!: Deno.UnsafeFnPointer<typeof def_glGetnUniformfv>;

export function GetnUniformfv(
  program: number,
  location: number,
  bufSize: number,
  params: TypedArray,
): void {
  return glGetnUniformfv.call(
    program,
    location,
    bufSize,
    params,
  );
}

const def_glGetnUniformiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetnUniformiv!: Deno.UnsafeFnPointer<typeof def_glGetnUniformiv>;

export function GetnUniformiv(
  program: number,
  location: number,
  bufSize: number,
  params: TypedArray,
): void {
  return glGetnUniformiv.call(
    program,
    location,
    bufSize,
    params,
  );
}

const def_glGetnUniformuiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* bufSize: */ GLsizei,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetnUniformuiv!: Deno.UnsafeFnPointer<typeof def_glGetnUniformuiv>;

export function GetnUniformuiv(
  program: number,
  location: number,
  bufSize: number,
  params: TypedArray,
): void {
  return glGetnUniformuiv.call(
    program,
    location,
    bufSize,
    params,
  );
}

const def_glMinSampleShading = {
  parameters: [
    /* value: */ GLfloat,
  ],
  result: "void",
} as const;

let glMinSampleShading!: Deno.UnsafeFnPointer<typeof def_glMinSampleShading>;

export function MinSampleShading(
  value: number,
): void {
  return glMinSampleShading.call(
    value,
  );
}

const def_glPatchParameteri = {
  parameters: [
    /* pname: */ GLenum,
    /* value: */ GLint,
  ],
  result: "void",
} as const;

let glPatchParameteri!: Deno.UnsafeFnPointer<typeof def_glPatchParameteri>;

export function PatchParameteri(
  pname: number,
  value: number,
): void {
  return glPatchParameteri.call(
    pname,
    value,
  );
}

const def_glTexParameterIiv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameterIiv!: Deno.UnsafeFnPointer<typeof def_glTexParameterIiv>;

export function TexParameterIiv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameterIiv.call(
    target,
    pname,
    params,
  );
}

const def_glTexParameterIuiv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameterIuiv!: Deno.UnsafeFnPointer<typeof def_glTexParameterIuiv>;

export function TexParameterIuiv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameterIuiv.call(
    target,
    pname,
    params,
  );
}

const def_glGetTexParameterIiv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameterIiv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameterIiv>;

export function GetTexParameterIiv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameterIiv.call(
    target,
    pname,
    params,
  );
}

const def_glGetTexParameterIuiv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameterIuiv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameterIuiv>;

export function GetTexParameterIuiv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameterIuiv.call(
    target,
    pname,
    params,
  );
}

const def_glSamplerParameterIiv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "buffer",
  ],
  result: "void",
} as const;

let glSamplerParameterIiv!: Deno.UnsafeFnPointer<typeof def_glSamplerParameterIiv>;

export function SamplerParameterIiv(
  sampler: number,
  pname: number,
  param: TypedArray,
): void {
  return glSamplerParameterIiv.call(
    sampler,
    pname,
    param,
  );
}

const def_glSamplerParameterIuiv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* param: */ "buffer",
  ],
  result: "void",
} as const;

let glSamplerParameterIuiv!: Deno.UnsafeFnPointer<typeof def_glSamplerParameterIuiv>;

export function SamplerParameterIuiv(
  sampler: number,
  pname: number,
  param: TypedArray,
): void {
  return glSamplerParameterIuiv.call(
    sampler,
    pname,
    param,
  );
}

const def_glGetSamplerParameterIiv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetSamplerParameterIiv!: Deno.UnsafeFnPointer<typeof def_glGetSamplerParameterIiv>;

export function GetSamplerParameterIiv(
  sampler: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetSamplerParameterIiv.call(
    sampler,
    pname,
    params,
  );
}

const def_glGetSamplerParameterIuiv = {
  parameters: [
    /* sampler: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetSamplerParameterIuiv!: Deno.UnsafeFnPointer<typeof def_glGetSamplerParameterIuiv>;

export function GetSamplerParameterIuiv(
  sampler: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetSamplerParameterIuiv.call(
    sampler,
    pname,
    params,
  );
}

const def_glTexBuffer = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

let glTexBuffer!: Deno.UnsafeFnPointer<typeof def_glTexBuffer>;

export function TexBuffer(
  target: number,
  internalformat: number,
  buffer: number,
): void {
  return glTexBuffer.call(
    target,
    internalformat,
    buffer,
  );
}

const def_glTexBufferRange = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* buffer: */ GLuint,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
  ],
  result: "void",
} as const;

let glTexBufferRange!: Deno.UnsafeFnPointer<typeof def_glTexBufferRange>;

export function TexBufferRange(
  target: number,
  internalformat: number,
  buffer: number,
  offset: Deno.PointerValue,
  size: number | bigint,
): void {
  return glTexBufferRange.call(
    target,
    internalformat,
    buffer,
    offset,
    size,
  );
}

const def_glTexStorage3DMultisample = {
  parameters: [
    /* target: */ GLenum,
    /* samples: */ GLsizei,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* depth: */ GLsizei,
    /* fixedsamplelocations: */ GLboolean,
  ],
  result: "void",
} as const;

let glTexStorage3DMultisample!: Deno.UnsafeFnPointer<typeof def_glTexStorage3DMultisample>;

export function TexStorage3DMultisample(
  target: number,
  samples: number,
  internalformat: number,
  width: number,
  height: number,
  depth: number,
  fixedsamplelocations: number,
): void {
  return glTexStorage3DMultisample.call(
    target,
    samples,
    internalformat,
    width,
    height,
    depth,
    fixedsamplelocations,
  );
}

// Loader

export function loadGL(proc: (name: string) => Deno.PointerValue) {
  glActiveTexture = new Deno.UnsafeFnPointer(proc("glActiveTexture"), def_glActiveTexture);
  glAttachShader = new Deno.UnsafeFnPointer(proc("glAttachShader"), def_glAttachShader);
  glBindAttribLocation = new Deno.UnsafeFnPointer(proc("glBindAttribLocation"), def_glBindAttribLocation);
  glBindBuffer = new Deno.UnsafeFnPointer(proc("glBindBuffer"), def_glBindBuffer);
  glBindFramebuffer = new Deno.UnsafeFnPointer(proc("glBindFramebuffer"), def_glBindFramebuffer);
  glBindRenderbuffer = new Deno.UnsafeFnPointer(proc("glBindRenderbuffer"), def_glBindRenderbuffer);
  glBindTexture = new Deno.UnsafeFnPointer(proc("glBindTexture"), def_glBindTexture);
  glBlendColor = new Deno.UnsafeFnPointer(proc("glBlendColor"), def_glBlendColor);
  glBlendEquation = new Deno.UnsafeFnPointer(proc("glBlendEquation"), def_glBlendEquation);
  glBlendEquationSeparate = new Deno.UnsafeFnPointer(proc("glBlendEquationSeparate"), def_glBlendEquationSeparate);
  glBlendFunc = new Deno.UnsafeFnPointer(proc("glBlendFunc"), def_glBlendFunc);
  glBlendFuncSeparate = new Deno.UnsafeFnPointer(proc("glBlendFuncSeparate"), def_glBlendFuncSeparate);
  glBufferData = new Deno.UnsafeFnPointer(proc("glBufferData"), def_glBufferData);
  glBufferSubData = new Deno.UnsafeFnPointer(proc("glBufferSubData"), def_glBufferSubData);
  glCheckFramebufferStatus = new Deno.UnsafeFnPointer(proc("glCheckFramebufferStatus"), def_glCheckFramebufferStatus);
  glClear = new Deno.UnsafeFnPointer(proc("glClear"), def_glClear);
  glClearColor = new Deno.UnsafeFnPointer(proc("glClearColor"), def_glClearColor);
  glClearDepthf = new Deno.UnsafeFnPointer(proc("glClearDepthf"), def_glClearDepthf);
  glClearStencil = new Deno.UnsafeFnPointer(proc("glClearStencil"), def_glClearStencil);
  glColorMask = new Deno.UnsafeFnPointer(proc("glColorMask"), def_glColorMask);
  glCompileShader = new Deno.UnsafeFnPointer(proc("glCompileShader"), def_glCompileShader);
  glCompressedTexImage2D = new Deno.UnsafeFnPointer(proc("glCompressedTexImage2D"), def_glCompressedTexImage2D);
  glCompressedTexSubImage2D = new Deno.UnsafeFnPointer(proc("glCompressedTexSubImage2D"), def_glCompressedTexSubImage2D);
  glCopyTexImage2D = new Deno.UnsafeFnPointer(proc("glCopyTexImage2D"), def_glCopyTexImage2D);
  glCopyTexSubImage2D = new Deno.UnsafeFnPointer(proc("glCopyTexSubImage2D"), def_glCopyTexSubImage2D);
  glCreateProgram = new Deno.UnsafeFnPointer(proc("glCreateProgram"), def_glCreateProgram);
  glCreateShader = new Deno.UnsafeFnPointer(proc("glCreateShader"), def_glCreateShader);
  glCullFace = new Deno.UnsafeFnPointer(proc("glCullFace"), def_glCullFace);
  glDeleteBuffers = new Deno.UnsafeFnPointer(proc("glDeleteBuffers"), def_glDeleteBuffers);
  glDeleteFramebuffers = new Deno.UnsafeFnPointer(proc("glDeleteFramebuffers"), def_glDeleteFramebuffers);
  glDeleteProgram = new Deno.UnsafeFnPointer(proc("glDeleteProgram"), def_glDeleteProgram);
  glDeleteRenderbuffers = new Deno.UnsafeFnPointer(proc("glDeleteRenderbuffers"), def_glDeleteRenderbuffers);
  glDeleteShader = new Deno.UnsafeFnPointer(proc("glDeleteShader"), def_glDeleteShader);
  glDeleteTextures = new Deno.UnsafeFnPointer(proc("glDeleteTextures"), def_glDeleteTextures);
  glDepthFunc = new Deno.UnsafeFnPointer(proc("glDepthFunc"), def_glDepthFunc);
  glDepthMask = new Deno.UnsafeFnPointer(proc("glDepthMask"), def_glDepthMask);
  glDepthRangef = new Deno.UnsafeFnPointer(proc("glDepthRangef"), def_glDepthRangef);
  glDetachShader = new Deno.UnsafeFnPointer(proc("glDetachShader"), def_glDetachShader);
  glDisable = new Deno.UnsafeFnPointer(proc("glDisable"), def_glDisable);
  glDisableVertexAttribArray = new Deno.UnsafeFnPointer(proc("glDisableVertexAttribArray"), def_glDisableVertexAttribArray);
  glDrawArrays = new Deno.UnsafeFnPointer(proc("glDrawArrays"), def_glDrawArrays);
  glDrawElements = new Deno.UnsafeFnPointer(proc("glDrawElements"), def_glDrawElements);
  glEnable = new Deno.UnsafeFnPointer(proc("glEnable"), def_glEnable);
  glEnableVertexAttribArray = new Deno.UnsafeFnPointer(proc("glEnableVertexAttribArray"), def_glEnableVertexAttribArray);
  glFinish = new Deno.UnsafeFnPointer(proc("glFinish"), def_glFinish);
  glFlush = new Deno.UnsafeFnPointer(proc("glFlush"), def_glFlush);
  glFramebufferRenderbuffer = new Deno.UnsafeFnPointer(proc("glFramebufferRenderbuffer"), def_glFramebufferRenderbuffer);
  glFramebufferTexture2D = new Deno.UnsafeFnPointer(proc("glFramebufferTexture2D"), def_glFramebufferTexture2D);
  glFrontFace = new Deno.UnsafeFnPointer(proc("glFrontFace"), def_glFrontFace);
  glGenBuffers = new Deno.UnsafeFnPointer(proc("glGenBuffers"), def_glGenBuffers);
  glGenerateMipmap = new Deno.UnsafeFnPointer(proc("glGenerateMipmap"), def_glGenerateMipmap);
  glGenFramebuffers = new Deno.UnsafeFnPointer(proc("glGenFramebuffers"), def_glGenFramebuffers);
  glGenRenderbuffers = new Deno.UnsafeFnPointer(proc("glGenRenderbuffers"), def_glGenRenderbuffers);
  glGenTextures = new Deno.UnsafeFnPointer(proc("glGenTextures"), def_glGenTextures);
  glGetActiveAttrib = new Deno.UnsafeFnPointer(proc("glGetActiveAttrib"), def_glGetActiveAttrib);
  glGetActiveUniform = new Deno.UnsafeFnPointer(proc("glGetActiveUniform"), def_glGetActiveUniform);
  glGetAttachedShaders = new Deno.UnsafeFnPointer(proc("glGetAttachedShaders"), def_glGetAttachedShaders);
  glGetAttribLocation = new Deno.UnsafeFnPointer(proc("glGetAttribLocation"), def_glGetAttribLocation);
  glGetBooleanv = new Deno.UnsafeFnPointer(proc("glGetBooleanv"), def_glGetBooleanv);
  glGetBufferParameteriv = new Deno.UnsafeFnPointer(proc("glGetBufferParameteriv"), def_glGetBufferParameteriv);
  glGetError = new Deno.UnsafeFnPointer(proc("glGetError"), def_glGetError);
  glGetFloatv = new Deno.UnsafeFnPointer(proc("glGetFloatv"), def_glGetFloatv);
  glGetFramebufferAttachmentParameteriv = new Deno.UnsafeFnPointer(proc("glGetFramebufferAttachmentParameteriv"), def_glGetFramebufferAttachmentParameteriv);
  glGetIntegerv = new Deno.UnsafeFnPointer(proc("glGetIntegerv"), def_glGetIntegerv);
  glGetProgramiv = new Deno.UnsafeFnPointer(proc("glGetProgramiv"), def_glGetProgramiv);
  glGetProgramInfoLog = new Deno.UnsafeFnPointer(proc("glGetProgramInfoLog"), def_glGetProgramInfoLog);
  glGetRenderbufferParameteriv = new Deno.UnsafeFnPointer(proc("glGetRenderbufferParameteriv"), def_glGetRenderbufferParameteriv);
  glGetShaderiv = new Deno.UnsafeFnPointer(proc("glGetShaderiv"), def_glGetShaderiv);
  glGetShaderInfoLog = new Deno.UnsafeFnPointer(proc("glGetShaderInfoLog"), def_glGetShaderInfoLog);
  glGetShaderPrecisionFormat = new Deno.UnsafeFnPointer(proc("glGetShaderPrecisionFormat"), def_glGetShaderPrecisionFormat);
  glGetShaderSource = new Deno.UnsafeFnPointer(proc("glGetShaderSource"), def_glGetShaderSource);
  glGetString = new Deno.UnsafeFnPointer(proc("glGetString"), def_glGetString);
  glGetTexParameterfv = new Deno.UnsafeFnPointer(proc("glGetTexParameterfv"), def_glGetTexParameterfv);
  glGetTexParameteriv = new Deno.UnsafeFnPointer(proc("glGetTexParameteriv"), def_glGetTexParameteriv);
  glGetUniformfv = new Deno.UnsafeFnPointer(proc("glGetUniformfv"), def_glGetUniformfv);
  glGetUniformiv = new Deno.UnsafeFnPointer(proc("glGetUniformiv"), def_glGetUniformiv);
  glGetUniformLocation = new Deno.UnsafeFnPointer(proc("glGetUniformLocation"), def_glGetUniformLocation);
  glGetVertexAttribfv = new Deno.UnsafeFnPointer(proc("glGetVertexAttribfv"), def_glGetVertexAttribfv);
  glGetVertexAttribiv = new Deno.UnsafeFnPointer(proc("glGetVertexAttribiv"), def_glGetVertexAttribiv);
  glGetVertexAttribPointerv = new Deno.UnsafeFnPointer(proc("glGetVertexAttribPointerv"), def_glGetVertexAttribPointerv);
  glHint = new Deno.UnsafeFnPointer(proc("glHint"), def_glHint);
  glIsBuffer = new Deno.UnsafeFnPointer(proc("glIsBuffer"), def_glIsBuffer);
  glIsEnabled = new Deno.UnsafeFnPointer(proc("glIsEnabled"), def_glIsEnabled);
  glIsFramebuffer = new Deno.UnsafeFnPointer(proc("glIsFramebuffer"), def_glIsFramebuffer);
  glIsProgram = new Deno.UnsafeFnPointer(proc("glIsProgram"), def_glIsProgram);
  glIsRenderbuffer = new Deno.UnsafeFnPointer(proc("glIsRenderbuffer"), def_glIsRenderbuffer);
  glIsShader = new Deno.UnsafeFnPointer(proc("glIsShader"), def_glIsShader);
  glIsTexture = new Deno.UnsafeFnPointer(proc("glIsTexture"), def_glIsTexture);
  glLineWidth = new Deno.UnsafeFnPointer(proc("glLineWidth"), def_glLineWidth);
  glLinkProgram = new Deno.UnsafeFnPointer(proc("glLinkProgram"), def_glLinkProgram);
  glPixelStorei = new Deno.UnsafeFnPointer(proc("glPixelStorei"), def_glPixelStorei);
  glPolygonOffset = new Deno.UnsafeFnPointer(proc("glPolygonOffset"), def_glPolygonOffset);
  glReadPixels = new Deno.UnsafeFnPointer(proc("glReadPixels"), def_glReadPixels);
  glReleaseShaderCompiler = new Deno.UnsafeFnPointer(proc("glReleaseShaderCompiler"), def_glReleaseShaderCompiler);
  glRenderbufferStorage = new Deno.UnsafeFnPointer(proc("glRenderbufferStorage"), def_glRenderbufferStorage);
  glSampleCoverage = new Deno.UnsafeFnPointer(proc("glSampleCoverage"), def_glSampleCoverage);
  glScissor = new Deno.UnsafeFnPointer(proc("glScissor"), def_glScissor);
  glShaderBinary = new Deno.UnsafeFnPointer(proc("glShaderBinary"), def_glShaderBinary);
  glShaderSource = new Deno.UnsafeFnPointer(proc("glShaderSource"), def_glShaderSource);
  glStencilFunc = new Deno.UnsafeFnPointer(proc("glStencilFunc"), def_glStencilFunc);
  glStencilFuncSeparate = new Deno.UnsafeFnPointer(proc("glStencilFuncSeparate"), def_glStencilFuncSeparate);
  glStencilMask = new Deno.UnsafeFnPointer(proc("glStencilMask"), def_glStencilMask);
  glStencilMaskSeparate = new Deno.UnsafeFnPointer(proc("glStencilMaskSeparate"), def_glStencilMaskSeparate);
  glStencilOp = new Deno.UnsafeFnPointer(proc("glStencilOp"), def_glStencilOp);
  glStencilOpSeparate = new Deno.UnsafeFnPointer(proc("glStencilOpSeparate"), def_glStencilOpSeparate);
  glTexImage2D = new Deno.UnsafeFnPointer(proc("glTexImage2D"), def_glTexImage2D);
  glTexParameterf = new Deno.UnsafeFnPointer(proc("glTexParameterf"), def_glTexParameterf);
  glTexParameterfv = new Deno.UnsafeFnPointer(proc("glTexParameterfv"), def_glTexParameterfv);
  glTexParameteri = new Deno.UnsafeFnPointer(proc("glTexParameteri"), def_glTexParameteri);
  glTexParameteriv = new Deno.UnsafeFnPointer(proc("glTexParameteriv"), def_glTexParameteriv);
  glTexSubImage2D = new Deno.UnsafeFnPointer(proc("glTexSubImage2D"), def_glTexSubImage2D);
  glUniform1f = new Deno.UnsafeFnPointer(proc("glUniform1f"), def_glUniform1f);
  glUniform1fv = new Deno.UnsafeFnPointer(proc("glUniform1fv"), def_glUniform1fv);
  glUniform1i = new Deno.UnsafeFnPointer(proc("glUniform1i"), def_glUniform1i);
  glUniform1iv = new Deno.UnsafeFnPointer(proc("glUniform1iv"), def_glUniform1iv);
  glUniform2f = new Deno.UnsafeFnPointer(proc("glUniform2f"), def_glUniform2f);
  glUniform2fv = new Deno.UnsafeFnPointer(proc("glUniform2fv"), def_glUniform2fv);
  glUniform2i = new Deno.UnsafeFnPointer(proc("glUniform2i"), def_glUniform2i);
  glUniform2iv = new Deno.UnsafeFnPointer(proc("glUniform2iv"), def_glUniform2iv);
  glUniform3f = new Deno.UnsafeFnPointer(proc("glUniform3f"), def_glUniform3f);
  glUniform3fv = new Deno.UnsafeFnPointer(proc("glUniform3fv"), def_glUniform3fv);
  glUniform3i = new Deno.UnsafeFnPointer(proc("glUniform3i"), def_glUniform3i);
  glUniform3iv = new Deno.UnsafeFnPointer(proc("glUniform3iv"), def_glUniform3iv);
  glUniform4f = new Deno.UnsafeFnPointer(proc("glUniform4f"), def_glUniform4f);
  glUniform4fv = new Deno.UnsafeFnPointer(proc("glUniform4fv"), def_glUniform4fv);
  glUniform4i = new Deno.UnsafeFnPointer(proc("glUniform4i"), def_glUniform4i);
  glUniform4iv = new Deno.UnsafeFnPointer(proc("glUniform4iv"), def_glUniform4iv);
  glUniformMatrix2fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix2fv"), def_glUniformMatrix2fv);
  glUniformMatrix3fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix3fv"), def_glUniformMatrix3fv);
  glUniformMatrix4fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix4fv"), def_glUniformMatrix4fv);
  glUseProgram = new Deno.UnsafeFnPointer(proc("glUseProgram"), def_glUseProgram);
  glValidateProgram = new Deno.UnsafeFnPointer(proc("glValidateProgram"), def_glValidateProgram);
  glVertexAttrib1f = new Deno.UnsafeFnPointer(proc("glVertexAttrib1f"), def_glVertexAttrib1f);
  glVertexAttrib1fv = new Deno.UnsafeFnPointer(proc("glVertexAttrib1fv"), def_glVertexAttrib1fv);
  glVertexAttrib2f = new Deno.UnsafeFnPointer(proc("glVertexAttrib2f"), def_glVertexAttrib2f);
  glVertexAttrib2fv = new Deno.UnsafeFnPointer(proc("glVertexAttrib2fv"), def_glVertexAttrib2fv);
  glVertexAttrib3f = new Deno.UnsafeFnPointer(proc("glVertexAttrib3f"), def_glVertexAttrib3f);
  glVertexAttrib3fv = new Deno.UnsafeFnPointer(proc("glVertexAttrib3fv"), def_glVertexAttrib3fv);
  glVertexAttrib4f = new Deno.UnsafeFnPointer(proc("glVertexAttrib4f"), def_glVertexAttrib4f);
  glVertexAttrib4fv = new Deno.UnsafeFnPointer(proc("glVertexAttrib4fv"), def_glVertexAttrib4fv);
  glVertexAttribPointer = new Deno.UnsafeFnPointer(proc("glVertexAttribPointer"), def_glVertexAttribPointer);
  glViewport = new Deno.UnsafeFnPointer(proc("glViewport"), def_glViewport);
  glReadBuffer = new Deno.UnsafeFnPointer(proc("glReadBuffer"), def_glReadBuffer);
  glDrawRangeElements = new Deno.UnsafeFnPointer(proc("glDrawRangeElements"), def_glDrawRangeElements);
  glTexImage3D = new Deno.UnsafeFnPointer(proc("glTexImage3D"), def_glTexImage3D);
  glTexSubImage3D = new Deno.UnsafeFnPointer(proc("glTexSubImage3D"), def_glTexSubImage3D);
  glCopyTexSubImage3D = new Deno.UnsafeFnPointer(proc("glCopyTexSubImage3D"), def_glCopyTexSubImage3D);
  glCompressedTexImage3D = new Deno.UnsafeFnPointer(proc("glCompressedTexImage3D"), def_glCompressedTexImage3D);
  glCompressedTexSubImage3D = new Deno.UnsafeFnPointer(proc("glCompressedTexSubImage3D"), def_glCompressedTexSubImage3D);
  glGenQueries = new Deno.UnsafeFnPointer(proc("glGenQueries"), def_glGenQueries);
  glDeleteQueries = new Deno.UnsafeFnPointer(proc("glDeleteQueries"), def_glDeleteQueries);
  glIsQuery = new Deno.UnsafeFnPointer(proc("glIsQuery"), def_glIsQuery);
  glBeginQuery = new Deno.UnsafeFnPointer(proc("glBeginQuery"), def_glBeginQuery);
  glEndQuery = new Deno.UnsafeFnPointer(proc("glEndQuery"), def_glEndQuery);
  glGetQueryiv = new Deno.UnsafeFnPointer(proc("glGetQueryiv"), def_glGetQueryiv);
  glGetQueryObjectuiv = new Deno.UnsafeFnPointer(proc("glGetQueryObjectuiv"), def_glGetQueryObjectuiv);
  glUnmapBuffer = new Deno.UnsafeFnPointer(proc("glUnmapBuffer"), def_glUnmapBuffer);
  glGetBufferPointerv = new Deno.UnsafeFnPointer(proc("glGetBufferPointerv"), def_glGetBufferPointerv);
  glDrawBuffers = new Deno.UnsafeFnPointer(proc("glDrawBuffers"), def_glDrawBuffers);
  glUniformMatrix2x3fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix2x3fv"), def_glUniformMatrix2x3fv);
  glUniformMatrix3x2fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix3x2fv"), def_glUniformMatrix3x2fv);
  glUniformMatrix2x4fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix2x4fv"), def_glUniformMatrix2x4fv);
  glUniformMatrix4x2fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix4x2fv"), def_glUniformMatrix4x2fv);
  glUniformMatrix3x4fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix3x4fv"), def_glUniformMatrix3x4fv);
  glUniformMatrix4x3fv = new Deno.UnsafeFnPointer(proc("glUniformMatrix4x3fv"), def_glUniformMatrix4x3fv);
  glBlitFramebuffer = new Deno.UnsafeFnPointer(proc("glBlitFramebuffer"), def_glBlitFramebuffer);
  glRenderbufferStorageMultisample = new Deno.UnsafeFnPointer(proc("glRenderbufferStorageMultisample"), def_glRenderbufferStorageMultisample);
  glFramebufferTextureLayer = new Deno.UnsafeFnPointer(proc("glFramebufferTextureLayer"), def_glFramebufferTextureLayer);
  glMapBufferRange = new Deno.UnsafeFnPointer(proc("glMapBufferRange"), def_glMapBufferRange);
  glFlushMappedBufferRange = new Deno.UnsafeFnPointer(proc("glFlushMappedBufferRange"), def_glFlushMappedBufferRange);
  glBindVertexArray = new Deno.UnsafeFnPointer(proc("glBindVertexArray"), def_glBindVertexArray);
  glDeleteVertexArrays = new Deno.UnsafeFnPointer(proc("glDeleteVertexArrays"), def_glDeleteVertexArrays);
  glGenVertexArrays = new Deno.UnsafeFnPointer(proc("glGenVertexArrays"), def_glGenVertexArrays);
  glIsVertexArray = new Deno.UnsafeFnPointer(proc("glIsVertexArray"), def_glIsVertexArray);
  glGetIntegeri_v = new Deno.UnsafeFnPointer(proc("glGetIntegeri_v"), def_glGetIntegeri_v);
  glBeginTransformFeedback = new Deno.UnsafeFnPointer(proc("glBeginTransformFeedback"), def_glBeginTransformFeedback);
  glEndTransformFeedback = new Deno.UnsafeFnPointer(proc("glEndTransformFeedback"), def_glEndTransformFeedback);
  glBindBufferRange = new Deno.UnsafeFnPointer(proc("glBindBufferRange"), def_glBindBufferRange);
  glBindBufferBase = new Deno.UnsafeFnPointer(proc("glBindBufferBase"), def_glBindBufferBase);
  glTransformFeedbackVaryings = new Deno.UnsafeFnPointer(proc("glTransformFeedbackVaryings"), def_glTransformFeedbackVaryings);
  glGetTransformFeedbackVarying = new Deno.UnsafeFnPointer(proc("glGetTransformFeedbackVarying"), def_glGetTransformFeedbackVarying);
  glVertexAttribIPointer = new Deno.UnsafeFnPointer(proc("glVertexAttribIPointer"), def_glVertexAttribIPointer);
  glGetVertexAttribIiv = new Deno.UnsafeFnPointer(proc("glGetVertexAttribIiv"), def_glGetVertexAttribIiv);
  glGetVertexAttribIuiv = new Deno.UnsafeFnPointer(proc("glGetVertexAttribIuiv"), def_glGetVertexAttribIuiv);
  glVertexAttribI4i = new Deno.UnsafeFnPointer(proc("glVertexAttribI4i"), def_glVertexAttribI4i);
  glVertexAttribI4ui = new Deno.UnsafeFnPointer(proc("glVertexAttribI4ui"), def_glVertexAttribI4ui);
  glVertexAttribI4iv = new Deno.UnsafeFnPointer(proc("glVertexAttribI4iv"), def_glVertexAttribI4iv);
  glVertexAttribI4uiv = new Deno.UnsafeFnPointer(proc("glVertexAttribI4uiv"), def_glVertexAttribI4uiv);
  glGetUniformuiv = new Deno.UnsafeFnPointer(proc("glGetUniformuiv"), def_glGetUniformuiv);
  glGetFragDataLocation = new Deno.UnsafeFnPointer(proc("glGetFragDataLocation"), def_glGetFragDataLocation);
  glUniform1ui = new Deno.UnsafeFnPointer(proc("glUniform1ui"), def_glUniform1ui);
  glUniform2ui = new Deno.UnsafeFnPointer(proc("glUniform2ui"), def_glUniform2ui);
  glUniform3ui = new Deno.UnsafeFnPointer(proc("glUniform3ui"), def_glUniform3ui);
  glUniform4ui = new Deno.UnsafeFnPointer(proc("glUniform4ui"), def_glUniform4ui);
  glUniform1uiv = new Deno.UnsafeFnPointer(proc("glUniform1uiv"), def_glUniform1uiv);
  glUniform2uiv = new Deno.UnsafeFnPointer(proc("glUniform2uiv"), def_glUniform2uiv);
  glUniform3uiv = new Deno.UnsafeFnPointer(proc("glUniform3uiv"), def_glUniform3uiv);
  glUniform4uiv = new Deno.UnsafeFnPointer(proc("glUniform4uiv"), def_glUniform4uiv);
  glClearBufferiv = new Deno.UnsafeFnPointer(proc("glClearBufferiv"), def_glClearBufferiv);
  glClearBufferuiv = new Deno.UnsafeFnPointer(proc("glClearBufferuiv"), def_glClearBufferuiv);
  glClearBufferfv = new Deno.UnsafeFnPointer(proc("glClearBufferfv"), def_glClearBufferfv);
  glClearBufferfi = new Deno.UnsafeFnPointer(proc("glClearBufferfi"), def_glClearBufferfi);
  glGetStringi = new Deno.UnsafeFnPointer(proc("glGetStringi"), def_glGetStringi);
  glCopyBufferSubData = new Deno.UnsafeFnPointer(proc("glCopyBufferSubData"), def_glCopyBufferSubData);
  glGetUniformIndices = new Deno.UnsafeFnPointer(proc("glGetUniformIndices"), def_glGetUniformIndices);
  glGetActiveUniformsiv = new Deno.UnsafeFnPointer(proc("glGetActiveUniformsiv"), def_glGetActiveUniformsiv);
  glGetUniformBlockIndex = new Deno.UnsafeFnPointer(proc("glGetUniformBlockIndex"), def_glGetUniformBlockIndex);
  glGetActiveUniformBlockiv = new Deno.UnsafeFnPointer(proc("glGetActiveUniformBlockiv"), def_glGetActiveUniformBlockiv);
  glGetActiveUniformBlockName = new Deno.UnsafeFnPointer(proc("glGetActiveUniformBlockName"), def_glGetActiveUniformBlockName);
  glUniformBlockBinding = new Deno.UnsafeFnPointer(proc("glUniformBlockBinding"), def_glUniformBlockBinding);
  glDrawArraysInstanced = new Deno.UnsafeFnPointer(proc("glDrawArraysInstanced"), def_glDrawArraysInstanced);
  glDrawElementsInstanced = new Deno.UnsafeFnPointer(proc("glDrawElementsInstanced"), def_glDrawElementsInstanced);
  glFenceSync = new Deno.UnsafeFnPointer(proc("glFenceSync"), def_glFenceSync);
  glIsSync = new Deno.UnsafeFnPointer(proc("glIsSync"), def_glIsSync);
  glDeleteSync = new Deno.UnsafeFnPointer(proc("glDeleteSync"), def_glDeleteSync);
  glClientWaitSync = new Deno.UnsafeFnPointer(proc("glClientWaitSync"), def_glClientWaitSync);
  glWaitSync = new Deno.UnsafeFnPointer(proc("glWaitSync"), def_glWaitSync);
  glGetInteger64v = new Deno.UnsafeFnPointer(proc("glGetInteger64v"), def_glGetInteger64v);
  glGetSynciv = new Deno.UnsafeFnPointer(proc("glGetSynciv"), def_glGetSynciv);
  glGetInteger64i_v = new Deno.UnsafeFnPointer(proc("glGetInteger64i_v"), def_glGetInteger64i_v);
  glGetBufferParameteri64v = new Deno.UnsafeFnPointer(proc("glGetBufferParameteri64v"), def_glGetBufferParameteri64v);
  glGenSamplers = new Deno.UnsafeFnPointer(proc("glGenSamplers"), def_glGenSamplers);
  glDeleteSamplers = new Deno.UnsafeFnPointer(proc("glDeleteSamplers"), def_glDeleteSamplers);
  glIsSampler = new Deno.UnsafeFnPointer(proc("glIsSampler"), def_glIsSampler);
  glBindSampler = new Deno.UnsafeFnPointer(proc("glBindSampler"), def_glBindSampler);
  glSamplerParameteri = new Deno.UnsafeFnPointer(proc("glSamplerParameteri"), def_glSamplerParameteri);
  glSamplerParameteriv = new Deno.UnsafeFnPointer(proc("glSamplerParameteriv"), def_glSamplerParameteriv);
  glSamplerParameterf = new Deno.UnsafeFnPointer(proc("glSamplerParameterf"), def_glSamplerParameterf);
  glSamplerParameterfv = new Deno.UnsafeFnPointer(proc("glSamplerParameterfv"), def_glSamplerParameterfv);
  glGetSamplerParameteriv = new Deno.UnsafeFnPointer(proc("glGetSamplerParameteriv"), def_glGetSamplerParameteriv);
  glGetSamplerParameterfv = new Deno.UnsafeFnPointer(proc("glGetSamplerParameterfv"), def_glGetSamplerParameterfv);
  glVertexAttribDivisor = new Deno.UnsafeFnPointer(proc("glVertexAttribDivisor"), def_glVertexAttribDivisor);
  glBindTransformFeedback = new Deno.UnsafeFnPointer(proc("glBindTransformFeedback"), def_glBindTransformFeedback);
  glDeleteTransformFeedbacks = new Deno.UnsafeFnPointer(proc("glDeleteTransformFeedbacks"), def_glDeleteTransformFeedbacks);
  glGenTransformFeedbacks = new Deno.UnsafeFnPointer(proc("glGenTransformFeedbacks"), def_glGenTransformFeedbacks);
  glIsTransformFeedback = new Deno.UnsafeFnPointer(proc("glIsTransformFeedback"), def_glIsTransformFeedback);
  glPauseTransformFeedback = new Deno.UnsafeFnPointer(proc("glPauseTransformFeedback"), def_glPauseTransformFeedback);
  glResumeTransformFeedback = new Deno.UnsafeFnPointer(proc("glResumeTransformFeedback"), def_glResumeTransformFeedback);
  glGetProgramBinary = new Deno.UnsafeFnPointer(proc("glGetProgramBinary"), def_glGetProgramBinary);
  glProgramBinary = new Deno.UnsafeFnPointer(proc("glProgramBinary"), def_glProgramBinary);
  glProgramParameteri = new Deno.UnsafeFnPointer(proc("glProgramParameteri"), def_glProgramParameteri);
  glInvalidateFramebuffer = new Deno.UnsafeFnPointer(proc("glInvalidateFramebuffer"), def_glInvalidateFramebuffer);
  glInvalidateSubFramebuffer = new Deno.UnsafeFnPointer(proc("glInvalidateSubFramebuffer"), def_glInvalidateSubFramebuffer);
  glTexStorage2D = new Deno.UnsafeFnPointer(proc("glTexStorage2D"), def_glTexStorage2D);
  glTexStorage3D = new Deno.UnsafeFnPointer(proc("glTexStorage3D"), def_glTexStorage3D);
  glGetInternalformativ = new Deno.UnsafeFnPointer(proc("glGetInternalformativ"), def_glGetInternalformativ);
  glDispatchCompute = new Deno.UnsafeFnPointer(proc("glDispatchCompute"), def_glDispatchCompute);
  glDispatchComputeIndirect = new Deno.UnsafeFnPointer(proc("glDispatchComputeIndirect"), def_glDispatchComputeIndirect);
  glDrawArraysIndirect = new Deno.UnsafeFnPointer(proc("glDrawArraysIndirect"), def_glDrawArraysIndirect);
  glDrawElementsIndirect = new Deno.UnsafeFnPointer(proc("glDrawElementsIndirect"), def_glDrawElementsIndirect);
  glFramebufferParameteri = new Deno.UnsafeFnPointer(proc("glFramebufferParameteri"), def_glFramebufferParameteri);
  glGetFramebufferParameteriv = new Deno.UnsafeFnPointer(proc("glGetFramebufferParameteriv"), def_glGetFramebufferParameteriv);
  glGetProgramInterfaceiv = new Deno.UnsafeFnPointer(proc("glGetProgramInterfaceiv"), def_glGetProgramInterfaceiv);
  glGetProgramResourceIndex = new Deno.UnsafeFnPointer(proc("glGetProgramResourceIndex"), def_glGetProgramResourceIndex);
  glGetProgramResourceName = new Deno.UnsafeFnPointer(proc("glGetProgramResourceName"), def_glGetProgramResourceName);
  glGetProgramResourceiv = new Deno.UnsafeFnPointer(proc("glGetProgramResourceiv"), def_glGetProgramResourceiv);
  glGetProgramResourceLocation = new Deno.UnsafeFnPointer(proc("glGetProgramResourceLocation"), def_glGetProgramResourceLocation);
  glUseProgramStages = new Deno.UnsafeFnPointer(proc("glUseProgramStages"), def_glUseProgramStages);
  glActiveShaderProgram = new Deno.UnsafeFnPointer(proc("glActiveShaderProgram"), def_glActiveShaderProgram);
  glCreateShaderProgramv = new Deno.UnsafeFnPointer(proc("glCreateShaderProgramv"), def_glCreateShaderProgramv);
  glBindProgramPipeline = new Deno.UnsafeFnPointer(proc("glBindProgramPipeline"), def_glBindProgramPipeline);
  glDeleteProgramPipelines = new Deno.UnsafeFnPointer(proc("glDeleteProgramPipelines"), def_glDeleteProgramPipelines);
  glGenProgramPipelines = new Deno.UnsafeFnPointer(proc("glGenProgramPipelines"), def_glGenProgramPipelines);
  glIsProgramPipeline = new Deno.UnsafeFnPointer(proc("glIsProgramPipeline"), def_glIsProgramPipeline);
  glGetProgramPipelineiv = new Deno.UnsafeFnPointer(proc("glGetProgramPipelineiv"), def_glGetProgramPipelineiv);
  glProgramUniform1i = new Deno.UnsafeFnPointer(proc("glProgramUniform1i"), def_glProgramUniform1i);
  glProgramUniform2i = new Deno.UnsafeFnPointer(proc("glProgramUniform2i"), def_glProgramUniform2i);
  glProgramUniform3i = new Deno.UnsafeFnPointer(proc("glProgramUniform3i"), def_glProgramUniform3i);
  glProgramUniform4i = new Deno.UnsafeFnPointer(proc("glProgramUniform4i"), def_glProgramUniform4i);
  glProgramUniform1ui = new Deno.UnsafeFnPointer(proc("glProgramUniform1ui"), def_glProgramUniform1ui);
  glProgramUniform2ui = new Deno.UnsafeFnPointer(proc("glProgramUniform2ui"), def_glProgramUniform2ui);
  glProgramUniform3ui = new Deno.UnsafeFnPointer(proc("glProgramUniform3ui"), def_glProgramUniform3ui);
  glProgramUniform4ui = new Deno.UnsafeFnPointer(proc("glProgramUniform4ui"), def_glProgramUniform4ui);
  glProgramUniform1f = new Deno.UnsafeFnPointer(proc("glProgramUniform1f"), def_glProgramUniform1f);
  glProgramUniform2f = new Deno.UnsafeFnPointer(proc("glProgramUniform2f"), def_glProgramUniform2f);
  glProgramUniform3f = new Deno.UnsafeFnPointer(proc("glProgramUniform3f"), def_glProgramUniform3f);
  glProgramUniform4f = new Deno.UnsafeFnPointer(proc("glProgramUniform4f"), def_glProgramUniform4f);
  glProgramUniform1iv = new Deno.UnsafeFnPointer(proc("glProgramUniform1iv"), def_glProgramUniform1iv);
  glProgramUniform2iv = new Deno.UnsafeFnPointer(proc("glProgramUniform2iv"), def_glProgramUniform2iv);
  glProgramUniform3iv = new Deno.UnsafeFnPointer(proc("glProgramUniform3iv"), def_glProgramUniform3iv);
  glProgramUniform4iv = new Deno.UnsafeFnPointer(proc("glProgramUniform4iv"), def_glProgramUniform4iv);
  glProgramUniform1uiv = new Deno.UnsafeFnPointer(proc("glProgramUniform1uiv"), def_glProgramUniform1uiv);
  glProgramUniform2uiv = new Deno.UnsafeFnPointer(proc("glProgramUniform2uiv"), def_glProgramUniform2uiv);
  glProgramUniform3uiv = new Deno.UnsafeFnPointer(proc("glProgramUniform3uiv"), def_glProgramUniform3uiv);
  glProgramUniform4uiv = new Deno.UnsafeFnPointer(proc("glProgramUniform4uiv"), def_glProgramUniform4uiv);
  glProgramUniform1fv = new Deno.UnsafeFnPointer(proc("glProgramUniform1fv"), def_glProgramUniform1fv);
  glProgramUniform2fv = new Deno.UnsafeFnPointer(proc("glProgramUniform2fv"), def_glProgramUniform2fv);
  glProgramUniform3fv = new Deno.UnsafeFnPointer(proc("glProgramUniform3fv"), def_glProgramUniform3fv);
  glProgramUniform4fv = new Deno.UnsafeFnPointer(proc("glProgramUniform4fv"), def_glProgramUniform4fv);
  glProgramUniformMatrix2fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix2fv"), def_glProgramUniformMatrix2fv);
  glProgramUniformMatrix3fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix3fv"), def_glProgramUniformMatrix3fv);
  glProgramUniformMatrix4fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix4fv"), def_glProgramUniformMatrix4fv);
  glProgramUniformMatrix2x3fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix2x3fv"), def_glProgramUniformMatrix2x3fv);
  glProgramUniformMatrix3x2fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix3x2fv"), def_glProgramUniformMatrix3x2fv);
  glProgramUniformMatrix2x4fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix2x4fv"), def_glProgramUniformMatrix2x4fv);
  glProgramUniformMatrix4x2fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix4x2fv"), def_glProgramUniformMatrix4x2fv);
  glProgramUniformMatrix3x4fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix3x4fv"), def_glProgramUniformMatrix3x4fv);
  glProgramUniformMatrix4x3fv = new Deno.UnsafeFnPointer(proc("glProgramUniformMatrix4x3fv"), def_glProgramUniformMatrix4x3fv);
  glValidateProgramPipeline = new Deno.UnsafeFnPointer(proc("glValidateProgramPipeline"), def_glValidateProgramPipeline);
  glGetProgramPipelineInfoLog = new Deno.UnsafeFnPointer(proc("glGetProgramPipelineInfoLog"), def_glGetProgramPipelineInfoLog);
  glBindImageTexture = new Deno.UnsafeFnPointer(proc("glBindImageTexture"), def_glBindImageTexture);
  glGetBooleani_v = new Deno.UnsafeFnPointer(proc("glGetBooleani_v"), def_glGetBooleani_v);
  glMemoryBarrier = new Deno.UnsafeFnPointer(proc("glMemoryBarrier"), def_glMemoryBarrier);
  glMemoryBarrierByRegion = new Deno.UnsafeFnPointer(proc("glMemoryBarrierByRegion"), def_glMemoryBarrierByRegion);
  glTexStorage2DMultisample = new Deno.UnsafeFnPointer(proc("glTexStorage2DMultisample"), def_glTexStorage2DMultisample);
  glGetMultisamplefv = new Deno.UnsafeFnPointer(proc("glGetMultisamplefv"), def_glGetMultisamplefv);
  glSampleMaski = new Deno.UnsafeFnPointer(proc("glSampleMaski"), def_glSampleMaski);
  glGetTexLevelParameteriv = new Deno.UnsafeFnPointer(proc("glGetTexLevelParameteriv"), def_glGetTexLevelParameteriv);
  glGetTexLevelParameterfv = new Deno.UnsafeFnPointer(proc("glGetTexLevelParameterfv"), def_glGetTexLevelParameterfv);
  glBindVertexBuffer = new Deno.UnsafeFnPointer(proc("glBindVertexBuffer"), def_glBindVertexBuffer);
  glVertexAttribFormat = new Deno.UnsafeFnPointer(proc("glVertexAttribFormat"), def_glVertexAttribFormat);
  glVertexAttribIFormat = new Deno.UnsafeFnPointer(proc("glVertexAttribIFormat"), def_glVertexAttribIFormat);
  glVertexAttribBinding = new Deno.UnsafeFnPointer(proc("glVertexAttribBinding"), def_glVertexAttribBinding);
  glVertexBindingDivisor = new Deno.UnsafeFnPointer(proc("glVertexBindingDivisor"), def_glVertexBindingDivisor);
  glBlendBarrier = new Deno.UnsafeFnPointer(proc("glBlendBarrier"), def_glBlendBarrier);
  glCopyImageSubData = new Deno.UnsafeFnPointer(proc("glCopyImageSubData"), def_glCopyImageSubData);
  glDebugMessageControl = new Deno.UnsafeFnPointer(proc("glDebugMessageControl"), def_glDebugMessageControl);
  glDebugMessageInsert = new Deno.UnsafeFnPointer(proc("glDebugMessageInsert"), def_glDebugMessageInsert);
  glDebugMessageCallback = new Deno.UnsafeFnPointer(proc("glDebugMessageCallback"), def_glDebugMessageCallback);
  glGetDebugMessageLog = new Deno.UnsafeFnPointer(proc("glGetDebugMessageLog"), def_glGetDebugMessageLog);
  glPushDebugGroup = new Deno.UnsafeFnPointer(proc("glPushDebugGroup"), def_glPushDebugGroup);
  glPopDebugGroup = new Deno.UnsafeFnPointer(proc("glPopDebugGroup"), def_glPopDebugGroup);
  glObjectLabel = new Deno.UnsafeFnPointer(proc("glObjectLabel"), def_glObjectLabel);
  glGetObjectLabel = new Deno.UnsafeFnPointer(proc("glGetObjectLabel"), def_glGetObjectLabel);
  glObjectPtrLabel = new Deno.UnsafeFnPointer(proc("glObjectPtrLabel"), def_glObjectPtrLabel);
  glGetObjectPtrLabel = new Deno.UnsafeFnPointer(proc("glGetObjectPtrLabel"), def_glGetObjectPtrLabel);
  glGetPointerv = new Deno.UnsafeFnPointer(proc("glGetPointerv"), def_glGetPointerv);
  glEnablei = new Deno.UnsafeFnPointer(proc("glEnablei"), def_glEnablei);
  glDisablei = new Deno.UnsafeFnPointer(proc("glDisablei"), def_glDisablei);
  glBlendEquationi = new Deno.UnsafeFnPointer(proc("glBlendEquationi"), def_glBlendEquationi);
  glBlendEquationSeparatei = new Deno.UnsafeFnPointer(proc("glBlendEquationSeparatei"), def_glBlendEquationSeparatei);
  glBlendFunci = new Deno.UnsafeFnPointer(proc("glBlendFunci"), def_glBlendFunci);
  glBlendFuncSeparatei = new Deno.UnsafeFnPointer(proc("glBlendFuncSeparatei"), def_glBlendFuncSeparatei);
  glColorMaski = new Deno.UnsafeFnPointer(proc("glColorMaski"), def_glColorMaski);
  glIsEnabledi = new Deno.UnsafeFnPointer(proc("glIsEnabledi"), def_glIsEnabledi);
  glDrawElementsBaseVertex = new Deno.UnsafeFnPointer(proc("glDrawElementsBaseVertex"), def_glDrawElementsBaseVertex);
  glDrawRangeElementsBaseVertex = new Deno.UnsafeFnPointer(proc("glDrawRangeElementsBaseVertex"), def_glDrawRangeElementsBaseVertex);
  glDrawElementsInstancedBaseVertex = new Deno.UnsafeFnPointer(proc("glDrawElementsInstancedBaseVertex"), def_glDrawElementsInstancedBaseVertex);
  glFramebufferTexture = new Deno.UnsafeFnPointer(proc("glFramebufferTexture"), def_glFramebufferTexture);
  glPrimitiveBoundingBox = new Deno.UnsafeFnPointer(proc("glPrimitiveBoundingBox"), def_glPrimitiveBoundingBox);
  glGetGraphicsResetStatus = new Deno.UnsafeFnPointer(proc("glGetGraphicsResetStatus"), def_glGetGraphicsResetStatus);
  glReadnPixels = new Deno.UnsafeFnPointer(proc("glReadnPixels"), def_glReadnPixels);
  glGetnUniformfv = new Deno.UnsafeFnPointer(proc("glGetnUniformfv"), def_glGetnUniformfv);
  glGetnUniformiv = new Deno.UnsafeFnPointer(proc("glGetnUniformiv"), def_glGetnUniformiv);
  glGetnUniformuiv = new Deno.UnsafeFnPointer(proc("glGetnUniformuiv"), def_glGetnUniformuiv);
  glMinSampleShading = new Deno.UnsafeFnPointer(proc("glMinSampleShading"), def_glMinSampleShading);
  glPatchParameteri = new Deno.UnsafeFnPointer(proc("glPatchParameteri"), def_glPatchParameteri);
  glTexParameterIiv = new Deno.UnsafeFnPointer(proc("glTexParameterIiv"), def_glTexParameterIiv);
  glTexParameterIuiv = new Deno.UnsafeFnPointer(proc("glTexParameterIuiv"), def_glTexParameterIuiv);
  glGetTexParameterIiv = new Deno.UnsafeFnPointer(proc("glGetTexParameterIiv"), def_glGetTexParameterIiv);
  glGetTexParameterIuiv = new Deno.UnsafeFnPointer(proc("glGetTexParameterIuiv"), def_glGetTexParameterIuiv);
  glSamplerParameterIiv = new Deno.UnsafeFnPointer(proc("glSamplerParameterIiv"), def_glSamplerParameterIiv);
  glSamplerParameterIuiv = new Deno.UnsafeFnPointer(proc("glSamplerParameterIuiv"), def_glSamplerParameterIuiv);
  glGetSamplerParameterIiv = new Deno.UnsafeFnPointer(proc("glGetSamplerParameterIiv"), def_glGetSamplerParameterIiv);
  glGetSamplerParameterIuiv = new Deno.UnsafeFnPointer(proc("glGetSamplerParameterIuiv"), def_glGetSamplerParameterIuiv);
  glTexBuffer = new Deno.UnsafeFnPointer(proc("glTexBuffer"), def_glTexBuffer);
  glTexBufferRange = new Deno.UnsafeFnPointer(proc("glTexBufferRange"), def_glTexBufferRange);
  glTexStorage3DMultisample = new Deno.UnsafeFnPointer(proc("glTexStorage3DMultisample"), def_glTexStorage3DMultisample);
}
