// deno-fmt-ignore-file
/// This file is generated by scripts/generator.ts

export type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;

// Typedefs

export const GLbyte = "i8";
export const GLclampf = "f32";
export const GLfixed = "i32";
export const GLshort = "i16";
export const GLushort = "u16";
export const GLvoid = "void";
export const GLsync = "pointer";
export const GLint64 = "i64";
export const GLuint64 = "u64";
export const GLenum = "u32";
export const GLuint = "u32";
export const GLchar = "i8";
export const GLfloat = "f32";
export const GLsizeiptr = "isize";
export const GLintptr = "isize";
export const GLbitfield = "u32";
export const GLint = "i32";
export const GLboolean = "u8";
export const GLsizei = "i32";
export const GLubyte = "u8";

// Constants

export const __gles2_gl2_h_ = 1;
export const GLES_PROTOTYPES = 1;
export const ES_VERSION_2_0 = 1;
export const DEPTH_BUFFER_BIT = 0x00000100;
export const STENCIL_BUFFER_BIT = 0x00000400;
export const COLOR_BUFFER_BIT = 0x00004000;
export const FALSE = 0;
export const TRUE = 1;
export const POINTS = 0x0000;
export const LINES = 0x0001;
export const LINE_LOOP = 0x0002;
export const LINE_STRIP = 0x0003;
export const TRIANGLES = 0x0004;
export const TRIANGLE_STRIP = 0x0005;
export const TRIANGLE_FAN = 0x0006;
export const ZERO = 0;
export const ONE = 1;
export const SRC_COLOR = 0x0300;
export const ONE_MINUS_SRC_COLOR = 0x0301;
export const SRC_ALPHA = 0x0302;
export const ONE_MINUS_SRC_ALPHA = 0x0303;
export const DST_ALPHA = 0x0304;
export const ONE_MINUS_DST_ALPHA = 0x0305;
export const DST_COLOR = 0x0306;
export const ONE_MINUS_DST_COLOR = 0x0307;
export const SRC_ALPHA_SATURATE = 0x0308;
export const FUNC_ADD = 0x8006;
export const BLEND_EQUATION = 0x8009;
export const BLEND_EQUATION_RGB = 0x8009;
export const BLEND_EQUATION_ALPHA = 0x883D;
export const FUNC_SUBTRACT = 0x800A;
export const FUNC_REVERSE_SUBTRACT = 0x800B;
export const BLEND_DST_RGB = 0x80C8;
export const BLEND_SRC_RGB = 0x80C9;
export const BLEND_DST_ALPHA = 0x80CA;
export const BLEND_SRC_ALPHA = 0x80CB;
export const CONSTANT_COLOR = 0x8001;
export const ONE_MINUS_CONSTANT_COLOR = 0x8002;
export const CONSTANT_ALPHA = 0x8003;
export const ONE_MINUS_CONSTANT_ALPHA = 0x8004;
export const BLEND_COLOR = 0x8005;
export const ARRAY_BUFFER = 0x8892;
export const ELEMENT_ARRAY_BUFFER = 0x8893;
export const ARRAY_BUFFER_BINDING = 0x8894;
export const ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
export const STREAM_DRAW = 0x88E0;
export const STATIC_DRAW = 0x88E4;
export const DYNAMIC_DRAW = 0x88E8;
export const BUFFER_SIZE = 0x8764;
export const BUFFER_USAGE = 0x8765;
export const CURRENT_VERTEX_ATTRIB = 0x8626;
export const FRONT = 0x0404;
export const BACK = 0x0405;
export const FRONT_AND_BACK = 0x0408;
export const TEXTURE_2D = 0x0DE1;
export const CULL_FACE = 0x0B44;
export const BLEND = 0x0BE2;
export const DITHER = 0x0BD0;
export const STENCIL_TEST = 0x0B90;
export const DEPTH_TEST = 0x0B71;
export const SCISSOR_TEST = 0x0C11;
export const POLYGON_OFFSET_FILL = 0x8037;
export const SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
export const SAMPLE_COVERAGE = 0x80A0;
export const NO_ERROR = 0;
export const INVALID_ENUM = 0x0500;
export const INVALID_VALUE = 0x0501;
export const INVALID_OPERATION = 0x0502;
export const OUT_OF_MEMORY = 0x0505;
export const CW = 0x0900;
export const CCW = 0x0901;
export const LINE_WIDTH = 0x0B21;
export const ALIASED_POINT_SIZE_RANGE = 0x846D;
export const ALIASED_LINE_WIDTH_RANGE = 0x846E;
export const CULL_FACE_MODE = 0x0B45;
export const FRONT_FACE = 0x0B46;
export const DEPTH_RANGE = 0x0B70;
export const DEPTH_WRITEMASK = 0x0B72;
export const DEPTH_CLEAR_VALUE = 0x0B73;
export const DEPTH_FUNC = 0x0B74;
export const STENCIL_CLEAR_VALUE = 0x0B91;
export const STENCIL_FUNC = 0x0B92;
export const STENCIL_FAIL = 0x0B94;
export const STENCIL_PASS_DEPTH_FAIL = 0x0B95;
export const STENCIL_PASS_DEPTH_PASS = 0x0B96;
export const STENCIL_REF = 0x0B97;
export const STENCIL_VALUE_MASK = 0x0B93;
export const STENCIL_WRITEMASK = 0x0B98;
export const STENCIL_BACK_FUNC = 0x8800;
export const STENCIL_BACK_FAIL = 0x8801;
export const STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
export const STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
export const STENCIL_BACK_REF = 0x8CA3;
export const STENCIL_BACK_VALUE_MASK = 0x8CA4;
export const STENCIL_BACK_WRITEMASK = 0x8CA5;
export const VIEWPORT = 0x0BA2;
export const SCISSOR_BOX = 0x0C10;
export const COLOR_CLEAR_VALUE = 0x0C22;
export const COLOR_WRITEMASK = 0x0C23;
export const UNPACK_ALIGNMENT = 0x0CF5;
export const PACK_ALIGNMENT = 0x0D05;
export const MAX_TEXTURE_SIZE = 0x0D33;
export const MAX_VIEWPORT_DIMS = 0x0D3A;
export const SUBPIXEL_BITS = 0x0D50;
export const RED_BITS = 0x0D52;
export const GREEN_BITS = 0x0D53;
export const BLUE_BITS = 0x0D54;
export const ALPHA_BITS = 0x0D55;
export const DEPTH_BITS = 0x0D56;
export const STENCIL_BITS = 0x0D57;
export const POLYGON_OFFSET_UNITS = 0x2A00;
export const POLYGON_OFFSET_FACTOR = 0x8038;
export const TEXTURE_BINDING_2D = 0x8069;
export const SAMPLE_BUFFERS = 0x80A8;
export const SAMPLES = 0x80A9;
export const SAMPLE_COVERAGE_VALUE = 0x80AA;
export const SAMPLE_COVERAGE_INVERT = 0x80AB;
export const NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
export const COMPRESSED_TEXTURE_FORMATS = 0x86A3;
export const DONT_CARE = 0x1100;
export const FASTEST = 0x1101;
export const NICEST = 0x1102;
export const GENERATE_MIPMAP_HINT = 0x8192;
export const BYTE = 0x1400;
export const UNSIGNED_BYTE = 0x1401;
export const SHORT = 0x1402;
export const UNSIGNED_SHORT = 0x1403;
export const INT = 0x1404;
export const UNSIGNED_INT = 0x1405;
export const FLOAT = 0x1406;
export const FIXED = 0x140C;
export const DEPTH_COMPONENT = 0x1902;
export const ALPHA = 0x1906;
export const RGB = 0x1907;
export const RGBA = 0x1908;
export const LUMINANCE = 0x1909;
export const LUMINANCE_ALPHA = 0x190A;
export const UNSIGNED_SHORT_4_4_4_4 = 0x8033;
export const UNSIGNED_SHORT_5_5_5_1 = 0x8034;
export const UNSIGNED_SHORT_5_6_5 = 0x8363;
export const FRAGMENT_SHADER = 0x8B30;
export const VERTEX_SHADER = 0x8B31;
export const MAX_VERTEX_ATTRIBS = 0x8869;
export const MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
export const MAX_VARYING_VECTORS = 0x8DFC;
export const MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
export const MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
export const MAX_TEXTURE_IMAGE_UNITS = 0x8872;
export const MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
export const SHADER_TYPE = 0x8B4F;
export const DELETE_STATUS = 0x8B80;
export const LINK_STATUS = 0x8B82;
export const VALIDATE_STATUS = 0x8B83;
export const ATTACHED_SHADERS = 0x8B85;
export const ACTIVE_UNIFORMS = 0x8B86;
export const ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
export const ACTIVE_ATTRIBUTES = 0x8B89;
export const ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
export const SHADING_LANGUAGE_VERSION = 0x8B8C;
export const CURRENT_PROGRAM = 0x8B8D;
export const NEVER = 0x0200;
export const LESS = 0x0201;
export const EQUAL = 0x0202;
export const LEQUAL = 0x0203;
export const GREATER = 0x0204;
export const NOTEQUAL = 0x0205;
export const GEQUAL = 0x0206;
export const ALWAYS = 0x0207;
export const KEEP = 0x1E00;
export const REPLACE = 0x1E01;
export const INCR = 0x1E02;
export const DECR = 0x1E03;
export const INVERT = 0x150A;
export const INCR_WRAP = 0x8507;
export const DECR_WRAP = 0x8508;
export const VENDOR = 0x1F00;
export const RENDERER = 0x1F01;
export const VERSION = 0x1F02;
export const EXTENSIONS = 0x1F03;
export const NEAREST = 0x2600;
export const LINEAR = 0x2601;
export const NEAREST_MIPMAP_NEAREST = 0x2700;
export const LINEAR_MIPMAP_NEAREST = 0x2701;
export const NEAREST_MIPMAP_LINEAR = 0x2702;
export const LINEAR_MIPMAP_LINEAR = 0x2703;
export const TEXTURE_MAG_FILTER = 0x2800;
export const TEXTURE_MIN_FILTER = 0x2801;
export const TEXTURE_WRAP_S = 0x2802;
export const TEXTURE_WRAP_T = 0x2803;
export const TEXTURE = 0x1702;
export const TEXTURE_CUBE_MAP = 0x8513;
export const TEXTURE_BINDING_CUBE_MAP = 0x8514;
export const TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
export const TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
export const TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
export const TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
export const TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
export const TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
export const MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
export const TEXTURE0 = 0x84C0;
export const TEXTURE1 = 0x84C1;
export const TEXTURE2 = 0x84C2;
export const TEXTURE3 = 0x84C3;
export const TEXTURE4 = 0x84C4;
export const TEXTURE5 = 0x84C5;
export const TEXTURE6 = 0x84C6;
export const TEXTURE7 = 0x84C7;
export const TEXTURE8 = 0x84C8;
export const TEXTURE9 = 0x84C9;
export const TEXTURE10 = 0x84CA;
export const TEXTURE11 = 0x84CB;
export const TEXTURE12 = 0x84CC;
export const TEXTURE13 = 0x84CD;
export const TEXTURE14 = 0x84CE;
export const TEXTURE15 = 0x84CF;
export const TEXTURE16 = 0x84D0;
export const TEXTURE17 = 0x84D1;
export const TEXTURE18 = 0x84D2;
export const TEXTURE19 = 0x84D3;
export const TEXTURE20 = 0x84D4;
export const TEXTURE21 = 0x84D5;
export const TEXTURE22 = 0x84D6;
export const TEXTURE23 = 0x84D7;
export const TEXTURE24 = 0x84D8;
export const TEXTURE25 = 0x84D9;
export const TEXTURE26 = 0x84DA;
export const TEXTURE27 = 0x84DB;
export const TEXTURE28 = 0x84DC;
export const TEXTURE29 = 0x84DD;
export const TEXTURE30 = 0x84DE;
export const TEXTURE31 = 0x84DF;
export const ACTIVE_TEXTURE = 0x84E0;
export const REPEAT = 0x2901;
export const CLAMP_TO_EDGE = 0x812F;
export const MIRRORED_REPEAT = 0x8370;
export const FLOAT_VEC2 = 0x8B50;
export const FLOAT_VEC3 = 0x8B51;
export const FLOAT_VEC4 = 0x8B52;
export const INT_VEC2 = 0x8B53;
export const INT_VEC3 = 0x8B54;
export const INT_VEC4 = 0x8B55;
export const BOOL = 0x8B56;
export const BOOL_VEC2 = 0x8B57;
export const BOOL_VEC3 = 0x8B58;
export const BOOL_VEC4 = 0x8B59;
export const FLOAT_MAT2 = 0x8B5A;
export const FLOAT_MAT3 = 0x8B5B;
export const FLOAT_MAT4 = 0x8B5C;
export const SAMPLER_2D = 0x8B5E;
export const SAMPLER_CUBE = 0x8B60;
export const VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
export const VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
export const VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
export const VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
export const VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
export const VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
export const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
export const IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
export const IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
export const COMPILE_STATUS = 0x8B81;
export const INFO_LOG_LENGTH = 0x8B84;
export const SHADER_SOURCE_LENGTH = 0x8B88;
export const SHADER_COMPILER = 0x8DFA;
export const SHADER_BINARY_FORMATS = 0x8DF8;
export const NUM_SHADER_BINARY_FORMATS = 0x8DF9;
export const LOW_FLOAT = 0x8DF0;
export const MEDIUM_FLOAT = 0x8DF1;
export const HIGH_FLOAT = 0x8DF2;
export const LOW_INT = 0x8DF3;
export const MEDIUM_INT = 0x8DF4;
export const HIGH_INT = 0x8DF5;
export const FRAMEBUFFER = 0x8D40;
export const RENDERBUFFER = 0x8D41;
export const RGBA4 = 0x8056;
export const RGB5_A1 = 0x8057;
export const RGB565 = 0x8D62;
export const DEPTH_COMPONENT16 = 0x81A5;
export const STENCIL_INDEX8 = 0x8D48;
export const RENDERBUFFER_WIDTH = 0x8D42;
export const RENDERBUFFER_HEIGHT = 0x8D43;
export const RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
export const RENDERBUFFER_RED_SIZE = 0x8D50;
export const RENDERBUFFER_GREEN_SIZE = 0x8D51;
export const RENDERBUFFER_BLUE_SIZE = 0x8D52;
export const RENDERBUFFER_ALPHA_SIZE = 0x8D53;
export const RENDERBUFFER_DEPTH_SIZE = 0x8D54;
export const RENDERBUFFER_STENCIL_SIZE = 0x8D55;
export const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
export const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
export const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
export const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
export const COLOR_ATTACHMENT0 = 0x8CE0;
export const DEPTH_ATTACHMENT = 0x8D00;
export const STENCIL_ATTACHMENT = 0x8D20;
export const NONE = 0;
export const FRAMEBUFFER_COMPLETE = 0x8CD5;
export const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
export const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
export const FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
export const FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
export const FRAMEBUFFER_BINDING = 0x8CA6;
export const RENDERBUFFER_BINDING = 0x8CA7;
export const MAX_RENDERBUFFER_SIZE = 0x84E8;
export const INVALID_FRAMEBUFFER_OPERATION = 0x0506;

// Callbacks

export const PFNGLACTIVETEXTUREPROC = {
  parameters: [
    /* texture: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLATTACHSHADERPROC = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDATTRIBLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLBINDBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDFRAMEBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* framebuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDRENDERBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBINDTEXTUREPROC = {
  parameters: [
    /* target: */ GLenum,
    /* texture: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLBLENDCOLORPROC = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDEQUATIONSEPARATEPROC = {
  parameters: [
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCPROC = {
  parameters: [
    /* sfactor: */ GLenum,
    /* dfactor: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBLENDFUNCSEPARATEPROC = {
  parameters: [
    /* sfactorRGB: */ GLenum,
    /* dfactorRGB: */ GLenum,
    /* sfactorAlpha: */ GLenum,
    /* dfactorAlpha: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBUFFERDATAPROC = {
  parameters: [
    /* target: */ GLenum,
    /* size: */ GLsizeiptr,
    /* data: */ "pointer",
    /* usage: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLBUFFERSUBDATAPROC = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCHECKFRAMEBUFFERSTATUSPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLenum,
} as const;

export const PFNGLCLEARPROC = {
  parameters: [
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

export const PFNGLCLEARCOLORPROC = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLCLEARDEPTHFPROC = {
  parameters: [
    /* d: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLCLEARSTENCILPROC = {
  parameters: [
    /* s: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLCOLORMASKPROC = {
  parameters: [
    /* red: */ GLboolean,
    /* green: */ GLboolean,
    /* blue: */ GLboolean,
    /* alpha: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLCOMPILESHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLCOPYTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLCOPYTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLCREATEPROGRAMPROC = {
  parameters: [
  ],
  result: GLuint,
} as const;

export const PFNGLCREATESHADERPROC = {
  parameters: [
    /* type: */ GLenum,
  ],
  result: GLuint,
} as const;

export const PFNGLCULLFACEPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDELETEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETEFRAMEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETERENDERBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDELETESHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDELETETEXTURESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLDEPTHFUNCPROC = {
  parameters: [
    /* func: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDEPTHMASKPROC = {
  parameters: [
    /* flag: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLDEPTHRANGEFPROC = {
  parameters: [
    /* n: */ GLfloat,
    /* f: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLDETACHSHADERPROC = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDISABLEPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLDISABLEVERTEXATTRIBARRAYPROC = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLDRAWARRAYSPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLDRAWELEMENTSPROC = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLENABLEPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLENABLEVERTEXATTRIBARRAYPROC = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLFINISHPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLFLUSHPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERRENDERBUFFERPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* renderbuffertarget: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLFRAMEBUFFERTEXTURE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* textarget: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLFRONTFACEPROC = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGENBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENERATEMIPMAPPROC = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLGENFRAMEBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENRENDERBUFFERSPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGENTEXTURESPROC = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEATTRIBPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* size: */ "pointer",
    /* type: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETACTIVEUNIFORMPROC = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* size: */ "pointer",
    /* type: */ "pointer",
    /* name: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETATTACHEDSHADERSPROC = {
  parameters: [
    /* program: */ GLuint,
    /* maxCount: */ GLsizei,
    /* count: */ "pointer",
    /* shaders: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETATTRIBLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLGETBOOLEANVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETBUFFERPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETERRORPROC = {
  parameters: [
  ],
  result: GLenum,
} as const;

export const PFNGLGETFLOATVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETINTEGERVPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETPROGRAMINFOLOGPROC = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* infoLog: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETRENDERBUFFERPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERIVPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERINFOLOGPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* infoLog: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERPRECISIONFORMATPROC = {
  parameters: [
    /* shadertype: */ GLenum,
    /* precisiontype: */ GLenum,
    /* range: */ "pointer",
    /* precision: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSHADERSOURCEPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "pointer",
    /* source: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETSTRINGPROC = {
  parameters: [
    /* name: */ GLenum,
  ],
  result: "pointer",
} as const;

export const PFNGLGETTEXPARAMETERFVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETTEXPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMFVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMIVPROC = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETUNIFORMLOCATIONPROC = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "pointer",
  ],
  result: GLint,
} as const;

export const PFNGLGETVERTEXATTRIBFVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBIVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLGETVERTEXATTRIBPOINTERVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLHINTPROC = {
  parameters: [
    /* target: */ GLenum,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLISBUFFERPROC = {
  parameters: [
    /* buffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISENABLEDPROC = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: GLboolean,
} as const;

export const PFNGLISFRAMEBUFFERPROC = {
  parameters: [
    /* framebuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISRENDERBUFFERPROC = {
  parameters: [
    /* renderbuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISSHADERPROC = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLISTEXTUREPROC = {
  parameters: [
    /* texture: */ GLuint,
  ],
  result: GLboolean,
} as const;

export const PFNGLLINEWIDTHPROC = {
  parameters: [
    /* width: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLLINKPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLPIXELSTOREIPROC = {
  parameters: [
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLPOLYGONOFFSETPROC = {
  parameters: [
    /* factor: */ GLfloat,
    /* units: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLREADPIXELSPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLRELEASESHADERCOMPILERPROC = {
  parameters: [
  ],
  result: "void",
} as const;

export const PFNGLRENDERBUFFERSTORAGEPROC = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSAMPLECOVERAGEPROC = {
  parameters: [
    /* value: */ GLfloat,
    /* invert: */ GLboolean,
  ],
  result: "void",
} as const;

export const PFNGLSCISSORPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSHADERBINARYPROC = {
  parameters: [
    /* count: */ GLsizei,
    /* shaders: */ "pointer",
    /* binaryFormat: */ GLenum,
    /* binary: */ "pointer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

export const PFNGLSHADERSOURCEPROC = {
  parameters: [
    /* shader: */ GLuint,
    /* count: */ GLsizei,
    /* const_string: */ "pointer",
    /* length: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLSTENCILFUNCPROC = {
  parameters: [
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILFUNCSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILMASKPROC = {
  parameters: [
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILMASKSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILOPPROC = {
  parameters: [
    /* fail: */ GLenum,
    /* zfail: */ GLenum,
    /* zpass: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLSTENCILOPSEPARATEPROC = {
  parameters: [
    /* face: */ GLenum,
    /* sfail: */ GLenum,
    /* dpfail: */ GLenum,
    /* dppass: */ GLenum,
  ],
  result: "void",
} as const;

export const PFNGLTEXIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERFPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERFVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLTEXPARAMETERIVPROC = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLTEXSUBIMAGE2DPROC = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM1IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM2IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM3IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4FPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4IPROC = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

export const PFNGLUNIFORM4IVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX2FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX3FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUNIFORMMATRIX4FVPROC = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLUSEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVALIDATEPROGRAMPROC = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB1FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB1FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB2FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB2FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB3FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB3FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB4FPROC = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
    /* w: */ GLfloat,
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIB4FVPROC = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVERTEXATTRIBPOINTERPROC = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* stride: */ GLsizei,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

export const PFNGLVIEWPORTPROC = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;


// Functions

const def_glActiveTexture = {
  parameters: [
    /* texture: */ GLenum,
  ],
  result: "void",
} as const;

let glActiveTexture!: Deno.UnsafeFnPointer<typeof def_glActiveTexture>;

export function ActiveTexture(
  texture: number,
): void {
  return glActiveTexture.call(
    texture,
  );
}

const def_glAttachShader = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glAttachShader!: Deno.UnsafeFnPointer<typeof def_glAttachShader>;

export function AttachShader(
  program: number,
  shader: number,
): void {
  return glAttachShader.call(
    program,
    shader,
  );
}

const def_glBindAttribLocation = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glBindAttribLocation!: Deno.UnsafeFnPointer<typeof def_glBindAttribLocation>;

export function BindAttribLocation(
  program: number,
  index: number,
  name: TypedArray,
): void {
  return glBindAttribLocation.call(
    program,
    index,
    name,
  );
}

const def_glBindBuffer = {
  parameters: [
    /* target: */ GLenum,
    /* buffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindBuffer!: Deno.UnsafeFnPointer<typeof def_glBindBuffer>;

export function BindBuffer(
  target: number,
  buffer: number,
): void {
  return glBindBuffer.call(
    target,
    buffer,
  );
}

const def_glBindFramebuffer = {
  parameters: [
    /* target: */ GLenum,
    /* framebuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindFramebuffer!: Deno.UnsafeFnPointer<typeof def_glBindFramebuffer>;

export function BindFramebuffer(
  target: number,
  framebuffer: number,
): void {
  return glBindFramebuffer.call(
    target,
    framebuffer,
  );
}

const def_glBindRenderbuffer = {
  parameters: [
    /* target: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glBindRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glBindRenderbuffer>;

export function BindRenderbuffer(
  target: number,
  renderbuffer: number,
): void {
  return glBindRenderbuffer.call(
    target,
    renderbuffer,
  );
}

const def_glBindTexture = {
  parameters: [
    /* target: */ GLenum,
    /* texture: */ GLuint,
  ],
  result: "void",
} as const;

let glBindTexture!: Deno.UnsafeFnPointer<typeof def_glBindTexture>;

export function BindTexture(
  target: number,
  texture: number,
): void {
  return glBindTexture.call(
    target,
    texture,
  );
}

const def_glBlendColor = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

let glBlendColor!: Deno.UnsafeFnPointer<typeof def_glBlendColor>;

export function BlendColor(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glBlendColor.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glBlendEquation = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquation!: Deno.UnsafeFnPointer<typeof def_glBlendEquation>;

export function BlendEquation(
  mode: number,
): void {
  return glBlendEquation.call(
    mode,
  );
}

const def_glBlendEquationSeparate = {
  parameters: [
    /* modeRGB: */ GLenum,
    /* modeAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendEquationSeparate!: Deno.UnsafeFnPointer<typeof def_glBlendEquationSeparate>;

export function BlendEquationSeparate(
  modeRGB: number,
  modeAlpha: number,
): void {
  return glBlendEquationSeparate.call(
    modeRGB,
    modeAlpha,
  );
}

const def_glBlendFunc = {
  parameters: [
    /* sfactor: */ GLenum,
    /* dfactor: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFunc!: Deno.UnsafeFnPointer<typeof def_glBlendFunc>;

export function BlendFunc(
  sfactor: number,
  dfactor: number,
): void {
  return glBlendFunc.call(
    sfactor,
    dfactor,
  );
}

const def_glBlendFuncSeparate = {
  parameters: [
    /* sfactorRGB: */ GLenum,
    /* dfactorRGB: */ GLenum,
    /* sfactorAlpha: */ GLenum,
    /* dfactorAlpha: */ GLenum,
  ],
  result: "void",
} as const;

let glBlendFuncSeparate!: Deno.UnsafeFnPointer<typeof def_glBlendFuncSeparate>;

export function BlendFuncSeparate(
  sfactorRGB: number,
  dfactorRGB: number,
  sfactorAlpha: number,
  dfactorAlpha: number,
): void {
  return glBlendFuncSeparate.call(
    sfactorRGB,
    dfactorRGB,
    sfactorAlpha,
    dfactorAlpha,
  );
}

const def_glBufferData = {
  parameters: [
    /* target: */ GLenum,
    /* size: */ GLsizeiptr,
    /* data: */ "buffer",
    /* usage: */ GLenum,
  ],
  result: "void",
} as const;

let glBufferData!: Deno.UnsafeFnPointer<typeof def_glBufferData>;

export function BufferData(
  target: number,
  size: number | bigint,
  data: TypedArray,
  usage: number,
): void {
  return glBufferData.call(
    target,
    size,
    data,
    usage,
  );
}

const def_glBufferSubData = {
  parameters: [
    /* target: */ GLenum,
    /* offset: */ GLintptr,
    /* size: */ GLsizeiptr,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

let glBufferSubData!: Deno.UnsafeFnPointer<typeof def_glBufferSubData>;

export function BufferSubData(
  target: number,
  offset: number | bigint,
  size: number | bigint,
  data: Deno.PointerValue,
): void {
  return glBufferSubData.call(
    target,
    offset,
    size,
    data,
  );
}

const def_glCheckFramebufferStatus = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: GLenum,
} as const;

let glCheckFramebufferStatus!: Deno.UnsafeFnPointer<typeof def_glCheckFramebufferStatus>;

export function CheckFramebufferStatus(
  target: number,
): number {
  return glCheckFramebufferStatus.call(
    target,
  );
}

const def_glClear = {
  parameters: [
    /* mask: */ GLbitfield,
  ],
  result: "void",
} as const;

let glClear!: Deno.UnsafeFnPointer<typeof def_glClear>;

export function Clear(
  mask: number,
): void {
  return glClear.call(
    mask,
  );
}

const def_glClearColor = {
  parameters: [
    /* red: */ GLfloat,
    /* green: */ GLfloat,
    /* blue: */ GLfloat,
    /* alpha: */ GLfloat,
  ],
  result: "void",
} as const;

let glClearColor!: Deno.UnsafeFnPointer<typeof def_glClearColor>;

export function ClearColor(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glClearColor.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glClearDepthf = {
  parameters: [
    /* d: */ GLfloat,
  ],
  result: "void",
} as const;

let glClearDepthf!: Deno.UnsafeFnPointer<typeof def_glClearDepthf>;

export function ClearDepthf(
  d: number,
): void {
  return glClearDepthf.call(
    d,
  );
}

const def_glClearStencil = {
  parameters: [
    /* s: */ GLint,
  ],
  result: "void",
} as const;

let glClearStencil!: Deno.UnsafeFnPointer<typeof def_glClearStencil>;

export function ClearStencil(
  s: number,
): void {
  return glClearStencil.call(
    s,
  );
}

const def_glColorMask = {
  parameters: [
    /* red: */ GLboolean,
    /* green: */ GLboolean,
    /* blue: */ GLboolean,
    /* alpha: */ GLboolean,
  ],
  result: "void",
} as const;

let glColorMask!: Deno.UnsafeFnPointer<typeof def_glColorMask>;

export function ColorMask(
  red: number,
  green: number,
  blue: number,
  alpha: number,
): void {
  return glColorMask.call(
    red,
    green,
    blue,
    alpha,
  );
}

const def_glCompileShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glCompileShader!: Deno.UnsafeFnPointer<typeof def_glCompileShader>;

export function CompileShader(
  shader: number,
): void {
  return glCompileShader.call(
    shader,
  );
}

const def_glCompressedTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

let glCompressedTexImage2D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexImage2D>;

export function CompressedTexImage2D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  border: number,
  imageSize: number,
  data: Deno.PointerValue,
): void {
  return glCompressedTexImage2D.call(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    imageSize,
    data,
  );
}

const def_glCompressedTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* imageSize: */ GLsizei,
    /* data: */ "pointer",
  ],
  result: "void",
} as const;

let glCompressedTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glCompressedTexSubImage2D>;

export function CompressedTexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  width: number,
  height: number,
  format: number,
  imageSize: number,
  data: Deno.PointerValue,
): void {
  return glCompressedTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    imageSize,
    data,
  );
}

const def_glCopyTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLenum,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
  ],
  result: "void",
} as const;

let glCopyTexImage2D!: Deno.UnsafeFnPointer<typeof def_glCopyTexImage2D>;

export function CopyTexImage2D(
  target: number,
  level: number,
  internalformat: number,
  x: number,
  y: number,
  width: number,
  height: number,
  border: number,
): void {
  return glCopyTexImage2D.call(
    target,
    level,
    internalformat,
    x,
    y,
    width,
    height,
    border,
  );
}

const def_glCopyTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glCopyTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glCopyTexSubImage2D>;

export function CopyTexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glCopyTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    x,
    y,
    width,
    height,
  );
}

const def_glCreateProgram = {
  parameters: [
  ],
  result: GLuint,
} as const;

let glCreateProgram!: Deno.UnsafeFnPointer<typeof def_glCreateProgram>;

export function CreateProgram(
): number {
  return glCreateProgram.call(
  );
}

const def_glCreateShader = {
  parameters: [
    /* type: */ GLenum,
  ],
  result: GLuint,
} as const;

let glCreateShader!: Deno.UnsafeFnPointer<typeof def_glCreateShader>;

export function CreateShader(
  type: number,
): number {
  return glCreateShader.call(
    type,
  );
}

const def_glCullFace = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glCullFace!: Deno.UnsafeFnPointer<typeof def_glCullFace>;

export function CullFace(
  mode: number,
): void {
  return glCullFace.call(
    mode,
  );
}

const def_glDeleteBuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteBuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteBuffers>;

export function DeleteBuffers(
  n: number,
  buffers: TypedArray,
): void {
  return glDeleteBuffers.call(
    n,
    buffers,
  );
}

const def_glDeleteFramebuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteFramebuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteFramebuffers>;

export function DeleteFramebuffers(
  n: number,
  framebuffers: TypedArray,
): void {
  return glDeleteFramebuffers.call(
    n,
    framebuffers,
  );
}

const def_glDeleteProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glDeleteProgram!: Deno.UnsafeFnPointer<typeof def_glDeleteProgram>;

export function DeleteProgram(
  program: number,
): void {
  return glDeleteProgram.call(
    program,
  );
}

const def_glDeleteRenderbuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteRenderbuffers!: Deno.UnsafeFnPointer<typeof def_glDeleteRenderbuffers>;

export function DeleteRenderbuffers(
  n: number,
  renderbuffers: TypedArray,
): void {
  return glDeleteRenderbuffers.call(
    n,
    renderbuffers,
  );
}

const def_glDeleteShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glDeleteShader!: Deno.UnsafeFnPointer<typeof def_glDeleteShader>;

export function DeleteShader(
  shader: number,
): void {
  return glDeleteShader.call(
    shader,
  );
}

const def_glDeleteTextures = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "buffer",
  ],
  result: "void",
} as const;

let glDeleteTextures!: Deno.UnsafeFnPointer<typeof def_glDeleteTextures>;

export function DeleteTextures(
  n: number,
  textures: TypedArray,
): void {
  return glDeleteTextures.call(
    n,
    textures,
  );
}

const def_glDepthFunc = {
  parameters: [
    /* func: */ GLenum,
  ],
  result: "void",
} as const;

let glDepthFunc!: Deno.UnsafeFnPointer<typeof def_glDepthFunc>;

export function DepthFunc(
  func: number,
): void {
  return glDepthFunc.call(
    func,
  );
}

const def_glDepthMask = {
  parameters: [
    /* flag: */ GLboolean,
  ],
  result: "void",
} as const;

let glDepthMask!: Deno.UnsafeFnPointer<typeof def_glDepthMask>;

export function DepthMask(
  flag: number,
): void {
  return glDepthMask.call(
    flag,
  );
}

const def_glDepthRangef = {
  parameters: [
    /* n: */ GLfloat,
    /* f: */ GLfloat,
  ],
  result: "void",
} as const;

let glDepthRangef!: Deno.UnsafeFnPointer<typeof def_glDepthRangef>;

export function DepthRangef(
  n: number,
  f: number,
): void {
  return glDepthRangef.call(
    n,
    f,
  );
}

const def_glDetachShader = {
  parameters: [
    /* program: */ GLuint,
    /* shader: */ GLuint,
  ],
  result: "void",
} as const;

let glDetachShader!: Deno.UnsafeFnPointer<typeof def_glDetachShader>;

export function DetachShader(
  program: number,
  shader: number,
): void {
  return glDetachShader.call(
    program,
    shader,
  );
}

const def_glDisable = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

let glDisable!: Deno.UnsafeFnPointer<typeof def_glDisable>;

export function Disable(
  cap: number,
): void {
  return glDisable.call(
    cap,
  );
}

const def_glDisableVertexAttribArray = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glDisableVertexAttribArray!: Deno.UnsafeFnPointer<typeof def_glDisableVertexAttribArray>;

export function DisableVertexAttribArray(
  index: number,
): void {
  return glDisableVertexAttribArray.call(
    index,
  );
}

const def_glDrawArrays = {
  parameters: [
    /* mode: */ GLenum,
    /* first: */ GLint,
    /* count: */ GLsizei,
  ],
  result: "void",
} as const;

let glDrawArrays!: Deno.UnsafeFnPointer<typeof def_glDrawArrays>;

export function DrawArrays(
  mode: number,
  first: number,
  count: number,
): void {
  return glDrawArrays.call(
    mode,
    first,
    count,
  );
}

const def_glDrawElements = {
  parameters: [
    /* mode: */ GLenum,
    /* count: */ GLsizei,
    /* type: */ GLenum,
    /* indices: */ "pointer",
  ],
  result: "void",
} as const;

let glDrawElements!: Deno.UnsafeFnPointer<typeof def_glDrawElements>;

export function DrawElements(
  mode: number,
  count: number,
  type: number,
  indices: Deno.PointerValue,
): void {
  return glDrawElements.call(
    mode,
    count,
    type,
    indices,
  );
}

const def_glEnable = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: "void",
} as const;

let glEnable!: Deno.UnsafeFnPointer<typeof def_glEnable>;

export function Enable(
  cap: number,
): void {
  return glEnable.call(
    cap,
  );
}

const def_glEnableVertexAttribArray = {
  parameters: [
    /* index: */ GLuint,
  ],
  result: "void",
} as const;

let glEnableVertexAttribArray!: Deno.UnsafeFnPointer<typeof def_glEnableVertexAttribArray>;

export function EnableVertexAttribArray(
  index: number,
): void {
  return glEnableVertexAttribArray.call(
    index,
  );
}

const def_glFinish = {
  parameters: [
  ],
  result: "void",
} as const;

let glFinish!: Deno.UnsafeFnPointer<typeof def_glFinish>;

export function Finish(
): void {
  return glFinish.call(
  );
}

const def_glFlush = {
  parameters: [
  ],
  result: "void",
} as const;

let glFlush!: Deno.UnsafeFnPointer<typeof def_glFlush>;

export function Flush(
): void {
  return glFlush.call(
  );
}

const def_glFramebufferRenderbuffer = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* renderbuffertarget: */ GLenum,
    /* renderbuffer: */ GLuint,
  ],
  result: "void",
} as const;

let glFramebufferRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glFramebufferRenderbuffer>;

export function FramebufferRenderbuffer(
  target: number,
  attachment: number,
  renderbuffertarget: number,
  renderbuffer: number,
): void {
  return glFramebufferRenderbuffer.call(
    target,
    attachment,
    renderbuffertarget,
    renderbuffer,
  );
}

const def_glFramebufferTexture2D = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* textarget: */ GLenum,
    /* texture: */ GLuint,
    /* level: */ GLint,
  ],
  result: "void",
} as const;

let glFramebufferTexture2D!: Deno.UnsafeFnPointer<typeof def_glFramebufferTexture2D>;

export function FramebufferTexture2D(
  target: number,
  attachment: number,
  textarget: number,
  texture: number,
  level: number,
): void {
  return glFramebufferTexture2D.call(
    target,
    attachment,
    textarget,
    texture,
    level,
  );
}

const def_glFrontFace = {
  parameters: [
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glFrontFace!: Deno.UnsafeFnPointer<typeof def_glFrontFace>;

export function FrontFace(
  mode: number,
): void {
  return glFrontFace.call(
    mode,
  );
}

const def_glGenBuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* buffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenBuffers!: Deno.UnsafeFnPointer<typeof def_glGenBuffers>;

export function GenBuffers(
  n: number,
  buffers: TypedArray,
): void {
  return glGenBuffers.call(
    n,
    buffers,
  );
}

const def_glGenerateMipmap = {
  parameters: [
    /* target: */ GLenum,
  ],
  result: "void",
} as const;

let glGenerateMipmap!: Deno.UnsafeFnPointer<typeof def_glGenerateMipmap>;

export function GenerateMipmap(
  target: number,
): void {
  return glGenerateMipmap.call(
    target,
  );
}

const def_glGenFramebuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* framebuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenFramebuffers!: Deno.UnsafeFnPointer<typeof def_glGenFramebuffers>;

export function GenFramebuffers(
  n: number,
  framebuffers: TypedArray,
): void {
  return glGenFramebuffers.call(
    n,
    framebuffers,
  );
}

const def_glGenRenderbuffers = {
  parameters: [
    /* n: */ GLsizei,
    /* renderbuffers: */ "buffer",
  ],
  result: "void",
} as const;

let glGenRenderbuffers!: Deno.UnsafeFnPointer<typeof def_glGenRenderbuffers>;

export function GenRenderbuffers(
  n: number,
  renderbuffers: TypedArray,
): void {
  return glGenRenderbuffers.call(
    n,
    renderbuffers,
  );
}

const def_glGenTextures = {
  parameters: [
    /* n: */ GLsizei,
    /* textures: */ "buffer",
  ],
  result: "void",
} as const;

let glGenTextures!: Deno.UnsafeFnPointer<typeof def_glGenTextures>;

export function GenTextures(
  n: number,
  textures: TypedArray,
): void {
  return glGenTextures.call(
    n,
    textures,
  );
}

const def_glGetActiveAttrib = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* size: */ "buffer",
    /* type: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveAttrib!: Deno.UnsafeFnPointer<typeof def_glGetActiveAttrib>;

export function GetActiveAttrib(
  program: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  size: TypedArray,
  type: TypedArray,
  name: TypedArray,
): void {
  return glGetActiveAttrib.call(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

const def_glGetActiveUniform = {
  parameters: [
    /* program: */ GLuint,
    /* index: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* size: */ "buffer",
    /* type: */ "buffer",
    /* name: */ "buffer",
  ],
  result: "void",
} as const;

let glGetActiveUniform!: Deno.UnsafeFnPointer<typeof def_glGetActiveUniform>;

export function GetActiveUniform(
  program: number,
  index: number,
  bufSize: number,
  length: TypedArray,
  size: TypedArray,
  type: TypedArray,
  name: TypedArray,
): void {
  return glGetActiveUniform.call(
    program,
    index,
    bufSize,
    length,
    size,
    type,
    name,
  );
}

const def_glGetAttachedShaders = {
  parameters: [
    /* program: */ GLuint,
    /* maxCount: */ GLsizei,
    /* count: */ "buffer",
    /* shaders: */ "buffer",
  ],
  result: "void",
} as const;

let glGetAttachedShaders!: Deno.UnsafeFnPointer<typeof def_glGetAttachedShaders>;

export function GetAttachedShaders(
  program: number,
  maxCount: number,
  count: TypedArray,
  shaders: TypedArray,
): void {
  return glGetAttachedShaders.call(
    program,
    maxCount,
    count,
    shaders,
  );
}

const def_glGetAttribLocation = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetAttribLocation!: Deno.UnsafeFnPointer<typeof def_glGetAttribLocation>;

export function GetAttribLocation(
  program: number,
  name: TypedArray,
): number {
  return glGetAttribLocation.call(
    program,
    name,
  );
}

const def_glGetBooleanv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBooleanv!: Deno.UnsafeFnPointer<typeof def_glGetBooleanv>;

export function GetBooleanv(
  pname: number,
  data: TypedArray,
): void {
  return glGetBooleanv.call(
    pname,
    data,
  );
}

const def_glGetBufferParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetBufferParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetBufferParameteriv>;

export function GetBufferParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetBufferParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetError = {
  parameters: [
  ],
  result: GLenum,
} as const;

let glGetError!: Deno.UnsafeFnPointer<typeof def_glGetError>;

export function GetError(
): number {
  return glGetError.call(
  );
}

const def_glGetFloatv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetFloatv!: Deno.UnsafeFnPointer<typeof def_glGetFloatv>;

export function GetFloatv(
  pname: number,
  data: TypedArray,
): void {
  return glGetFloatv.call(
    pname,
    data,
  );
}

const def_glGetFramebufferAttachmentParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* attachment: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetFramebufferAttachmentParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetFramebufferAttachmentParameteriv>;

export function GetFramebufferAttachmentParameteriv(
  target: number,
  attachment: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetFramebufferAttachmentParameteriv.call(
    target,
    attachment,
    pname,
    params,
  );
}

const def_glGetIntegerv = {
  parameters: [
    /* pname: */ GLenum,
    /* data: */ "buffer",
  ],
  result: "void",
} as const;

let glGetIntegerv!: Deno.UnsafeFnPointer<typeof def_glGetIntegerv>;

export function GetIntegerv(
  pname: number,
  data: TypedArray,
): void {
  return glGetIntegerv.call(
    pname,
    data,
  );
}

const def_glGetProgramiv = {
  parameters: [
    /* program: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramiv!: Deno.UnsafeFnPointer<typeof def_glGetProgramiv>;

export function GetProgramiv(
  program: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetProgramiv.call(
    program,
    pname,
    params,
  );
}

const def_glGetProgramInfoLog = {
  parameters: [
    /* program: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* infoLog: */ "buffer",
  ],
  result: "void",
} as const;

let glGetProgramInfoLog!: Deno.UnsafeFnPointer<typeof def_glGetProgramInfoLog>;

export function GetProgramInfoLog(
  program: number,
  bufSize: number,
  length: TypedArray,
  infoLog: TypedArray,
): void {
  return glGetProgramInfoLog.call(
    program,
    bufSize,
    length,
    infoLog,
  );
}

const def_glGetRenderbufferParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetRenderbufferParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetRenderbufferParameteriv>;

export function GetRenderbufferParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetRenderbufferParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetShaderiv = {
  parameters: [
    /* shader: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderiv!: Deno.UnsafeFnPointer<typeof def_glGetShaderiv>;

export function GetShaderiv(
  shader: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetShaderiv.call(
    shader,
    pname,
    params,
  );
}

const def_glGetShaderInfoLog = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* infoLog: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderInfoLog!: Deno.UnsafeFnPointer<typeof def_glGetShaderInfoLog>;

export function GetShaderInfoLog(
  shader: number,
  bufSize: number,
  length: TypedArray,
  infoLog: TypedArray,
): void {
  return glGetShaderInfoLog.call(
    shader,
    bufSize,
    length,
    infoLog,
  );
}

const def_glGetShaderPrecisionFormat = {
  parameters: [
    /* shadertype: */ GLenum,
    /* precisiontype: */ GLenum,
    /* range: */ "buffer",
    /* precision: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderPrecisionFormat!: Deno.UnsafeFnPointer<typeof def_glGetShaderPrecisionFormat>;

export function GetShaderPrecisionFormat(
  shadertype: number,
  precisiontype: number,
  range: TypedArray,
  precision: TypedArray,
): void {
  return glGetShaderPrecisionFormat.call(
    shadertype,
    precisiontype,
    range,
    precision,
  );
}

const def_glGetShaderSource = {
  parameters: [
    /* shader: */ GLuint,
    /* bufSize: */ GLsizei,
    /* length: */ "buffer",
    /* source: */ "buffer",
  ],
  result: "void",
} as const;

let glGetShaderSource!: Deno.UnsafeFnPointer<typeof def_glGetShaderSource>;

export function GetShaderSource(
  shader: number,
  bufSize: number,
  length: TypedArray,
  source: TypedArray,
): void {
  return glGetShaderSource.call(
    shader,
    bufSize,
    length,
    source,
  );
}

const def_glGetString = {
  parameters: [
    /* name: */ GLenum,
  ],
  result: "pointer",
} as const;

let glGetString!: Deno.UnsafeFnPointer<typeof def_glGetString>;

export function GetString(
  name: number,
): Deno.PointerValue {
  return glGetString.call(
    name,
  );
}

const def_glGetTexParameterfv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameterfv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameterfv>;

export function GetTexParameterfv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameterfv.call(
    target,
    pname,
    params,
  );
}

const def_glGetTexParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetTexParameteriv!: Deno.UnsafeFnPointer<typeof def_glGetTexParameteriv>;

export function GetTexParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetTexParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glGetUniformfv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformfv!: Deno.UnsafeFnPointer<typeof def_glGetUniformfv>;

export function GetUniformfv(
  program: number,
  location: number,
  params: TypedArray,
): void {
  return glGetUniformfv.call(
    program,
    location,
    params,
  );
}

const def_glGetUniformiv = {
  parameters: [
    /* program: */ GLuint,
    /* location: */ GLint,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetUniformiv!: Deno.UnsafeFnPointer<typeof def_glGetUniformiv>;

export function GetUniformiv(
  program: number,
  location: number,
  params: TypedArray,
): void {
  return glGetUniformiv.call(
    program,
    location,
    params,
  );
}

const def_glGetUniformLocation = {
  parameters: [
    /* program: */ GLuint,
    /* name: */ "buffer",
  ],
  result: GLint,
} as const;

let glGetUniformLocation!: Deno.UnsafeFnPointer<typeof def_glGetUniformLocation>;

export function GetUniformLocation(
  program: number,
  name: TypedArray,
): number {
  return glGetUniformLocation.call(
    program,
    name,
  );
}

const def_glGetVertexAttribfv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribfv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribfv>;

export function GetVertexAttribfv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribfv.call(
    index,
    pname,
    params,
  );
}

const def_glGetVertexAttribiv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glGetVertexAttribiv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribiv>;

export function GetVertexAttribiv(
  index: number,
  pname: number,
  params: TypedArray,
): void {
  return glGetVertexAttribiv.call(
    index,
    pname,
    params,
  );
}

const def_glGetVertexAttribPointerv = {
  parameters: [
    /* index: */ GLuint,
    /* pname: */ GLenum,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

let glGetVertexAttribPointerv!: Deno.UnsafeFnPointer<typeof def_glGetVertexAttribPointerv>;

export function GetVertexAttribPointerv(
  index: number,
  pname: number,
  pointer: Deno.PointerValue,
): void {
  return glGetVertexAttribPointerv.call(
    index,
    pname,
    pointer,
  );
}

const def_glHint = {
  parameters: [
    /* target: */ GLenum,
    /* mode: */ GLenum,
  ],
  result: "void",
} as const;

let glHint!: Deno.UnsafeFnPointer<typeof def_glHint>;

export function Hint(
  target: number,
  mode: number,
): void {
  return glHint.call(
    target,
    mode,
  );
}

const def_glIsBuffer = {
  parameters: [
    /* buffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsBuffer!: Deno.UnsafeFnPointer<typeof def_glIsBuffer>;

export function IsBuffer(
  buffer: number,
): number {
  return glIsBuffer.call(
    buffer,
  );
}

const def_glIsEnabled = {
  parameters: [
    /* cap: */ GLenum,
  ],
  result: GLboolean,
} as const;

let glIsEnabled!: Deno.UnsafeFnPointer<typeof def_glIsEnabled>;

export function IsEnabled(
  cap: number,
): number {
  return glIsEnabled.call(
    cap,
  );
}

const def_glIsFramebuffer = {
  parameters: [
    /* framebuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsFramebuffer!: Deno.UnsafeFnPointer<typeof def_glIsFramebuffer>;

export function IsFramebuffer(
  framebuffer: number,
): number {
  return glIsFramebuffer.call(
    framebuffer,
  );
}

const def_glIsProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsProgram!: Deno.UnsafeFnPointer<typeof def_glIsProgram>;

export function IsProgram(
  program: number,
): number {
  return glIsProgram.call(
    program,
  );
}

const def_glIsRenderbuffer = {
  parameters: [
    /* renderbuffer: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsRenderbuffer!: Deno.UnsafeFnPointer<typeof def_glIsRenderbuffer>;

export function IsRenderbuffer(
  renderbuffer: number,
): number {
  return glIsRenderbuffer.call(
    renderbuffer,
  );
}

const def_glIsShader = {
  parameters: [
    /* shader: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsShader!: Deno.UnsafeFnPointer<typeof def_glIsShader>;

export function IsShader(
  shader: number,
): number {
  return glIsShader.call(
    shader,
  );
}

const def_glIsTexture = {
  parameters: [
    /* texture: */ GLuint,
  ],
  result: GLboolean,
} as const;

let glIsTexture!: Deno.UnsafeFnPointer<typeof def_glIsTexture>;

export function IsTexture(
  texture: number,
): number {
  return glIsTexture.call(
    texture,
  );
}

const def_glLineWidth = {
  parameters: [
    /* width: */ GLfloat,
  ],
  result: "void",
} as const;

let glLineWidth!: Deno.UnsafeFnPointer<typeof def_glLineWidth>;

export function LineWidth(
  width: number,
): void {
  return glLineWidth.call(
    width,
  );
}

const def_glLinkProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glLinkProgram!: Deno.UnsafeFnPointer<typeof def_glLinkProgram>;

export function LinkProgram(
  program: number,
): void {
  return glLinkProgram.call(
    program,
  );
}

const def_glPixelStorei = {
  parameters: [
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glPixelStorei!: Deno.UnsafeFnPointer<typeof def_glPixelStorei>;

export function PixelStorei(
  pname: number,
  param: number,
): void {
  return glPixelStorei.call(
    pname,
    param,
  );
}

const def_glPolygonOffset = {
  parameters: [
    /* factor: */ GLfloat,
    /* units: */ GLfloat,
  ],
  result: "void",
} as const;

let glPolygonOffset!: Deno.UnsafeFnPointer<typeof def_glPolygonOffset>;

export function PolygonOffset(
  factor: number,
  units: number,
): void {
  return glPolygonOffset.call(
    factor,
    units,
  );
}

const def_glReadPixels = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

let glReadPixels!: Deno.UnsafeFnPointer<typeof def_glReadPixels>;

export function ReadPixels(
  x: number,
  y: number,
  width: number,
  height: number,
  format: number,
  type: number,
  pixels: Deno.PointerValue,
): void {
  return glReadPixels.call(
    x,
    y,
    width,
    height,
    format,
    type,
    pixels,
  );
}

const def_glReleaseShaderCompiler = {
  parameters: [
  ],
  result: "void",
} as const;

let glReleaseShaderCompiler!: Deno.UnsafeFnPointer<typeof def_glReleaseShaderCompiler>;

export function ReleaseShaderCompiler(
): void {
  return glReleaseShaderCompiler.call(
  );
}

const def_glRenderbufferStorage = {
  parameters: [
    /* target: */ GLenum,
    /* internalformat: */ GLenum,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glRenderbufferStorage!: Deno.UnsafeFnPointer<typeof def_glRenderbufferStorage>;

export function RenderbufferStorage(
  target: number,
  internalformat: number,
  width: number,
  height: number,
): void {
  return glRenderbufferStorage.call(
    target,
    internalformat,
    width,
    height,
  );
}

const def_glSampleCoverage = {
  parameters: [
    /* value: */ GLfloat,
    /* invert: */ GLboolean,
  ],
  result: "void",
} as const;

let glSampleCoverage!: Deno.UnsafeFnPointer<typeof def_glSampleCoverage>;

export function SampleCoverage(
  value: number,
  invert: number,
): void {
  return glSampleCoverage.call(
    value,
    invert,
  );
}

const def_glScissor = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glScissor!: Deno.UnsafeFnPointer<typeof def_glScissor>;

export function Scissor(
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glScissor.call(
    x,
    y,
    width,
    height,
  );
}

const def_glShaderBinary = {
  parameters: [
    /* count: */ GLsizei,
    /* shaders: */ "buffer",
    /* binaryFormat: */ GLenum,
    /* binary: */ "pointer",
    /* length: */ GLsizei,
  ],
  result: "void",
} as const;

let glShaderBinary!: Deno.UnsafeFnPointer<typeof def_glShaderBinary>;

export function ShaderBinary(
  count: number,
  shaders: TypedArray,
  binaryFormat: number,
  binary: Deno.PointerValue,
  length: number,
): void {
  return glShaderBinary.call(
    count,
    shaders,
    binaryFormat,
    binary,
    length,
  );
}

const def_glShaderSource = {
  parameters: [
    /* shader: */ GLuint,
    /* count: */ GLsizei,
    /* const_string: */ "buffer",
    /* length: */ "buffer",
  ],
  result: "void",
} as const;

let glShaderSource!: Deno.UnsafeFnPointer<typeof def_glShaderSource>;

export function ShaderSource(
  shader: number,
  count: number,
  const_string: TypedArray,
  length: TypedArray,
): void {
  return glShaderSource.call(
    shader,
    count,
    const_string,
    length,
  );
}

const def_glStencilFunc = {
  parameters: [
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilFunc!: Deno.UnsafeFnPointer<typeof def_glStencilFunc>;

export function StencilFunc(
  func: number,
  ref: number,
  mask: number,
): void {
  return glStencilFunc.call(
    func,
    ref,
    mask,
  );
}

const def_glStencilFuncSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* func: */ GLenum,
    /* ref: */ GLint,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilFuncSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilFuncSeparate>;

export function StencilFuncSeparate(
  face: number,
  func: number,
  ref: number,
  mask: number,
): void {
  return glStencilFuncSeparate.call(
    face,
    func,
    ref,
    mask,
  );
}

const def_glStencilMask = {
  parameters: [
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilMask!: Deno.UnsafeFnPointer<typeof def_glStencilMask>;

export function StencilMask(
  mask: number,
): void {
  return glStencilMask.call(
    mask,
  );
}

const def_glStencilMaskSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* mask: */ GLuint,
  ],
  result: "void",
} as const;

let glStencilMaskSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilMaskSeparate>;

export function StencilMaskSeparate(
  face: number,
  mask: number,
): void {
  return glStencilMaskSeparate.call(
    face,
    mask,
  );
}

const def_glStencilOp = {
  parameters: [
    /* fail: */ GLenum,
    /* zfail: */ GLenum,
    /* zpass: */ GLenum,
  ],
  result: "void",
} as const;

let glStencilOp!: Deno.UnsafeFnPointer<typeof def_glStencilOp>;

export function StencilOp(
  fail: number,
  zfail: number,
  zpass: number,
): void {
  return glStencilOp.call(
    fail,
    zfail,
    zpass,
  );
}

const def_glStencilOpSeparate = {
  parameters: [
    /* face: */ GLenum,
    /* sfail: */ GLenum,
    /* dpfail: */ GLenum,
    /* dppass: */ GLenum,
  ],
  result: "void",
} as const;

let glStencilOpSeparate!: Deno.UnsafeFnPointer<typeof def_glStencilOpSeparate>;

export function StencilOpSeparate(
  face: number,
  sfail: number,
  dpfail: number,
  dppass: number,
): void {
  return glStencilOpSeparate.call(
    face,
    sfail,
    dpfail,
    dppass,
  );
}

const def_glTexImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* internalformat: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* border: */ GLint,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

let glTexImage2D!: Deno.UnsafeFnPointer<typeof def_glTexImage2D>;

export function TexImage2D(
  target: number,
  level: number,
  internalformat: number,
  width: number,
  height: number,
  border: number,
  format: number,
  type: number,
  pixels: Deno.PointerValue,
): void {
  return glTexImage2D.call(
    target,
    level,
    internalformat,
    width,
    height,
    border,
    format,
    type,
    pixels,
  );
}

const def_glTexParameterf = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLfloat,
  ],
  result: "void",
} as const;

let glTexParameterf!: Deno.UnsafeFnPointer<typeof def_glTexParameterf>;

export function TexParameterf(
  target: number,
  pname: number,
  param: number,
): void {
  return glTexParameterf.call(
    target,
    pname,
    param,
  );
}

const def_glTexParameterfv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameterfv!: Deno.UnsafeFnPointer<typeof def_glTexParameterfv>;

export function TexParameterfv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameterfv.call(
    target,
    pname,
    params,
  );
}

const def_glTexParameteri = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* param: */ GLint,
  ],
  result: "void",
} as const;

let glTexParameteri!: Deno.UnsafeFnPointer<typeof def_glTexParameteri>;

export function TexParameteri(
  target: number,
  pname: number,
  param: number,
): void {
  return glTexParameteri.call(
    target,
    pname,
    param,
  );
}

const def_glTexParameteriv = {
  parameters: [
    /* target: */ GLenum,
    /* pname: */ GLenum,
    /* params: */ "buffer",
  ],
  result: "void",
} as const;

let glTexParameteriv!: Deno.UnsafeFnPointer<typeof def_glTexParameteriv>;

export function TexParameteriv(
  target: number,
  pname: number,
  params: TypedArray,
): void {
  return glTexParameteriv.call(
    target,
    pname,
    params,
  );
}

const def_glTexSubImage2D = {
  parameters: [
    /* target: */ GLenum,
    /* level: */ GLint,
    /* xoffset: */ GLint,
    /* yoffset: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
    /* format: */ GLenum,
    /* type: */ GLenum,
    /* pixels: */ "pointer",
  ],
  result: "void",
} as const;

let glTexSubImage2D!: Deno.UnsafeFnPointer<typeof def_glTexSubImage2D>;

export function TexSubImage2D(
  target: number,
  level: number,
  xoffset: number,
  yoffset: number,
  width: number,
  height: number,
  format: number,
  type: number,
  pixels: Deno.PointerValue,
): void {
  return glTexSubImage2D.call(
    target,
    level,
    xoffset,
    yoffset,
    width,
    height,
    format,
    type,
    pixels,
  );
}

const def_glUniform1f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform1f!: Deno.UnsafeFnPointer<typeof def_glUniform1f>;

export function Uniform1f(
  location: number,
  v0: number,
): void {
  return glUniform1f.call(
    location,
    v0,
  );
}

const def_glUniform1fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform1fv!: Deno.UnsafeFnPointer<typeof def_glUniform1fv>;

export function Uniform1fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform1fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform1i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
  ],
  result: "void",
} as const;

let glUniform1i!: Deno.UnsafeFnPointer<typeof def_glUniform1i>;

export function Uniform1i(
  location: number,
  v0: number,
): void {
  return glUniform1i.call(
    location,
    v0,
  );
}

const def_glUniform1iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform1iv!: Deno.UnsafeFnPointer<typeof def_glUniform1iv>;

export function Uniform1iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform1iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform2f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform2f!: Deno.UnsafeFnPointer<typeof def_glUniform2f>;

export function Uniform2f(
  location: number,
  v0: number,
  v1: number,
): void {
  return glUniform2f.call(
    location,
    v0,
    v1,
  );
}

const def_glUniform2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform2fv!: Deno.UnsafeFnPointer<typeof def_glUniform2fv>;

export function Uniform2fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform2fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform2i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
  ],
  result: "void",
} as const;

let glUniform2i!: Deno.UnsafeFnPointer<typeof def_glUniform2i>;

export function Uniform2i(
  location: number,
  v0: number,
  v1: number,
): void {
  return glUniform2i.call(
    location,
    v0,
    v1,
  );
}

const def_glUniform2iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform2iv!: Deno.UnsafeFnPointer<typeof def_glUniform2iv>;

export function Uniform2iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform2iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform3f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform3f!: Deno.UnsafeFnPointer<typeof def_glUniform3f>;

export function Uniform3f(
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glUniform3f.call(
    location,
    v0,
    v1,
    v2,
  );
}

const def_glUniform3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform3fv!: Deno.UnsafeFnPointer<typeof def_glUniform3fv>;

export function Uniform3fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform3fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform3i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
  ],
  result: "void",
} as const;

let glUniform3i!: Deno.UnsafeFnPointer<typeof def_glUniform3i>;

export function Uniform3i(
  location: number,
  v0: number,
  v1: number,
  v2: number,
): void {
  return glUniform3i.call(
    location,
    v0,
    v1,
    v2,
  );
}

const def_glUniform3iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform3iv!: Deno.UnsafeFnPointer<typeof def_glUniform3iv>;

export function Uniform3iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform3iv.call(
    location,
    count,
    value,
  );
}

const def_glUniform4f = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLfloat,
    /* v1: */ GLfloat,
    /* v2: */ GLfloat,
    /* v3: */ GLfloat,
  ],
  result: "void",
} as const;

let glUniform4f!: Deno.UnsafeFnPointer<typeof def_glUniform4f>;

export function Uniform4f(
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glUniform4f.call(
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glUniform4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform4fv!: Deno.UnsafeFnPointer<typeof def_glUniform4fv>;

export function Uniform4fv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform4fv.call(
    location,
    count,
    value,
  );
}

const def_glUniform4i = {
  parameters: [
    /* location: */ GLint,
    /* v0: */ GLint,
    /* v1: */ GLint,
    /* v2: */ GLint,
    /* v3: */ GLint,
  ],
  result: "void",
} as const;

let glUniform4i!: Deno.UnsafeFnPointer<typeof def_glUniform4i>;

export function Uniform4i(
  location: number,
  v0: number,
  v1: number,
  v2: number,
  v3: number,
): void {
  return glUniform4i.call(
    location,
    v0,
    v1,
    v2,
    v3,
  );
}

const def_glUniform4iv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniform4iv!: Deno.UnsafeFnPointer<typeof def_glUniform4iv>;

export function Uniform4iv(
  location: number,
  count: number,
  value: TypedArray,
): void {
  return glUniform4iv.call(
    location,
    count,
    value,
  );
}

const def_glUniformMatrix2fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix2fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix2fv>;

export function UniformMatrix2fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix2fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix3fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix3fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix3fv>;

export function UniformMatrix3fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix3fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUniformMatrix4fv = {
  parameters: [
    /* location: */ GLint,
    /* count: */ GLsizei,
    /* transpose: */ GLboolean,
    /* value: */ "buffer",
  ],
  result: "void",
} as const;

let glUniformMatrix4fv!: Deno.UnsafeFnPointer<typeof def_glUniformMatrix4fv>;

export function UniformMatrix4fv(
  location: number,
  count: number,
  transpose: number,
  value: TypedArray,
): void {
  return glUniformMatrix4fv.call(
    location,
    count,
    transpose,
    value,
  );
}

const def_glUseProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glUseProgram!: Deno.UnsafeFnPointer<typeof def_glUseProgram>;

export function UseProgram(
  program: number,
): void {
  return glUseProgram.call(
    program,
  );
}

const def_glValidateProgram = {
  parameters: [
    /* program: */ GLuint,
  ],
  result: "void",
} as const;

let glValidateProgram!: Deno.UnsafeFnPointer<typeof def_glValidateProgram>;

export function ValidateProgram(
  program: number,
): void {
  return glValidateProgram.call(
    program,
  );
}

const def_glVertexAttrib1f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib1f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib1f>;

export function VertexAttrib1f(
  index: number,
  x: number,
): void {
  return glVertexAttrib1f.call(
    index,
    x,
  );
}

const def_glVertexAttrib1fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib1fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib1fv>;

export function VertexAttrib1fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib1fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib2f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib2f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib2f>;

export function VertexAttrib2f(
  index: number,
  x: number,
  y: number,
): void {
  return glVertexAttrib2f.call(
    index,
    x,
    y,
  );
}

const def_glVertexAttrib2fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib2fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib2fv>;

export function VertexAttrib2fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib2fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib3f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib3f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib3f>;

export function VertexAttrib3f(
  index: number,
  x: number,
  y: number,
  z: number,
): void {
  return glVertexAttrib3f.call(
    index,
    x,
    y,
    z,
  );
}

const def_glVertexAttrib3fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib3fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib3fv>;

export function VertexAttrib3fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib3fv.call(
    index,
    v,
  );
}

const def_glVertexAttrib4f = {
  parameters: [
    /* index: */ GLuint,
    /* x: */ GLfloat,
    /* y: */ GLfloat,
    /* z: */ GLfloat,
    /* w: */ GLfloat,
  ],
  result: "void",
} as const;

let glVertexAttrib4f!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib4f>;

export function VertexAttrib4f(
  index: number,
  x: number,
  y: number,
  z: number,
  w: number,
): void {
  return glVertexAttrib4f.call(
    index,
    x,
    y,
    z,
    w,
  );
}

const def_glVertexAttrib4fv = {
  parameters: [
    /* index: */ GLuint,
    /* v: */ "buffer",
  ],
  result: "void",
} as const;

let glVertexAttrib4fv!: Deno.UnsafeFnPointer<typeof def_glVertexAttrib4fv>;

export function VertexAttrib4fv(
  index: number,
  v: TypedArray,
): void {
  return glVertexAttrib4fv.call(
    index,
    v,
  );
}

const def_glVertexAttribPointer = {
  parameters: [
    /* index: */ GLuint,
    /* size: */ GLint,
    /* type: */ GLenum,
    /* normalized: */ GLboolean,
    /* stride: */ GLsizei,
    /* pointer: */ "pointer",
  ],
  result: "void",
} as const;

let glVertexAttribPointer!: Deno.UnsafeFnPointer<typeof def_glVertexAttribPointer>;

export function VertexAttribPointer(
  index: number,
  size: number,
  type: number,
  normalized: number,
  stride: number,
  pointer: Deno.PointerValue,
): void {
  return glVertexAttribPointer.call(
    index,
    size,
    type,
    normalized,
    stride,
    pointer,
  );
}

const def_glViewport = {
  parameters: [
    /* x: */ GLint,
    /* y: */ GLint,
    /* width: */ GLsizei,
    /* height: */ GLsizei,
  ],
  result: "void",
} as const;

let glViewport!: Deno.UnsafeFnPointer<typeof def_glViewport>;

export function Viewport(
  x: number,
  y: number,
  width: number,
  height: number,
): void {
  return glViewport.call(
    x,
    y,
    width,
    height,
  );
}

// Loader

export function loadGL(proc: (name: string) => Deno.PointerValue) {
  glActiveTexture = new Deno.UnsafeFnPointer(BigInt(proc("glActiveTexture")), def_glActiveTexture);
  glAttachShader = new Deno.UnsafeFnPointer(BigInt(proc("glAttachShader")), def_glAttachShader);
  glBindAttribLocation = new Deno.UnsafeFnPointer(BigInt(proc("glBindAttribLocation")), def_glBindAttribLocation);
  glBindBuffer = new Deno.UnsafeFnPointer(BigInt(proc("glBindBuffer")), def_glBindBuffer);
  glBindFramebuffer = new Deno.UnsafeFnPointer(BigInt(proc("glBindFramebuffer")), def_glBindFramebuffer);
  glBindRenderbuffer = new Deno.UnsafeFnPointer(BigInt(proc("glBindRenderbuffer")), def_glBindRenderbuffer);
  glBindTexture = new Deno.UnsafeFnPointer(BigInt(proc("glBindTexture")), def_glBindTexture);
  glBlendColor = new Deno.UnsafeFnPointer(BigInt(proc("glBlendColor")), def_glBlendColor);
  glBlendEquation = new Deno.UnsafeFnPointer(BigInt(proc("glBlendEquation")), def_glBlendEquation);
  glBlendEquationSeparate = new Deno.UnsafeFnPointer(BigInt(proc("glBlendEquationSeparate")), def_glBlendEquationSeparate);
  glBlendFunc = new Deno.UnsafeFnPointer(BigInt(proc("glBlendFunc")), def_glBlendFunc);
  glBlendFuncSeparate = new Deno.UnsafeFnPointer(BigInt(proc("glBlendFuncSeparate")), def_glBlendFuncSeparate);
  glBufferData = new Deno.UnsafeFnPointer(BigInt(proc("glBufferData")), def_glBufferData);
  glBufferSubData = new Deno.UnsafeFnPointer(BigInt(proc("glBufferSubData")), def_glBufferSubData);
  glCheckFramebufferStatus = new Deno.UnsafeFnPointer(BigInt(proc("glCheckFramebufferStatus")), def_glCheckFramebufferStatus);
  glClear = new Deno.UnsafeFnPointer(BigInt(proc("glClear")), def_glClear);
  glClearColor = new Deno.UnsafeFnPointer(BigInt(proc("glClearColor")), def_glClearColor);
  glClearDepthf = new Deno.UnsafeFnPointer(BigInt(proc("glClearDepthf")), def_glClearDepthf);
  glClearStencil = new Deno.UnsafeFnPointer(BigInt(proc("glClearStencil")), def_glClearStencil);
  glColorMask = new Deno.UnsafeFnPointer(BigInt(proc("glColorMask")), def_glColorMask);
  glCompileShader = new Deno.UnsafeFnPointer(BigInt(proc("glCompileShader")), def_glCompileShader);
  glCompressedTexImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glCompressedTexImage2D")), def_glCompressedTexImage2D);
  glCompressedTexSubImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glCompressedTexSubImage2D")), def_glCompressedTexSubImage2D);
  glCopyTexImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glCopyTexImage2D")), def_glCopyTexImage2D);
  glCopyTexSubImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glCopyTexSubImage2D")), def_glCopyTexSubImage2D);
  glCreateProgram = new Deno.UnsafeFnPointer(BigInt(proc("glCreateProgram")), def_glCreateProgram);
  glCreateShader = new Deno.UnsafeFnPointer(BigInt(proc("glCreateShader")), def_glCreateShader);
  glCullFace = new Deno.UnsafeFnPointer(BigInt(proc("glCullFace")), def_glCullFace);
  glDeleteBuffers = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteBuffers")), def_glDeleteBuffers);
  glDeleteFramebuffers = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteFramebuffers")), def_glDeleteFramebuffers);
  glDeleteProgram = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteProgram")), def_glDeleteProgram);
  glDeleteRenderbuffers = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteRenderbuffers")), def_glDeleteRenderbuffers);
  glDeleteShader = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteShader")), def_glDeleteShader);
  glDeleteTextures = new Deno.UnsafeFnPointer(BigInt(proc("glDeleteTextures")), def_glDeleteTextures);
  glDepthFunc = new Deno.UnsafeFnPointer(BigInt(proc("glDepthFunc")), def_glDepthFunc);
  glDepthMask = new Deno.UnsafeFnPointer(BigInt(proc("glDepthMask")), def_glDepthMask);
  glDepthRangef = new Deno.UnsafeFnPointer(BigInt(proc("glDepthRangef")), def_glDepthRangef);
  glDetachShader = new Deno.UnsafeFnPointer(BigInt(proc("glDetachShader")), def_glDetachShader);
  glDisable = new Deno.UnsafeFnPointer(BigInt(proc("glDisable")), def_glDisable);
  glDisableVertexAttribArray = new Deno.UnsafeFnPointer(BigInt(proc("glDisableVertexAttribArray")), def_glDisableVertexAttribArray);
  glDrawArrays = new Deno.UnsafeFnPointer(BigInt(proc("glDrawArrays")), def_glDrawArrays);
  glDrawElements = new Deno.UnsafeFnPointer(BigInt(proc("glDrawElements")), def_glDrawElements);
  glEnable = new Deno.UnsafeFnPointer(BigInt(proc("glEnable")), def_glEnable);
  glEnableVertexAttribArray = new Deno.UnsafeFnPointer(BigInt(proc("glEnableVertexAttribArray")), def_glEnableVertexAttribArray);
  glFinish = new Deno.UnsafeFnPointer(BigInt(proc("glFinish")), def_glFinish);
  glFlush = new Deno.UnsafeFnPointer(BigInt(proc("glFlush")), def_glFlush);
  glFramebufferRenderbuffer = new Deno.UnsafeFnPointer(BigInt(proc("glFramebufferRenderbuffer")), def_glFramebufferRenderbuffer);
  glFramebufferTexture2D = new Deno.UnsafeFnPointer(BigInt(proc("glFramebufferTexture2D")), def_glFramebufferTexture2D);
  glFrontFace = new Deno.UnsafeFnPointer(BigInt(proc("glFrontFace")), def_glFrontFace);
  glGenBuffers = new Deno.UnsafeFnPointer(BigInt(proc("glGenBuffers")), def_glGenBuffers);
  glGenerateMipmap = new Deno.UnsafeFnPointer(BigInt(proc("glGenerateMipmap")), def_glGenerateMipmap);
  glGenFramebuffers = new Deno.UnsafeFnPointer(BigInt(proc("glGenFramebuffers")), def_glGenFramebuffers);
  glGenRenderbuffers = new Deno.UnsafeFnPointer(BigInt(proc("glGenRenderbuffers")), def_glGenRenderbuffers);
  glGenTextures = new Deno.UnsafeFnPointer(BigInt(proc("glGenTextures")), def_glGenTextures);
  glGetActiveAttrib = new Deno.UnsafeFnPointer(BigInt(proc("glGetActiveAttrib")), def_glGetActiveAttrib);
  glGetActiveUniform = new Deno.UnsafeFnPointer(BigInt(proc("glGetActiveUniform")), def_glGetActiveUniform);
  glGetAttachedShaders = new Deno.UnsafeFnPointer(BigInt(proc("glGetAttachedShaders")), def_glGetAttachedShaders);
  glGetAttribLocation = new Deno.UnsafeFnPointer(BigInt(proc("glGetAttribLocation")), def_glGetAttribLocation);
  glGetBooleanv = new Deno.UnsafeFnPointer(BigInt(proc("glGetBooleanv")), def_glGetBooleanv);
  glGetBufferParameteriv = new Deno.UnsafeFnPointer(BigInt(proc("glGetBufferParameteriv")), def_glGetBufferParameteriv);
  glGetError = new Deno.UnsafeFnPointer(BigInt(proc("glGetError")), def_glGetError);
  glGetFloatv = new Deno.UnsafeFnPointer(BigInt(proc("glGetFloatv")), def_glGetFloatv);
  glGetFramebufferAttachmentParameteriv = new Deno.UnsafeFnPointer(BigInt(proc("glGetFramebufferAttachmentParameteriv")), def_glGetFramebufferAttachmentParameteriv);
  glGetIntegerv = new Deno.UnsafeFnPointer(BigInt(proc("glGetIntegerv")), def_glGetIntegerv);
  glGetProgramiv = new Deno.UnsafeFnPointer(BigInt(proc("glGetProgramiv")), def_glGetProgramiv);
  glGetProgramInfoLog = new Deno.UnsafeFnPointer(BigInt(proc("glGetProgramInfoLog")), def_glGetProgramInfoLog);
  glGetRenderbufferParameteriv = new Deno.UnsafeFnPointer(BigInt(proc("glGetRenderbufferParameteriv")), def_glGetRenderbufferParameteriv);
  glGetShaderiv = new Deno.UnsafeFnPointer(BigInt(proc("glGetShaderiv")), def_glGetShaderiv);
  glGetShaderInfoLog = new Deno.UnsafeFnPointer(BigInt(proc("glGetShaderInfoLog")), def_glGetShaderInfoLog);
  glGetShaderPrecisionFormat = new Deno.UnsafeFnPointer(BigInt(proc("glGetShaderPrecisionFormat")), def_glGetShaderPrecisionFormat);
  glGetShaderSource = new Deno.UnsafeFnPointer(BigInt(proc("glGetShaderSource")), def_glGetShaderSource);
  glGetString = new Deno.UnsafeFnPointer(BigInt(proc("glGetString")), def_glGetString);
  glGetTexParameterfv = new Deno.UnsafeFnPointer(BigInt(proc("glGetTexParameterfv")), def_glGetTexParameterfv);
  glGetTexParameteriv = new Deno.UnsafeFnPointer(BigInt(proc("glGetTexParameteriv")), def_glGetTexParameteriv);
  glGetUniformfv = new Deno.UnsafeFnPointer(BigInt(proc("glGetUniformfv")), def_glGetUniformfv);
  glGetUniformiv = new Deno.UnsafeFnPointer(BigInt(proc("glGetUniformiv")), def_glGetUniformiv);
  glGetUniformLocation = new Deno.UnsafeFnPointer(BigInt(proc("glGetUniformLocation")), def_glGetUniformLocation);
  glGetVertexAttribfv = new Deno.UnsafeFnPointer(BigInt(proc("glGetVertexAttribfv")), def_glGetVertexAttribfv);
  glGetVertexAttribiv = new Deno.UnsafeFnPointer(BigInt(proc("glGetVertexAttribiv")), def_glGetVertexAttribiv);
  glGetVertexAttribPointerv = new Deno.UnsafeFnPointer(BigInt(proc("glGetVertexAttribPointerv")), def_glGetVertexAttribPointerv);
  glHint = new Deno.UnsafeFnPointer(BigInt(proc("glHint")), def_glHint);
  glIsBuffer = new Deno.UnsafeFnPointer(BigInt(proc("glIsBuffer")), def_glIsBuffer);
  glIsEnabled = new Deno.UnsafeFnPointer(BigInt(proc("glIsEnabled")), def_glIsEnabled);
  glIsFramebuffer = new Deno.UnsafeFnPointer(BigInt(proc("glIsFramebuffer")), def_glIsFramebuffer);
  glIsProgram = new Deno.UnsafeFnPointer(BigInt(proc("glIsProgram")), def_glIsProgram);
  glIsRenderbuffer = new Deno.UnsafeFnPointer(BigInt(proc("glIsRenderbuffer")), def_glIsRenderbuffer);
  glIsShader = new Deno.UnsafeFnPointer(BigInt(proc("glIsShader")), def_glIsShader);
  glIsTexture = new Deno.UnsafeFnPointer(BigInt(proc("glIsTexture")), def_glIsTexture);
  glLineWidth = new Deno.UnsafeFnPointer(BigInt(proc("glLineWidth")), def_glLineWidth);
  glLinkProgram = new Deno.UnsafeFnPointer(BigInt(proc("glLinkProgram")), def_glLinkProgram);
  glPixelStorei = new Deno.UnsafeFnPointer(BigInt(proc("glPixelStorei")), def_glPixelStorei);
  glPolygonOffset = new Deno.UnsafeFnPointer(BigInt(proc("glPolygonOffset")), def_glPolygonOffset);
  glReadPixels = new Deno.UnsafeFnPointer(BigInt(proc("glReadPixels")), def_glReadPixels);
  glReleaseShaderCompiler = new Deno.UnsafeFnPointer(BigInt(proc("glReleaseShaderCompiler")), def_glReleaseShaderCompiler);
  glRenderbufferStorage = new Deno.UnsafeFnPointer(BigInt(proc("glRenderbufferStorage")), def_glRenderbufferStorage);
  glSampleCoverage = new Deno.UnsafeFnPointer(BigInt(proc("glSampleCoverage")), def_glSampleCoverage);
  glScissor = new Deno.UnsafeFnPointer(BigInt(proc("glScissor")), def_glScissor);
  glShaderBinary = new Deno.UnsafeFnPointer(BigInt(proc("glShaderBinary")), def_glShaderBinary);
  glShaderSource = new Deno.UnsafeFnPointer(BigInt(proc("glShaderSource")), def_glShaderSource);
  glStencilFunc = new Deno.UnsafeFnPointer(BigInt(proc("glStencilFunc")), def_glStencilFunc);
  glStencilFuncSeparate = new Deno.UnsafeFnPointer(BigInt(proc("glStencilFuncSeparate")), def_glStencilFuncSeparate);
  glStencilMask = new Deno.UnsafeFnPointer(BigInt(proc("glStencilMask")), def_glStencilMask);
  glStencilMaskSeparate = new Deno.UnsafeFnPointer(BigInt(proc("glStencilMaskSeparate")), def_glStencilMaskSeparate);
  glStencilOp = new Deno.UnsafeFnPointer(BigInt(proc("glStencilOp")), def_glStencilOp);
  glStencilOpSeparate = new Deno.UnsafeFnPointer(BigInt(proc("glStencilOpSeparate")), def_glStencilOpSeparate);
  glTexImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glTexImage2D")), def_glTexImage2D);
  glTexParameterf = new Deno.UnsafeFnPointer(BigInt(proc("glTexParameterf")), def_glTexParameterf);
  glTexParameterfv = new Deno.UnsafeFnPointer(BigInt(proc("glTexParameterfv")), def_glTexParameterfv);
  glTexParameteri = new Deno.UnsafeFnPointer(BigInt(proc("glTexParameteri")), def_glTexParameteri);
  glTexParameteriv = new Deno.UnsafeFnPointer(BigInt(proc("glTexParameteriv")), def_glTexParameteriv);
  glTexSubImage2D = new Deno.UnsafeFnPointer(BigInt(proc("glTexSubImage2D")), def_glTexSubImage2D);
  glUniform1f = new Deno.UnsafeFnPointer(BigInt(proc("glUniform1f")), def_glUniform1f);
  glUniform1fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform1fv")), def_glUniform1fv);
  glUniform1i = new Deno.UnsafeFnPointer(BigInt(proc("glUniform1i")), def_glUniform1i);
  glUniform1iv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform1iv")), def_glUniform1iv);
  glUniform2f = new Deno.UnsafeFnPointer(BigInt(proc("glUniform2f")), def_glUniform2f);
  glUniform2fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform2fv")), def_glUniform2fv);
  glUniform2i = new Deno.UnsafeFnPointer(BigInt(proc("glUniform2i")), def_glUniform2i);
  glUniform2iv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform2iv")), def_glUniform2iv);
  glUniform3f = new Deno.UnsafeFnPointer(BigInt(proc("glUniform3f")), def_glUniform3f);
  glUniform3fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform3fv")), def_glUniform3fv);
  glUniform3i = new Deno.UnsafeFnPointer(BigInt(proc("glUniform3i")), def_glUniform3i);
  glUniform3iv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform3iv")), def_glUniform3iv);
  glUniform4f = new Deno.UnsafeFnPointer(BigInt(proc("glUniform4f")), def_glUniform4f);
  glUniform4fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform4fv")), def_glUniform4fv);
  glUniform4i = new Deno.UnsafeFnPointer(BigInt(proc("glUniform4i")), def_glUniform4i);
  glUniform4iv = new Deno.UnsafeFnPointer(BigInt(proc("glUniform4iv")), def_glUniform4iv);
  glUniformMatrix2fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniformMatrix2fv")), def_glUniformMatrix2fv);
  glUniformMatrix3fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniformMatrix3fv")), def_glUniformMatrix3fv);
  glUniformMatrix4fv = new Deno.UnsafeFnPointer(BigInt(proc("glUniformMatrix4fv")), def_glUniformMatrix4fv);
  glUseProgram = new Deno.UnsafeFnPointer(BigInt(proc("glUseProgram")), def_glUseProgram);
  glValidateProgram = new Deno.UnsafeFnPointer(BigInt(proc("glValidateProgram")), def_glValidateProgram);
  glVertexAttrib1f = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib1f")), def_glVertexAttrib1f);
  glVertexAttrib1fv = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib1fv")), def_glVertexAttrib1fv);
  glVertexAttrib2f = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib2f")), def_glVertexAttrib2f);
  glVertexAttrib2fv = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib2fv")), def_glVertexAttrib2fv);
  glVertexAttrib3f = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib3f")), def_glVertexAttrib3f);
  glVertexAttrib3fv = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib3fv")), def_glVertexAttrib3fv);
  glVertexAttrib4f = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib4f")), def_glVertexAttrib4f);
  glVertexAttrib4fv = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttrib4fv")), def_glVertexAttrib4fv);
  glVertexAttribPointer = new Deno.UnsafeFnPointer(BigInt(proc("glVertexAttribPointer")), def_glVertexAttribPointer);
  glViewport = new Deno.UnsafeFnPointer(BigInt(proc("glViewport")), def_glViewport);
}
